<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home-lab on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/home-lab/</link>
    <description>Recent content in Home-lab on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jul 2021 07:45:19 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/home-lab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Kali Linux Setup for Playing HackTheBox</title>
      <link>https://fahmifj.github.io/blog/my-kali-setup-for-hackthebox/</link>
      <pubDate>Fri, 09 Jul 2021 07:45:19 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/my-kali-setup-for-hackthebox/</guid>
      <description>Noob Kali setup</description>
      <content:encoded><![CDATA[<p>After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a <em>weaponized</em> version of Ubuntu, but because I like simplicity, I decided to use Kali again 😄 <em>//slap</em>.</p>
<p>In this post, I’d like to share my Kali Linux setup for playing  HackTheBox. I think it is applicable for TryHackMe, VulnHub or other  boot2root platform, too.</p>
<h2 id="display-ip-address-in-prompt">Display IP Address in Prompt</h2>
<p>Adding IP address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell. To do so, we&rsquo;ll need to modify the <code>.zshrc</code> file. But, before performing any modification, consider to make a backup of your original file using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cp ~/.zshrc<span class="o">{</span>,.bak<span class="o">}</span> 
</span></span></code></pre></div><p>Also, I usually put any customization at the top of the <code>.zshrc</code> file wrapped between two comments, for example:</p>
<pre tabindex="0"><code># START CUSTOM
...[custom script here]
# END CUSTOM
</code></pre><p>If all set, add the following function to your <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="k">function</span> get_ip<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># It can be thm or htb IP</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tunnel_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig tun0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span> 
</span></span><span class="line"><span class="cl">   <span class="c1"># Use eth0 as default IP,</span>
</span></span><span class="line"><span class="cl">   <span class="nv">default_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig eth0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">[[</span> <span class="nv">$tunnel_ip</span> <span class="o">==</span> *<span class="s2">&#34;10.&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$tunnel_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$default_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Then, find the following lines:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$PROMPT_ALTERNATIVE</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">        twoline<span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Under these lines,  replace the entire <code>PROMPT</code> variable with the following line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">PROMPT=$&#39;%F{%(#.blue.green)}┌──${debian_chroot:+($debian_chroot)─}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/…/%4~.%5~)%b%F{%(#.blue.green)}]-%B%F{152}[`get_ip`]%b%f%F{%(#.blue.green)}\n└─%B%(#.%F{red}#.%F{blue}$)%b%F{reset} &#39;
</span></span></code></pre></div><p>Reopen your terminal or type one of the following commands in the terminal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ zsh
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><p>And done.</p>
<p><div class="img-container"><img src="imgs/image-20210709054914243.png" alt="image-20210709054914243"  /></div>
</p>
<h2 id="openvpn-connection">OpenVPN Connection</h2>
<p>For VPN, it&rsquo;s tiring when you have to type <code>$ openvpn /path/to/config/file.ovpn</code> each time you want to connect to the HTB/THM network. To make thing easier, we can create a folder called <code>.ovpnconfig</code> in the home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/.ovpnconfig
</span></span></code></pre></div><p>Then put all of your OpenVPN configuration files into this <code>.ovpnconfig</code> folder.</p>
<p><div class="img-container"><img src="imgs/image-20210709063528132.png" alt="image-20210709063528132"  /></div>
</p>
<p>Finally, add some aliases into your <code>.zshrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbfort</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbrel</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmwreath</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kvpn</span><span class="o">=</span><span class="s1">&#39;pkill openvpn&#39;</span>
</span></span></code></pre></div><p>Now we can type <code>$ htbon</code> or <code>$ thmon</code> in the command prompt to connect to the VPN.  Want to turn off the VPN? Simply type <code>$ kvpn</code> !</p>
<h2 id="sudo-with-alias">Sudo with Alias</h2>
<p>In the newer Kali Linux (non-root login), the only problem is that <code>openvpn</code> must be executed with <code>sudo</code> . Therefore, you&rsquo;ve to add the following <code>sudo</code> alias.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># Source: https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background
</span></span><span class="line"><span class="cl">alias sudo=&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;
</span></span></code></pre></div><ul>
<li><code>sudo -v</code> will authenticate the user first.</li>
<li><code>[ $? ] &amp;&amp; sudo </code> will check if the previous command (separated by semi-colon) return with success (value of 0), if yes run <code>sudo</code> again.</li>
</ul>
<p>This time, we can run sudo command with aliases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo &lt;alias-command&gt;
</span></span><span class="line"><span class="cl">$ sudo htbon
</span></span><span class="line"><span class="cl">$ sudo thmon
</span></span><span class="line"><span class="cl">$ sudo kvpn
</span></span></code></pre></div><p>An alternative for sudo to work with alias is using sudo with no passwd.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo visudo /etc/sudoers.d/kali
</span></span></code></pre></div><p>Then add the following line.</p>
<pre tabindex="0"><code>kali  ALL=NOPASSWD: ALL
</code></pre><p>After that, change the previous sudo alias to this one</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">alias sudo=&#39;sudo &#39;
</span></span></code></pre></div><h2 id="tools-transfer">Tools Transfer</h2>
<p>Just like the OpenVPN files, I like to keep the essential tools to be centralized in one folder and so it can be hosted immediately. Again, we can create a folder called <code>tools</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/tools
</span></span></code></pre></div><p>Put your tools inside the folder. The following are some of the tools that I think to be essential (including web-shell).</p>
<p><div class="img-container"><img src="imgs/image-20210709065944915.png" alt="image-20210709065944915"  /></div>
</p>
<p>Next, add another alias to host these tools immediately with one command, feel free to create alias for yourself. Mine called <code>hostit</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">hostit</span><span class="o">=</span><span class="s1">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</span></span></code></pre></div><p>If you watch <a href="https://www.youtube.com/c/ippsec/videos">ippsec</a>, he prefers keeping the tools with the associated pwned machines (in <code>www</code> directory). So it&rsquo;s up to you.</p>
<h2 id="note-template">Note Template</h2>
<p>My current note template is available on <a href="https://github.com/fahmifj/HackTheBox-notes/tree/main/machines/note-template">GitHub</a>. I&rsquo;m using the following function to recreate the directory structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">function</span> mknote<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  mkdir nmap gobuster loot logs exploits ssh-keys post-exploits
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><strong>nmap:</strong> each nmap scan goes here.</p>
</li>
<li>
<p><strong>gobuster:</strong> each gobuster scan goes here.</p>
</li>
<li>
<p><strong>loot:</strong> each interesting file for further analysis goes here.</p>
</li>
<li>
<p><strong>logs:</strong> If you like to log your activity with <code>$ script</code> , put them here.</p>
</li>
<li>
<p><strong>exploits:</strong> exploit script goes here.</p>
</li>
<li>
<p><strong>ssh-keys:</strong> obtained ssh-key goes here, not loot.</p>
</li>
<li>
<p><strong>post-exploits:</strong> post-compromise loot goes here.</p>
</li>
</ul>
<p>Usage is simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> htb-machine-folder/
</span></span><span class="line"><span class="cl">$ mknote
</span></span><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── exploits
</span></span><span class="line"><span class="cl">├── gobuster
</span></span><span class="line"><span class="cl">├── logs
</span></span><span class="line"><span class="cl">├── loot
</span></span><span class="line"><span class="cl">├── nmap
</span></span><span class="line"><span class="cl">├── post-exploits
</span></span><span class="line"><span class="cl">└── ssh-keys
</span></span></code></pre></div><h2 id="ssh-configuration">SSH Configuration</h2>
<p>I have always use a separate SSH keys for CTF. My SSH key for CTF is using ed25519. You can create one using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh-keygen -a <span class="m">100</span> -t ed25519 -f ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>After that, register your private key to SSH agent.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ ssh-add ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>Since HackTheBox machine starts with IP address of <code>10.10.*</code>, add these lines to your SSH config (<code>~/.ssh/config</code>). Create one if you don&rsquo;t have it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Host 10.10.*
</span></span><span class="line"><span class="cl">  IdentityFile ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>With the config above, whenever I injected my public key (<code>/.ssh/ctf_ssh.pub</code>) to HackTheBox machine for <a href="https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/">persistence access</a>, I can login by simply typing <code>$ ssh machine-name@hostname</code> or <code>$ ssh machine-name@ip</code>. I don&rsquo;t have to specify <code>-i /path/to/ssh/private/key</code> anymore.</p>
<h2 id="qterminal-configuration">QTerminal Configuration</h2>
<p>Unfortunately I&rsquo;m not a tmux user here. Tmux is rich in features, but I&rsquo;m not comfortable with its prefix key. So far, I&rsquo;ve always used the default QTerminal application and leveraged its shortcut feature to &rsquo;navigate&rsquo; a slightly faster in terminal.</p>
<p>If you&rsquo;re a Windows Terminal user, you&rsquo;ll familiar with some of these shortcuts:</p>
<ul>
<li><strong><code>ALT + Arrows</code></strong>: Move cursor in subterminal</li>
<li><strong><code>CTRL + TAB</code></strong>: Navigate between tabs</li>
<li><strong><code>CTRL + Arrow Left</code></strong>:  Previous tab</li>
<li><strong><code>CTRL + Arrow Right</code></strong>: Next tab</li>
<li><strong><code>CTRL + N</code></strong> : New terminal tab</li>
<li><strong><code>CTRL + SHIFT + W</code></strong> : Close current subterminal</li>
<li><strong><code>CTRL + SHIFT + =</code></strong> : Split terminal vertically</li>
<li><strong><code>CTRL + SHIFT + -</code></strong> : Split terminal horizontally</li>
<li><strong><code>CTRL + SHIFT + F</code></strong> : Open search bar in terminal</li>
<li><strong><code>CTRL + =</code></strong> : Zoom in</li>
<li><strong><code>CTRL + -</code></strong> : Zoom out</li>
</ul>
<p>For me, the only limitation here is that there is no shortcut for resizing a subterminal.</p>
<h2 id="all-in-one-with-oh-my-zsh-plugin">All in One with Oh My Zsh Plugin</h2>
<p>If you&rsquo;re a <a href="https://ohmyz.sh/#install">Oh My Zsh</a> user like me, we can add these configurations (excluding SSH and QTerminal configurations) into a custom plugin.</p>
<p>Save the following script to  <code>/home/&lt;username&gt;/.oh-my-zsh/custom/plugins/ctf/ctf.plugin.zsh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> get_ip<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># It can be thm or htb IP</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tunnel_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig tun0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span> 
</span></span><span class="line"><span class="cl">   <span class="c1"># Use eth0 as default IP,</span>
</span></span><span class="line"><span class="cl">   <span class="nv">default_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig eth0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">[[</span> <span class="nv">$tunnel_ip</span> <span class="o">==</span> *<span class="s2">&#34;10.&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$tunnel_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$default_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> mknote<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  mkdir nmap gobuster loot logs exploits ssh-keys dump post-exploits
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sudo</span><span class="o">=</span><span class="s1">&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbfort</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbrel</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmwreath</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kvpn</span><span class="o">=</span><span class="s1">&#39;pkill openvpn&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">hostit</span><span class="o">=</span><span class="s1">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</span></span></code></pre></div><blockquote>
<p>If you want to include my note template as well, I&rsquo;ve prepared <a href="https://github.com/fahmifj/HackTheBox-notes/blob/main/machines/note-template/ctf.plugin.zsh">this one</a> with note template embedded in <code>mknote</code> function.</p>
</blockquote>
<p>The next step depends on your theme. I use a theme called <code>robbyrussell</code>.</p>
<p>I created a copy of the theme in <code> /home/kali/.oh-my-zsh/custom/themes/robbyrussell.zsh-theme</code> and modified the theme to display IP address and use two lines prompt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">NEWLINE=$&#39;\n$&#39; 
</span></span><span class="line"><span class="cl">PROMPT=&#39;%(?:%{$fg_bold[green]%}→:%{$fg_bold[red]%}→)&#39;
</span></span><span class="line"><span class="cl">PROMPT+=&#39; %F{4}%n@%m %{$fg[cyan]%}«%c»%{$reset_color%}&#39;
</span></span><span class="line"><span class="cl">PROMPT+=&#39; %B%F{152}«$(get_ip)»%f%b $(git_prompt_info)&#39;
</span></span><span class="line"><span class="cl">PROMPT+=&#34;%F{31}${NEWLINE} %f&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_PREFIX=&#34;%{$fg_bold[blue]%}git:(%{$fg[red]%}&#34;
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_SUFFIX=&#34;%{$reset_color%} &#34;
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_DIRTY=&#34;%{$fg[blue]%}) %{$fg[yellow]%}✗&#34;
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_CLEAN=&#34;%{$fg[blue]%})&#34;
</span></span></code></pre></div><p>Finally, load the <code>ctf</code> plugin we created in <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">...[SNIP]...
</span></span><span class="line"><span class="cl"># Which plugins would you like to load?
</span></span><span class="line"><span class="cl"># Standard plugins can be found in $ZSH/plugins/
</span></span><span class="line"><span class="cl"># Custom plugins may be added to $ZSH_CUSTOM/plugins/
</span></span><span class="line"><span class="cl"># Example format: plugins=(rails git textmate ruby lighthouse)
</span></span><span class="line"><span class="cl"># Add wisely, as too many plugins slow down shell startup.
</span></span><span class="line"><span class="cl">plugins=(git ctf)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...[SNIP]...
</span></span></code></pre></div><p>Restart your terminal and we&rsquo;re done.</p>
<p><div class="img-container"><img src="imgs/image-20210711221808834.png" alt="image-20210711221808834"  /></div>
</p>
<p>And that&rsquo;s all for this post!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Building Virtual Home Lab for Pentesting</title>
      <link>https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/</link>
      <pubDate>Thu, 17 Jun 2021 14:04:24 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/building-virtual-home-lab-for-pentesting/</guid>
      <description>With 8 gigs!</description>
      <content:encoded><![CDATA[<p>This is my personal documentation on setting up a pentesting lab in a virtual environment to learn some AD attack scenarios, network pivoting, and C2 (command &amp; control) with <code>metasploit</code>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<h3 id="knowledge">Knowledge</h3>
<ul>
<li>Virtualization and VirtualBox</li>
<li>Windows OS and Server Installation</li>
<li>Basics knowledge of Windows/Windows Server (Desktop/GUI version)/</li>
<li>Basics knowledge of Active Directory:
<ul>
<li>AD Domain</li>
<li>Principle name</li>
<li>DNS</li>
</ul>
</li>
<li>Basics knowledge of Networking (routing).</li>
</ul>
<h3 id="hardware">Hardware</h3>
<p>The following are the main specifications that I recommend, the list is sorted by priority.</p>
<ul>
<li>Storage: 256 GB minimum, SSD is a must for server, or use high speed USB 3.1/ type C drive.</li>
<li>RAM: 8 GB of minimum, 16 GB recommended dual channel.</li>
<li>CPU: AMD Ryzen 3 or Intel i3 6th (minimum), AMD Ryzen 5+ with H prefix or i5+ 6th gen with K/H prefix. (recommended).
<ul>
<li>4th gen of i7 is still worth though.</li>
</ul>
</li>
</ul>
<p>For me, I used a single MSI laptop with the minimum requirements except for the CPU.</p>
<h3 id="software">Software</h3>
<ul>
<li>VirtualBox (<a href="https://www.virtualbox.org/wiki/Downloads">Download</a>)</li>
<li>Kali Linux image file (<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/#1572305786534-030ce714-cc3b">Download</a>)</li>
<li>Windows 10 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/">Download</a>)</li>
<li>Windows Server 2019 evaluation image file (<a href="https://www.microsoft.com/en-us/evalcenter/">Download</a>)</li>
</ul>
<h2 id="topology">Topology</h2>
<p>I know it&rsquo;s bad.</p>
<p><div class="img-container"><img src="imgs/topology.jpg" alt=""  /></div>
</p>
<p>So, for pivoting, I removed the Windows 10 inside network range of  <code>10.10.10.100/28</code> from AD Domain.</p>
<blockquote>
<p>It&rsquo;s NIC (Network Interface Card) not NC</p>
</blockquote>
<h2 id="setup">Setup</h2>
<h3 id="vm-system-configuration">VM System Configuration</h3>
<h4 id="system">System</h4>
<p>Initial for installation</p>
<ul>
<li>Server: 2424 MB of RAM</li>
<li>Client: x2 1280 MB of RAM</li>
</ul>
<p>After installation (removed style/desktop/disable junk service)</p>
<ul>
<li>Server: 1280 MB of RAM</li>
<li>Client: 1024 MB of RAM</li>
<li>Attacking machine: 1024MB of RAM</li>
</ul>
<p>Trust me, I use 8 GB to host these VM. 😂</p>
<ul>
<li>Windows 2019 = Server</li>
<li>Windows 10 = Client</li>
<li>Kali Linux/Armed Ubuntu = Attacker</li>
</ul>
<p>For initial setup, the two clients can <strong>stay inside</strong> <code>192.168.1.0/24</code> network.</p>
<h4 id="network">Network</h4>
<p>Server Adapter 1:</p>
<p><div class="img-container"><img src="imgs/image-20210617143401181.png" alt="image-20210617143401181"  /></div>
</p>
<h3 id="setting-up-server">Setting up Server</h3>
<h4 id="initial-setup">Initial setup</h4>
<ul>
<li>Admin credentials: <code>administrator:p@$$w0rd!</code></li>
<li>PC Name: <code>server19-DC</code> (restart after)</li>
<li>Network (Static):
<ul>
<li>Adapter 1: 192.168.1.100/24</li>
<li>Adapter 2: 10.10.10.100/28</li>
</ul>
</li>
</ul>
<h4 id="promote-to-domain-controller">Promote to Domain Controller</h4>
<ul>
<li>Server Manager &gt; Manage &gt; Add Roles and Features.</li>
<li>Add Roles and Features Wizard:
<ul>
<li>Installation type: &ldquo;<strong>Role-based or feature-based installation</strong>&rdquo;</li>
<li>Server selection: <code>server19-DC</code></li>
<li>Server roles: <strong>&ldquo;Active Directory Domain Services&rdquo;</strong> and check the <strong>&ldquo;Include management tools&rdquo;</strong>.</li>
<li>Features: Check the <strong>&ldquo;Group Policy Management&rdquo;</strong></li>
<li>Confirmation:  Check on <strong>&ldquo;Restart destination server automatically if required&rdquo;</strong></li>
<li>Close after it&rsquo;s done.</li>
</ul>
</li>
<li>Server Manager &gt; Notification flag &gt; Click on <strong>&ldquo;Promote this server to a domain controller&rdquo;</strong></li>
<li>Active Directory Domain Services Configuration Wizard:
<ul>
<li>Deployment configuration: <strong>&ldquo;Add a new forest&rdquo;</strong> and set <strong>&ldquo;server19.local&rdquo;</strong> as root domain name</li>
<li>Domain controller options: set <strong>&ldquo;Windows Server 2016&rdquo;</strong> as FFL (Forest Functional Level) and DFL (Domain Functional Level). Checklist DNS server and set the same admin password for DSRM password.</li>
<li>Additional options: set NetBIOS domain name to <code>SERVER19</code></li>
<li>Let the rest options in default state until installation section.</li>
<li>Restart after installation complete.</li>
</ul>
</li>
</ul>
<p><div class="img-container"><img src="imgs/server19logon.jpg" alt=""  /></div>
</p>
<h4 id="domain-accounts">Domain Accounts</h4>
<ul>
<li>John Smith
<ul>
<li>User logon name: <code>jsmith@server19.local</code></li>
<li>Password: <code>jsmith@123</code></li>
</ul>
</li>
<li>Carl Smith
<ul>
<li>User logon name: <code>cmisth@server19.local</code></li>
<li>Password: <code>@csmith@</code></li>
</ul>
</li>
</ul>
<p>All password is set to never expires.</p>
<h4 id="service-account">Service Account</h4>
<p>Fake SQL Service</p>
<ul>
<li>User logon name: <code>SQLService@server19.local</code></li>
<li>Password: <code>Mysql@Password123</code></li>
</ul>
<p>Set service principle name:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">setspn -a SERVER19-DC/SQLService.SERVER19.local:60111 SERVER19\SQLService
</span></span><span class="line"><span class="cl">setspn -T SERVER19.local -Q */*
</span></span></code></pre></div><h4 id="configure-file-sharing-smb">Configure File Sharing (SMB):</h4>
<ul>
<li>Server manager &gt; File and Storage Services &gt; Shares &gt; Task &gt; New Share.</li>
<li>New Share Wizard:
<ul>
<li>Profile: SMB Share Quick</li>
<li>Share Location: <code>C:\Shares\DATA</code> (Create the Shares folder in C:)</li>
<li>Other Settings: Allow caching of share</li>
<li>Permission: Leave it default</li>
<li>Confirmation and create.</li>
</ul>
</li>
</ul>
<h3 id="setting-up-client">Setting up Client</h3>
<h4 id="initial-setup-1">Initial setup</h4>
<ul>
<li>Client 1:
<ul>
<li>IP: 192.168.1.101 (static)</li>
<li>PC name: NESCOFFEE</li>
</ul>
</li>
<li>Client 2:
<ul>
<li>IP: 192.168.1.102 (static)</li>
<li>PC name: MILO</li>
</ul>
</li>
</ul>
<h4 id="local-accounts">Local Accounts</h4>
<p>Same with domain accounts, but add an <code>L</code> at the end of username/password.</p>
<ul>
<li>Username: <code>cmisthL</code>, password: <code>jsmithL@123</code></li>
<li>Username: <code>jsmithL</code>, password: <code>@csmith@</code></li>
</ul>
<h4 id="join-domain">Join Domain</h4>
<p>Client 1:</p>
<ul>
<li>Use Server&rsquo;s IP as DNS server: <code>192.168.1.100</code></li>
<li>Hit <code>Win+I</code>, type &ldquo;access&rdquo;, click on <strong>Connect</strong>.</li>
<li>Microsoft account window:
<ul>
<li>Click on <strong>&ldquo;Join this device to a local Active Directory domain&rdquo;</strong> under the alternate actions.</li>
<li>Use the server administrator password to join.</li>
<li>Skip the <strong>Add an account</strong> section</li>
<li>Restart</li>
</ul>
</li>
</ul>
<p>Client 2 has the same steps</p>
<h4 id="local-admin">Local Admin:</h4>
<ul>
<li>Set John Smith (<code>jsmith@server19.local</code>) as local administrator for NESCOFFEE.</li>
<li>Set Carl Smith (<code>cmisth@server19.local</code>) as local administrator for MILO.</li>
</ul>
<h3 id="setting-up-attacking-machine">Setting up Attacking Machine</h3>
<ul>
<li>Put it on the same network</li>
<li>Set static IP: 192.168.1.10</li>
</ul>
<h2 id="ad-attack-scenarios">AD Attack Scenarios</h2>
<p>Here are some attack scenarios:</p>
<ul>
<li>LLMNR Poisoning - <a href="https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/">https://www.aptive.co.uk/blog/llmnr-nbt-ns-spoofing/</a></li>
<li>AS-REP Roasting
<ul>
<li>Example attacks: <a href="/tags/asrep-roasting">ASREP-Roasting tags</a></li>
</ul>
</li>
<li>Kerberoasting  - <a href="https://pentestlab.blog/2018/06/12/kerberoast/">https://pentestlab.blog/2018/06/12/kerberoast/</a></li>
<li>Take Over IPv6 DNS - <a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/">https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/</a></li>
<li>DCSync
<ul>
<li>Example attacks: <a href="/tags/dcsync/">DCSync tags</a></li>
</ul>
</li>
</ul>
<p>Attack scenario(s) that requires two clients online + server:</p>
<ul>
<li>SMB Relay - <a href="https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay">https://akimboviper.gitbook.io/pentest-everything/everything/everything-windows/attacking-windows/relay-attacks/smb-relay</a>
<ul>
<li>Example attacks: <a href="/writeups/hackthebox/htb-apt/">HackTheBox - APT</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup VulnHub Machines</title>
      <link>https://fahmifj.github.io/blog/setup-vulnhub-machines/</link>
      <pubDate>Mon, 31 May 2021 03:56:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/setup-vulnhub-machines/</guid>
      <description>Geting started with boot2root using VulnHub machines. It&amp;#39;s free and explorable!</description>
      <content:encoded><![CDATA[<p>In this post, I would like to share a quick tutorial (I guess) on how to setup a VulnHub machine on your local network. I’ll assume that you are already familiar with virtualization and some basics of networking. If you&rsquo;re not, just follow along because I&rsquo;m noob as well 🔨 !</p>
<h2 id="what-is-vulnhub">What is VulnHub?</h2>
<p>VulnHub is a website that provides vulnerable virtual machines (VMs) for those who wants to gain a practical experience in penetration testing. It similar with Hack The Box and TryHackMe, but with VulnHub you can practice locally. Because Windows machine requires a license, most VulnHub machines are Linux server.</p>
<p>There are a lot of things you can do with VulnHub machines after you get a root, such as:</p>
<ul>
<li>Analyzing the vulnerability, sometimes I patch it if it’s just an insecure code line.</li>
<li>Learning how the authors configure the machines.</li>
<li>Building a pentest lab that consists of VulnHub machines to practice network pivoting.</li>
<li>DFIR, and many more!</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="install-virtualization-software">Install Virtualization Software</h2>
<p>First thing first, you need a virtualization software such as VirtualBox or VMWare. Here is the links for both software:</p>
<ul>
<li>VirtualBox - <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>VMWare - <a href="https://www.vmware.com/products/workstation-player.html">https://www.vmware.com/products/workstation-player.html</a></li>
</ul>
<p>I personally use VirtualBox (Windows) because it&rsquo;s easy to use (and of course, it&rsquo;s free), but I&rsquo;ll update this post if I got another license of VMWare.</p>
<h2 id="download-vm-images--ova">Download VM Images / OVA</h2>
<p>Assuming that you’ve downloaded and installed a VirtualBox, now get your VulnHub machines/VM images at VulnHub’s official site: <a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210531055642315.png" alt="image-20210531055642315"  /></div>
</p>
<p>For this example, I&rsquo;ll be using <strong>symfonos: 2</strong>.</p>
<h2 id="importing-vm-images">Importing VM Images</h2>
<p>For the image, if it&rsquo;s on <code>7z</code> or  <code>zip</code> format make sure to decompress it first. In my case <strong>symfonos: 2</strong> is on <code>7z</code> format, so I have to decompress it.</p>
<p>Here&rsquo;s what I have after decompressing it.</p>
<p><div class="img-container"><img src="imgs/image-20210531060413952.png" alt="image-20210531060413952"  /></div>
</p>
<p>Any <code>.ovf</code> file should already be associated with VirtualBox, and we can just double click on that file. It&rsquo;ll take us straight to the import menu.</p>
<p><div class="img-container"><img src="imgs/image-20210531060734397.png" alt="image-20210531060734397"  /></div>
</p>
<p>To do that manually, open up your VirtualBox then click on the <strong>File</strong> menu -&gt; select &ldquo;Import Appliance&hellip;&rdquo;, it will pop a new window.</p>
<p><div class="img-container"><img src="imgs/image-20210531061142323.png" alt="image-20210531061142323"  /></div>
</p>
<p>Click on the icon that I marked with a red box to browse your VM image.</p>
<p><div class="img-container"><img src="imgs/image-20210531061327937.png" alt="image-20210531061327937"  /></div>
</p>
<p>Locate your VM image and then click on the <strong>Open</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210531061601700.png" alt="image-20210531061601700"  /></div>
</p>
<p>For now let&rsquo;s leave all the settings to its default.</p>
<p><div class="img-container"><img src="imgs/image-20210531061941128.png" alt="image-20210531061941128"  /></div>
</p>
<p>Click on the <strong>Import</strong> button and wait until it completed.</p>
<p><div class="img-container"><img src="imgs/image-20210531062110160.png" alt="image-20210531062110160"  /></div>
</p>
<p>When the import is done, you will see the machine on the VM list section</p>
<p><div class="img-container"><img src="imgs/image-20210531062327615.png" alt="image-20210531062327615"  /></div>
</p>
<h2 id="setting-up-vm-network">Setting Up VM Network</h2>
<p>Here is the core part, we&rsquo;ll be putting the VM in an isolated network.</p>
<p>Open the VM&rsquo;s settings by right click and choose &ldquo;Settings&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210531062432466.png" alt="image-20210531062432466"  /></div>
</p>
<p>Go to the <strong>Network</strong> section, and set the &ldquo;Attached to&rdquo; to <code>Host-only Adapter</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210531062849952.png" alt="image-20210531062849952"  /></div>
</p>
<p>Click <strong>OK</strong> button.</p>
<p>Now open the adapter configuration on the <strong>File</strong> menu &ndash;&gt; select &ldquo;Host Network Manager&hellip;&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210531065114863.png" alt="image-20210531065114863"  /></div>
</p>
<p>In the image below, the “VirtualBox Host-Only Ethernet Adapter” will be using a network range of <code>192.168.2.0/24</code> and has DHCP server enabled which is needed by VulnHub machines to obtain IP address automatically on boot.</p>
<p><div class="img-container"><img src="imgs/image-20210531065555859.png" alt="image-20210531065555859"  /></div>
</p>
<p><code>192.168.2.2</code> is the IP address of the virtual adapter on the host side while <code>192.168.2.1</code> is the IP address of the built-in DHCP server from VirtualBox.</p>
<p>Below is the configuration for the DHCP server.</p>
<p><div class="img-container"><img src="imgs/image-20210531065945260.png" alt="image-20210531065945260"  /></div>
</p>
<p>I set my <code>Lower Address Bound</code>  to <code>192.168.2.100</code> and <code>Upper Address Bound</code> to <code>192.168.2.254</code>, so that all machines will be assigned with an IP started from <code>.100-254</code>, and no one gets <code>192.168.2.3-99</code>.</p>
<p><em>Can I configure it to <code>10.10.10.0/24</code>?</em></p>
<p>Yes you can!</p>
<p>If we want to create a <code>10.10.10.0/24</code> network, it&rsquo;s better to create another adapter by clicking the <strong>Create</strong> menu (you don&rsquo;t say) then set the adapter&rsquo;s settings with</p>
<div class="force-center">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>IPv4 Address</td>
<td><code>10.10.10.2</code> (Adapter on the host side)</td>
</tr>
<tr>
<td>IPv4 Network Mask</td>
<td><code>255.255.255.0</code></td>
</tr>
</tbody>
</table>
</div>
<p><div class="img-container"><img src="imgs/image-20210531072801277.png" alt="image-20210531072801277"  /></div>
</p>
<p>Next, configure the DHCP server to:</p>
<div class="force-center">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Server Address</td>
<td><code>10.10.10.1</code> (VirtualBox&rsquo;s built-in DHCP server)</td>
</tr>
<tr>
<td>Server Mask</td>
<td><code>255.255.255.0 </code></td>
</tr>
<tr>
<td>Lower Address Bound</td>
<td><code>10.10.10.100</code></td>
</tr>
<tr>
<td>Upper Address Bound</td>
<td><code>10.10.10.254</code></td>
</tr>
</tbody>
</table>
</div>
<p><div class="img-container"><img src="imgs/image-20210531072833605.png" alt="image-20210531072833605"  /></div>
</p>
<p>Then, on the VM settings (<strong>symfonos: 2</strong>), change the adapter name with the new one we created before</p>
<p><div class="img-container"><img src="imgs/image-20210531072939206.png" alt="image-20210531072939206"  /></div>
</p>
<p>Lastly, we should also configure the attacking machine, in my case it’s Kali Linux, to use the same network adapter.</p>
<p><div class="img-container"><img src="imgs/image-20210531075306992.png" alt="image-20210531075306992"  /></div>
</p>
<h2 id="boot-it">Boot it!</h2>
<p>Boot your machines and we&rsquo;re done!</p>
<p><div class="img-container"><img src="imgs/image-20210531075144142.png" alt="image-20210531075144142"  /></div>
</p>
<p>Happy hacking!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
