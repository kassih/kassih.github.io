<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kali on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/kali/</link>
    <description>Recent content in Kali on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jul 2021 07:45:19 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/kali/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Kali Linux Setup for Playing HackTheBox</title>
      <link>https://fahmifj.github.io/blog/my-kali-setup-for-hackthebox/</link>
      <pubDate>Fri, 09 Jul 2021 07:45:19 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/my-kali-setup-for-hackthebox/</guid>
      <description>Noob Kali setup</description>
      <content:encoded><![CDATA[<p>After using Kali 2019.4 for almost 2 years, I finally upgraded my Kali to 2021.2. I wanted to try Parrot or build a <em>weaponized</em> version of Ubuntu, but because I like simplicity, I decided to use Kali again ðŸ˜„ <em>//slap</em>.</p>
<p>In this post, Iâ€™d like to share my Kali Linux setup for playing  HackTheBox. I think it is applicable for TryHackMe, VulnHub or other  boot2root platform, too.</p>
<h2 id="display-ip-address-in-prompt">Display IP Address in Prompt</h2>
<p>Adding IP address in your prompt would be really helpful as it lets you copy the IP faster for reverse shell. To do so, we&rsquo;ll need to modify the <code>.zshrc</code> file. But, before performing any modification, consider to make a backup of your original file using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cp ~/.zshrc<span class="o">{</span>,.bak<span class="o">}</span> 
</span></span></code></pre></div><p>Also, I usually put any customization at the top of the <code>.zshrc</code> file wrapped between two comments, for example:</p>
<pre tabindex="0"><code># START CUSTOM
...[custom script here]
# END CUSTOM
</code></pre><p>If all set, add the following function to your <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="k">function</span> get_ip<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># It can be thm or htb IP</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tunnel_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig tun0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span> 
</span></span><span class="line"><span class="cl">   <span class="c1"># Use eth0 as default IP,</span>
</span></span><span class="line"><span class="cl">   <span class="nv">default_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig eth0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">[[</span> <span class="nv">$tunnel_ip</span> <span class="o">==</span> *<span class="s2">&#34;10.&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$tunnel_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$default_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Then, find the following lines:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$PROMPT_ALTERNATIVE</span><span class="s2">&#34;</span> in
</span></span><span class="line"><span class="cl">        twoline<span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Under these lines,  replace the entire <code>PROMPT</code> variable with the following line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">PROMPT=$&#39;%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{%(#.red.blue)}%n$prompt_symbol%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]-%B%F{152}[`get_ip`]%b%f%F{%(#.blue.green)}\nâ””â”€%B%(#.%F{red}#.%F{blue}$)%b%F{reset} &#39;
</span></span></code></pre></div><p>Reopen your terminal or type one of the following commands in the terminal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ zsh
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><p>And done.</p>
<p><div class="img-container"><img src="imgs/image-20210709054914243.png" alt="image-20210709054914243"  /></div>
</p>
<h2 id="openvpn-connection">OpenVPN Connection</h2>
<p>For VPN, it&rsquo;s tiring when you have to type <code>$ openvpn /path/to/config/file.ovpn</code> each time you want to connect to the HTB/THM network. To make thing easier, we can create a folder called <code>.ovpnconfig</code> in the home directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/.ovpnconfig
</span></span></code></pre></div><p>Then put all of your OpenVPN configuration files into this <code>.ovpnconfig</code> folder.</p>
<p><div class="img-container"><img src="imgs/image-20210709063528132.png" alt="image-20210709063528132"  /></div>
</p>
<p>Finally, add some aliases into your <code>.zshrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbfort</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbrel</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmwreath</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kvpn</span><span class="o">=</span><span class="s1">&#39;pkill openvpn&#39;</span>
</span></span></code></pre></div><p>Now we can type <code>$ htbon</code> or <code>$ thmon</code> in the command prompt to connect to the VPN.  Want to turn off the VPN? Simply type <code>$ kvpn</code> !</p>
<h2 id="sudo-with-alias">Sudo with Alias</h2>
<p>In the newer Kali Linux (non-root login), the only problem is that <code>openvpn</code> must be executed with <code>sudo</code> . Therefore, you&rsquo;ve to add the following <code>sudo</code> alias.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># Source: https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background
</span></span><span class="line"><span class="cl">alias sudo=&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;
</span></span></code></pre></div><ul>
<li><code>sudo -v</code> will authenticate the user first.</li>
<li><code>[ $? ] &amp;&amp; sudo </code> will check if the previous command (separated by semi-colon) return with success (value of 0), if yes run <code>sudo</code> again.</li>
</ul>
<p>This time, we can run sudo command with aliases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo &lt;alias-command&gt;
</span></span><span class="line"><span class="cl">$ sudo htbon
</span></span><span class="line"><span class="cl">$ sudo thmon
</span></span><span class="line"><span class="cl">$ sudo kvpn
</span></span></code></pre></div><p>An alternative for sudo to work with alias is using sudo with no passwd.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo visudo /etc/sudoers.d/kali
</span></span></code></pre></div><p>Then add the following line.</p>
<pre tabindex="0"><code>kali  ALL=NOPASSWD: ALL
</code></pre><p>After that, change the previous sudo alias to this one</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">alias sudo=&#39;sudo &#39;
</span></span></code></pre></div><h2 id="tools-transfer">Tools Transfer</h2>
<p>Just like the OpenVPN files, I like to keep the essential tools to be centralized in one folder and so it can be hosted immediately. Again, we can create a folder called <code>tools</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/tools
</span></span></code></pre></div><p>Put your tools inside the folder. The following are some of the tools that I think to be essential (including web-shell).</p>
<p><div class="img-container"><img src="imgs/image-20210709065944915.png" alt="image-20210709065944915"  /></div>
</p>
<p>Next, add another alias to host these tools immediately with one command, feel free to create alias for yourself. Mine called <code>hostit</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">hostit</span><span class="o">=</span><span class="s1">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</span></span></code></pre></div><p>If you watch <a href="https://www.youtube.com/c/ippsec/videos">ippsec</a>, he prefers keeping the tools with the associated pwned machines (in <code>www</code> directory). So it&rsquo;s up to you.</p>
<h2 id="note-template">Note Template</h2>
<p>My current note template is available on <a href="https://github.com/fahmifj/HackTheBox-notes/tree/main/machines/note-template">GitHub</a>. I&rsquo;m using the following function to recreate the directory structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">function</span> mknote<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  mkdir nmap gobuster loot logs exploits ssh-keys post-exploits
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><strong>nmap:</strong> each nmap scan goes here.</p>
</li>
<li>
<p><strong>gobuster:</strong> each gobuster scan goes here.</p>
</li>
<li>
<p><strong>loot:</strong> each interesting file for further analysis goes here.</p>
</li>
<li>
<p><strong>logs:</strong> If you like to log your activity with <code>$ script</code> , put them here.</p>
</li>
<li>
<p><strong>exploits:</strong> exploit script goes here.</p>
</li>
<li>
<p><strong>ssh-keys:</strong> obtained ssh-key goes here, not loot.</p>
</li>
<li>
<p><strong>post-exploits:</strong> post-compromise loot goes here.</p>
</li>
</ul>
<p>Usage is simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> htb-machine-folder/
</span></span><span class="line"><span class="cl">$ mknote
</span></span><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">â”œâ”€â”€ exploits
</span></span><span class="line"><span class="cl">â”œâ”€â”€ gobuster
</span></span><span class="line"><span class="cl">â”œâ”€â”€ logs
</span></span><span class="line"><span class="cl">â”œâ”€â”€ loot
</span></span><span class="line"><span class="cl">â”œâ”€â”€ nmap
</span></span><span class="line"><span class="cl">â”œâ”€â”€ post-exploits
</span></span><span class="line"><span class="cl">â””â”€â”€ ssh-keys
</span></span></code></pre></div><h2 id="ssh-configuration">SSH Configuration</h2>
<p>I have always use a separate SSH keys for CTF. My SSH key for CTF is using ed25519. You can create one using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh-keygen -a <span class="m">100</span> -t ed25519 -f ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>After that, register your private key to SSH agent.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ ssh-add ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>Since HackTheBox machine starts with IP address of <code>10.10.*</code>, add these lines to your SSH config (<code>~/.ssh/config</code>). Create one if you don&rsquo;t have it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Host 10.10.*
</span></span><span class="line"><span class="cl">  IdentityFile ~/.ssh/ctf_ssh
</span></span></code></pre></div><p>With the config above, whenever I injected my public key (<code>/.ssh/ctf_ssh.pub</code>) to HackTheBox machine for <a href="https://fahmifj.github.io/blog/linux-backdoors-and-where-to-find-them/">persistence access</a>, I can login by simply typing <code>$ ssh machine-name@hostname</code> or <code>$ ssh machine-name@ip</code>. I don&rsquo;t have to specify <code>-i /path/to/ssh/private/key</code> anymore.</p>
<h2 id="qterminal-configuration">QTerminal Configuration</h2>
<p>Unfortunately I&rsquo;m not a tmux user here. Tmux is rich in features, but I&rsquo;m not comfortable with its prefix key. So far, I&rsquo;ve always used the default QTerminal application and leveraged its shortcut feature to &rsquo;navigate&rsquo; a slightly faster in terminal.</p>
<p>If you&rsquo;re a Windows Terminal user, you&rsquo;ll familiar with some of these shortcuts:</p>
<ul>
<li><strong><code>ALT + Arrows</code></strong>: Move cursor in subterminal</li>
<li><strong><code>CTRL + TAB</code></strong>: Navigate between tabs</li>
<li><strong><code>CTRL + Arrow Left</code></strong>:  Previous tab</li>
<li><strong><code>CTRL + Arrow Right</code></strong>: Next tab</li>
<li><strong><code>CTRL + N</code></strong> : New terminal tab</li>
<li><strong><code>CTRL + SHIFT + W</code></strong> : Close current subterminal</li>
<li><strong><code>CTRL + SHIFT + =</code></strong> : Split terminal vertically</li>
<li><strong><code>CTRL + SHIFT + -</code></strong> : Split terminal horizontally</li>
<li><strong><code>CTRL + SHIFT + F</code></strong> : Open search bar in terminal</li>
<li><strong><code>CTRL + =</code></strong> : Zoom in</li>
<li><strong><code>CTRL + -</code></strong> : Zoom out</li>
</ul>
<p>For me, the only limitation here is that there is no shortcut for resizing a subterminal.</p>
<h2 id="all-in-one-with-oh-my-zsh-plugin">All in One with Oh My Zsh Plugin</h2>
<p>If you&rsquo;re a <a href="https://ohmyz.sh/#install">Oh My Zsh</a> user like me, we can add these configurations (excluding SSH and QTerminal configurations) into a custom plugin.</p>
<p>Save the following script to  <code>/home/&lt;username&gt;/.oh-my-zsh/custom/plugins/ctf/ctf.plugin.zsh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> get_ip<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># It can be thm or htb IP</span>
</span></span><span class="line"><span class="cl">   <span class="nv">tunnel_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig tun0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span> 
</span></span><span class="line"><span class="cl">   <span class="c1"># Use eth0 as default IP,</span>
</span></span><span class="line"><span class="cl">   <span class="nv">default_ip</span><span class="o">=</span><span class="sb">`</span>ifconfig eth0 2&gt;/dev/null <span class="p">|</span> grep netmask <span class="p">|</span> awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="o">[[</span> <span class="nv">$tunnel_ip</span> <span class="o">==</span> *<span class="s2">&#34;10.&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$tunnel_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="nv">$default_ip</span>
</span></span><span class="line"><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> mknote<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  mkdir nmap gobuster loot logs exploits ssh-keys dump post-exploits
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># https://askubuntu.com/questions/750419/how-do-i-run-a-sudo-command-needing-password-input-in-the-background</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">sudo</span><span class="o">=</span><span class="s1">&#39;sudo -v; [ $? ] &amp;&amp; sudo &#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-sg.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbfort</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-fortress.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">htbrel</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/htb-release.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmon</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">thmwreath</span><span class="o">=</span><span class="s1">&#39;openvpn ~/ovpnconfig/thm-wreath.ovpn 1&gt;/dev/null &amp;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">kvpn</span><span class="o">=</span><span class="s1">&#39;pkill openvpn&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">hostit</span><span class="o">=</span><span class="s1">&#39;python3 -m http.server -d ~/tools 8000&#39;</span>
</span></span></code></pre></div><blockquote>
<p>If you want to include my note template as well, I&rsquo;ve prepared <a href="https://github.com/fahmifj/HackTheBox-notes/blob/main/machines/note-template/ctf.plugin.zsh">this one</a> with note template embedded in <code>mknote</code> function.</p>
</blockquote>
<p>The next step depends on your theme. I use a theme called <code>robbyrussell</code>.</p>
<p>I created a copy of the theme in <code> /home/kali/.oh-my-zsh/custom/themes/robbyrussell.zsh-theme</code> and modified the theme to display IP address and use two lines prompt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">NEWLINE=$&#39;\n$&#39; 
</span></span><span class="line"><span class="cl">PROMPT=&#39;%(?:%{$fg_bold[green]%}â†’:%{$fg_bold[red]%}â†’)&#39;
</span></span><span class="line"><span class="cl">PROMPT+=&#39; %F{4}%n@%m %{$fg[cyan]%}Â«%cÂ»%{$reset_color%}&#39;
</span></span><span class="line"><span class="cl">PROMPT+=&#39; %B%F{152}Â«$(get_ip)Â»%f%b $(git_prompt_info)&#39;
</span></span><span class="line"><span class="cl">PROMPT+=&#34;%F{31}${NEWLINE} %f&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_PREFIX=&#34;%{$fg_bold[blue]%}git:(%{$fg[red]%}&#34;
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_SUFFIX=&#34;%{$reset_color%} &#34;
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_DIRTY=&#34;%{$fg[blue]%}) %{$fg[yellow]%}âœ—&#34;
</span></span><span class="line"><span class="cl">ZSH_THEME_GIT_PROMPT_CLEAN=&#34;%{$fg[blue]%})&#34;
</span></span></code></pre></div><p>Finally, load the <code>ctf</code> plugin we created in <code>.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">...[SNIP]...
</span></span><span class="line"><span class="cl"># Which plugins would you like to load?
</span></span><span class="line"><span class="cl"># Standard plugins can be found in $ZSH/plugins/
</span></span><span class="line"><span class="cl"># Custom plugins may be added to $ZSH_CUSTOM/plugins/
</span></span><span class="line"><span class="cl"># Example format: plugins=(rails git textmate ruby lighthouse)
</span></span><span class="line"><span class="cl"># Add wisely, as too many plugins slow down shell startup.
</span></span><span class="line"><span class="cl">plugins=(git ctf)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...[SNIP]...
</span></span></code></pre></div><p>Restart your terminal and we&rsquo;re done.</p>
<p><div class="img-container"><img src="imgs/image-20210711221808834.png" alt="image-20210711221808834"  /></div>
</p>
<p>And that&rsquo;s all for this post!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
