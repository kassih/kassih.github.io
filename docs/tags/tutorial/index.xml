<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tutorial on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/tutorial/</link>
    <description>Recent content in Tutorial on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Nov 2021 14:51:02 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo Site Deployment With Github Actions</title>
      <link>https://fahmifj.github.io/blog/hugo-deployment-with-github-actions/</link>
      <pubDate>Mon, 01 Nov 2021 14:51:02 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hugo-deployment-with-github-actions/</guid>
      <description>Applying a small part of Continuous Deployment to your Hugo site</description>
      <content:encoded><![CDATA[<p>This post is a continuation from my previous post about <a href="https://fahmifj.github.io/blog/hugo-setup-and-deployment/">Hugo Setup and Deployment</a>. In this post, we&rsquo;ll look into GitHub Actions.</p>
<p>First thing first, let&rsquo;s sum up what we did previously:</p>
<ul>
<li>We created a site and generated its HTML files (under <code>/public</code> folder) using Hugo.</li>
<li>We hosted these HTML files in a GitHub repository (by enabling the GitHub Pages feature).</li>
<li>And then we wrote a deployment script written in bash, which is used to automatically generate and push the HTML files to the GitHub repository in order update the contents of our site.</li>
</ul>
<p>Actually, the deployment script we wrote is not the effective way to deploy our site if you care about network bandwidth and storage. This is because there will be a bunch of new HTML files generated on our machine and we&rsquo;re going to upload all of them to the Internet each time we wish to update the site. Luckily, we can tackle this with GitHub Actions</p>
<p>GitHub Actions basically does the same thing as we did, but, instead of using our own machine to generate and push the html files, we&rsquo;ll let GitHub VM/Docker instances do it for us.</p>
<p>I know that there are a lot of similar tutorials out there, but let me finish what I&rsquo;ve started!</p>
<h4 id="goals">Goals</h4>
<p>The only goal of this post is:</p>
<ul>
<li>Automate Site Deployment using GitHub Actions (I&rsquo;ll try my best to explain about it!)</li>
</ul>
<h4 id="prerequisites">Prerequisites</h4>
<p>Prerequisites are still the same, they are:</p>
<ul>
<li>A GitHub account</li>
<li>Familiarity with CLI</li>
<li>Familiarity with Git.</li>
</ul>
<h2 id="a-little-clean-up">A Little Clean Up</h2>
<p>Let&rsquo;s start by reviewing the previous site structure, here&rsquo;s where we (I) left it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ tree -a -L <span class="m">2</span> -I <span class="s2">&#34;\.git&#34;</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── .gitmodules
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.yml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">│   └── post
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── deploy.sh
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── public <span class="c1"># &lt;-- All files under this folder are hosted using GitHub Pages,</span>
</span></span><span class="line"><span class="cl">│   ├── 404.html
</span></span><span class="line"><span class="cl">│   ├── assets
</span></span><span class="line"><span class="cl">│   ├── categories
</span></span><span class="line"><span class="cl">│   ├── en
</span></span><span class="line"><span class="cl">│   ├── fa
</span></span><span class="line"><span class="cl">│   ├── fr
</span></span><span class="line"><span class="cl">│   ├── index.html
</span></span><span class="line"><span class="cl">│   ├── index.json
</span></span><span class="line"><span class="cl">│   ├── index.xml
</span></span><span class="line"><span class="cl">│   ├── page
</span></span><span class="line"><span class="cl">│   ├── post
</span></span><span class="line"><span class="cl">│   ├── robots.txt
</span></span><span class="line"><span class="cl">│   ├── series
</span></span><span class="line"><span class="cl">│   ├── sitemap.xml
</span></span><span class="line"><span class="cl">│   └── tags
</span></span><span class="line"><span class="cl">├── resources
</span></span><span class="line"><span class="cl">│   └── _gen
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span><span class="line"><span class="cl">    └── PaperMod
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">20</span> directories, <span class="m">10</span> files
</span></span></code></pre></div><p>We&rsquo;ll now ignore the public folder and remove all of its content including the git repository inside it because this will be handled by GitHub Actions later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rm ./public/* -r f
</span></span><span class="line"><span class="cl">$ rm ./public/.git -rf
</span></span></code></pre></div><p>If you happen to use the <code>public</code> folder as a submodule, remove the following lines from <code>.git/config</code> and  <code>.gitmodules</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[submodule &#34;public&#34;]
</span></span><span class="line"><span class="cl">        url = https://github.com/your-username/my-blog.git
</span></span><span class="line"><span class="cl">        active = true
</span></span></code></pre></div><p>Clean any cached content from the <code>public</code> folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git rm --cached ./public -f
</span></span></code></pre></div><p>Then let&rsquo;s create another GitHub repository with the format <code>your-username.github.io</code>, because we&rsquo;re going to use this repo as the remote repository of our site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git remote add origin https://github.com/your-username/your-username.github.io.git
</span></span></code></pre></div><p>For the <code>config.yaml</code>, change the baseURL value with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://your-username.github.io/&#34;</span><span class="w">
</span></span></span></code></pre></div><h2 id="add-the-theme-as-submodule">Add the Theme as Submodule</h2>
<p>If you happen to not using theme as submodule previously, this time we will.</p>
<p>Run the following command to add the PaperMod theme we cloned previously as a submodule of our site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</span></span></code></pre></div><p>If you don&rsquo;t use the same theme, simply replace the url and directory parts to match yours.</p>
<h2 id="add-github-actions">Add GitHub Actions</h2>
<p>On the previous post, we automated several things: site build, commit, and push our site to GitHub using a bash script. We can call the execution of this script as a <strong>workflow</strong> that runs a single <strong>job</strong>, it is to deploy our site. Each command executed within the deployment script (build, commit, push) can be referred as a <strong>step</strong>.</p>
<p>GitHub Actions are basically the advanced version of the deployment script we created. It&rsquo;s event-driven, which means we can set a specific event to trigger the workflow. In this case, we&rsquo;ll create an event that will trigger the site deployment each time we push a new commit to the main branch.</p>
<p>A workflow file for GitHub Actions must be written in YAML syntax, and it&rsquo;s placed under a special directory called <code>.github/workflows/[here].yml</code>, so let&rsquo;s create the folder first inside our site repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ./.github/workflows
</span></span></code></pre></div><p>We&rsquo;ll save the following code under the workflow directory with a name <code>gh-pages.yml</code> (<code>./.github/workflows/gh-pages.yml</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main </span><span class="w"> </span><span class="c"># Set a branch to deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify --cleanDestinationDir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>You can study the code yourself, because I&rsquo;m not the one who created it 😅. But, to make sure that the public folder always get cleaned first before build, I added <code>--cleanDestinationDir</code> option.</p>
<p>Let&rsquo;s commit this workflow and push it to GitHub.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git add ./.github/workflows/gh-pages.yml
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Add gh-pages.yml&#34;</span>
</span></span><span class="line"><span class="cl">$ git push -u origin main
</span></span></code></pre></div><h2 id="trigger-the-workflow">Trigger the Workflow!</h2>
<p>We can create a new post, then add some text to it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo new post/test-gh-actions.md
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;Test GH Action&#39;</span> &gt;&gt; content/post/test-gh-actions.md
</span></span></code></pre></div><p>Finally, commit the change and push it to your repository to trigger the workflow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Trigger build&#34;</span>
</span></span><span class="line"><span class="cl">$ git push -u origin main
</span></span></code></pre></div><p>To observe the deployment process/workflow, just navigate to your site repository and click on the action menu (<code>https://github.com/your-username/your-username.github.io/actions</code>).</p>
<p>That&rsquo;s it!</p>
<h2 id="my-current-deployment">My Current Deployment</h2>
<p>A bit off topic, but I&rsquo;ll show you my current deployment process.</p>
<p>My deployment process a little bit different, because I&rsquo;ve separated my blog into two: blog-core and the full static HTML site (it&rsquo;s this site). The blog-core is a private repo whereas the full static HTML is a public repository. The blog-core repo contains my draft, notes, and other (a lot of them), which is only available for me locally because of <code>.gitignore</code>.</p>
<p>When a new commit is pushed on the blog-core, GitHub Actions will be triggered to generate the static HTML files. The newly generated HTML files are then pushed to the public repo. I had to include my secret token in the blog-core so that GitHub Actions could use the token to authenticate itself to do some modification on public repo.</p>
<p><div class="img-container"><img src="imgs/image-20211102111943965.png" alt="image-20211102111943965"  /></div>
</p>
<p>Note: these are not the actual commands.</p>
<p><del>I&rsquo;ll separate this section in a dedicated post later! nevermind lol</del></p>
<p>Well, it&rsquo;s not in detail, but it should give you an idea of how it works. See you in another post.</p>
<blockquote>
<p>I found the blog post that explains about this: <a href="https://victoria.dev/blog/two-ways-to-deploy-a-public-github-pages-site-from-a-private-hugo-repository/">Deploy a Public Github Pages site from a Private Hugo Repository</a>. And here&rsquo;s the Github Actions that I use <a href="https://github.com/victoriadrake/hugo-remote">Hugo Remote</a>.</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Exposing a Samba Server to the Internet in Azure</title>
      <link>https://fahmifj.github.io/blog/expose-smb-server-to-internet-in-azure/</link>
      <pubDate>Sun, 04 Jul 2021 19:45:21 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/expose-smb-server-to-internet-in-azure/</guid>
      <description>And wait for bad things to happen</description>
      <content:encoded><![CDATA[<p>Last month, I was asked to setup a Samba/SMB server that is accessible over the Internet. Because it will only be used temporarily, I decided to use an Azure Virtual Machine (VM) instead of buying a dedicated VPS.</p>
<p>In the end the server was not used though, but I’ll share my documentation about it.</p>
<p>Before proceeding further, I will  state that:</p>
<blockquote>
<p>Exposing an SMB Server directly to the Internet is not recommended, or not considered to be &lsquo;best practice&rsquo;. The safest way to make it accessible over the Internet is by setting up a VPN server and putting the SMB inside the VPN network.</p>
</blockquote>
<h4 id="goals-and-outcomes">Goals and Outcomes</h4>
<p>The goals here are exactly the same as what’s written in the title, but by the end of this post, you should be able to:</p>
<ul>
<li>Deploy an Ubuntu server in Azure</li>
<li>Setup and Configure a Samba server</li>
<li>Exposing Samba server over Internet (but don&rsquo;t)</li>
</ul>
<h4 id="prerequisites">Prerequisites</h4>
<p>The one and only prerequisite is:</p>
<ul>
<li>Azure Account</li>
</ul>
<p>Also, since this post won&rsquo;t be detailed step by step, I&rsquo;ll assume that you have:</p>
<ul>
<li>Basic knowledge of Azure, at least menu navigation and creating a resource group.</li>
<li>Basic knowledge of Linux</li>
</ul>
<p>Let&rsquo;s jump in!</p>
<h2 id="vm-configuration--deploy">VM Configuration &amp; Deploy</h2>
<p>At this step, I already have a resource group called <code>IAMF_SMB-TEST</code> and I&rsquo;ll be creating a VM instance inside this resource. It&rsquo;s a small server used by 4-5 users, so B1s will be enough. You&rsquo;re free to customize the VM.</p>
<p>The VM details of mine can be seen in the following image:</p>
<p><div class="img-container"><img src="imgs/image-20210513170545346.png" alt="image-20210513170545346"  /></div>
</p>
<p>For authentication to the server, I&rsquo;ll be using an SSH public key here instead of a password. The account for server administration is called <code>azure-smb</code>. Since the authentication is SSH, this VM will have an SSH port open publicly (internet).</p>
<p><div class="img-container"><img src="imgs/image-20210513170638603.png" alt="image-20210513170638603"  /></div>
</p>
<p>In the following section, I&rsquo;ll use a standard SSD and leave the other settings at their defaults.</p>
<p><div class="img-container"><img src="imgs/image-20210513170710958.png" alt="image-20210513170710958"  /></div>
</p>
<p>In the <strong>Networking</strong> section, I&rsquo;ll just create a new virtual network. See the following image for details:</p>
<p><div class="img-container"><img src="imgs/image-20210513170824172.png" alt="image-20210513170824172"  /></div>
</p>
<p>In the <strong>Management</strong> section, because it will be temporary, I&rsquo;ll just disable the boot diagnostics.</p>
<p><div class="img-container"><img src="imgs/image-20210513171009570.png" alt="image-20210513171009570"  /></div>
</p>
<p>I&rsquo;ll leave the <strong>Advanced</strong> with the default settings and skip the <strong>Tags</strong> section.</p>
<p>The last section is <strong>Review + Create</strong>, which basically reviews the VM configuration. After I finish the review, I&rsquo;ll press the <strong>Create</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210513171153896.png" alt="image-20210513171153896"  /></div>
</p>
<p>When the <strong>Create</strong> button is clicked, the VM will be automatically deployed.</p>
<p><div class="img-container"><img src="imgs/image-20210513171501031.png" alt="image-20210513171501031"  /></div>
</p>
<h3 id="test-ssh-login">Test SSH Login</h3>
<p>The next step is to login to the deployed VM instance via SSH using the previously created username and key/password. The public IP of the VM instance can be found at the <code>Dashboard</code> &gt; <code>RESOURCE_GROUP_NAME</code> &gt; <code>PUBLIC_IP_NAME</code>. In my case, it is <code>Dashboard</code> &gt; <code>IAMF_SMB-TEST</code> &gt; <code>smb-server-ip</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ssh -i private_key azure-smb@PUBLIC_IP_ADDRESS
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210513171606268.png" alt="image-20210513171606268"  /></div>
</p>
<h2 id="samba-configuration">Samba Configuration</h2>
<h3 id="installation-and-initial-setup">Installation and Initial Setup</h3>
<p>First thing first, let&rsquo;s update the repository list.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo apt update
</span></span></code></pre></div><p>After that, install <code>Samba</code> with the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo apt install samba
</span></span></code></pre></div><p>Once the installation is done, check the Samba service daemon status.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo systemctl status smbd
</span></span><span class="line"><span class="cl">● smbd.service - Samba SMB Daemon
</span></span><span class="line"><span class="cl">   Loaded: loaded <span class="o">(</span>/lib/systemd/system/smbd.service<span class="p">;</span> enabled<span class="p">;</span> vendor preset: enabled<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Active: active <span class="o">(</span>running<span class="o">)</span> since Thu 2021-05-13 10:17:45 UTC<span class="p">;</span> 3min 48s ago
</span></span><span class="line"><span class="cl">     Docs: man:smbd<span class="o">(</span>8<span class="o">)</span>
</span></span><span class="line"><span class="cl">           man:samba<span class="o">(</span>7<span class="o">)</span>
</span></span><span class="line"><span class="cl">           man:smb.conf<span class="o">(</span>5<span class="o">)</span>
</span></span><span class="line"><span class="cl"> Main PID: <span class="m">2098</span> <span class="o">(</span>smbd<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Status: <span class="s2">&#34;smbd: ready to serve connections...&#34;</span>
</span></span><span class="line"><span class="cl">    Tasks: <span class="m">4</span> <span class="o">(</span>limit: 1056<span class="o">)</span>
</span></span><span class="line"><span class="cl">   CGroup: /system.slice/smbd.service
</span></span><span class="line"><span class="cl">           ├─2098 /usr/sbin/smbd --foreground --no-process-group
</span></span><span class="line"><span class="cl">           ├─2123 /usr/sbin/smbd --foreground --no-process-group
</span></span><span class="line"><span class="cl">           ├─2124 /usr/sbin/smbd --foreground --no-process-group
</span></span><span class="line"><span class="cl">           └─2129 /usr/sbin/smbd --foreground --no-process-group
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">May <span class="m">13</span> 10:17:44 smb-server systemd<span class="o">[</span>1<span class="o">]</span>: Starting Samba SMB Daemon...
</span></span><span class="line"><span class="cl">May <span class="m">13</span> 10:17:45 smb-server systemd<span class="o">[</span>1<span class="o">]</span>: Started Samba SMB Daemon.
</span></span></code></pre></div><p>Samba is ready, and now let&rsquo;s configure the share folder.</p>
<h3 id="shares-configuration">Shares Configuration</h3>
<p>First, let&rsquo;s create a backup file of the original configuration, so we can reset it to the default configuration, just in case something goes wrong.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo cp /etc/samba/smb.conf<span class="o">{</span>,.backup<span class="o">}</span>
</span></span></code></pre></div><p>Now create a share folder name it <code>sambashare</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ mkdir sambashare
</span></span></code></pre></div><p>Then open the samba configuration file with a text editor like <code>nano</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo nano /etc/samba/smb.conf
</span></span></code></pre></div><p>Go straight to the bottom of the file and add the following lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>sambashare<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">comment</span> <span class="o">=</span> Samba Share
</span></span><span class="line"><span class="cl">    <span class="nv">path</span> <span class="o">=</span> /home/azure-smb/sambashare
</span></span><span class="line"><span class="cl">    <span class="nb">read</span> <span class="nv">only</span> <span class="o">=</span> no
</span></span><span class="line"><span class="cl">    <span class="nv">browsable</span> <span class="o">=</span> yes
</span></span></code></pre></div><p>Details for configuring share can be read <a href="https://www.samba.org/samba/docs/current/man-html/smb.conf.5.html">here</a> or <a href="https://web.mit.edu/rhel-doc/5/RHEL-5-manual/Deployment_Guide-en-US/s1-samba-configuring.html">here</a>.</p>
<p>Save the file and restart the SMB daemon with the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo service smbd restart
</span></span></code></pre></div><p>Lastly, update the firewall to allow network traffic for Samba/SMB.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo ufw allow samba
</span></span></code></pre></div><p>This is the basic configuration of creating a Samba share, but from here you can create another share with more complex configuration. Here are my references:</p>
<ul>
<li><a href="https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/">https://linuxize.com/post/how-to-install-and-configure-samba-on-ubuntu-18-04/</a></li>
<li><a href="https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user">https://confluence.jaytaala.com/display/TKB/Create+samba+share+writeable+by+all%2C+group%2C+or+only+a+user</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-set-up-a-samba-share-for-a-small-organization-on-ubuntu-16-04</a></li>
</ul>
<h3 id="add-samba-user">Add Samba User</h3>
<p>Currently, our Linux account for administering the server is <code>azure-smb</code> and we can&rsquo;t use this account password to access the SMB shares yet. Instead, we need to create a password and bind it to <code>azure-smb</code>.</p>
<p>But now, let&rsquo;s just create a dedicated user for SMB called <code>user1</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo useradd --system -s /usr/sbin/nologin user1
</span></span></code></pre></div><p>Assign <code>user1</code> to be the owner of the share</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo chown user1 /home/azure-smb/sambashare
</span></span></code></pre></div><p>After that, create a Samba password for <code>user1</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo smbpasswd -a user1
</span></span><span class="line"><span class="cl">New SMB password: 
</span></span><span class="line"><span class="cl">Retype new SMB password: 
</span></span><span class="line"><span class="cl">Added user user1.
</span></span></code></pre></div><p>Finally, enable the user.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">azure-smb@smb-server:~$ sudo smbpasswd -e user1
</span></span><span class="line"><span class="cl">Enabled user user1.
</span></span></code></pre></div><h2 id="expose-to-internet">Expose to Internet</h2>
<h3 id="allow-inbound-connection">Allow Inbound Connection</h3>
<p>Now if we want to make it available on the Internet, we have to go back to the Azure Portal to open the SMB port (445) on the NIC Public IP and allow inbound connection through that port. The connection is then forwarded to our SMB port on the NIC Private IP.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">PUBLIC_IP:445 --&gt; PRIVATE_IP:445
</span></span></code></pre></div><p>To do that open up the Networking settings of the SMB VM and click on <strong>Add inbound port rule</strong> button.</p>
<p><div class="img-container"><img src="imgs/image-20210513173838694.png" alt="image-20210513173838694"  /></div>
</p>
<p>On the new Windows, configure the rule to allow any source (incoming IP) and any source port (incoming port) to connect to the SMB port (445). The details configuration is as follows:</p>
<p><div class="img-container"><img src="imgs/image-20210513173858659.png" alt="image-20210513173858659"  /></div>
</p>
<p>At the bottom, the configuration is as follows:</p>
<p><div class="img-container"><img src="imgs/image-20210513173929271.png" alt="image-20210513173929271"  /></div>
</p>
<p>When you&rsquo;re done, click on the <strong>Add</strong> button and the new rule should listed in the <strong>Inbound port rules</strong> section.</p>
<p><div class="img-container"><img src="imgs/image-20210513174018895.png" alt="image-20210513174018895"  /></div>
</p>
<h3 id="test-access">Test Access</h3>
<p>We can use Nmap to see if the SMB port has been opened.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ nmap -p445 -sV VM_PUBLIC_IP
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210513174227862.png" alt="image-20210513174227862"  /></div>
</p>
<p>To interact with the SMB server via CLI, you can use <code>smbclient</code>. Install it with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo apt install smbclient
</span></span></code></pre></div><p>Once it installed, connect to the share with following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ smbclient //<span class="o">[</span>IP<span class="o">]</span>/<span class="o">[</span>sharename<span class="o">]</span> 
</span></span></code></pre></div><p>Adding <code>-N -L</code> can list all the available shares.</p>
<p><div class="img-container"><img src="imgs/image-20210513174416250.png" alt="image-20210513174416250"  /></div>
</p>
<p>You can also provide the password directly in the terminal:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ smbclient //<span class="o">[</span>IP<span class="o">]</span>/<span class="o">[</span>sharename<span class="o">]</span> -U <span class="o">[</span>username<span class="o">]</span> <span class="o">[</span>password<span class="o">]</span>
</span></span><span class="line"><span class="cl">$ smbclient //<span class="o">[</span>IP<span class="o">]</span>/<span class="o">[</span>sharename<span class="o">]</span> -U <span class="s1">&#39;username%password&#39;</span>
</span></span></code></pre></div><p>And that&rsquo;s all. It is not that detailed, but I hope you will find it useful.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo Setup and Deployment</title>
      <link>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</link>
      <pubDate>Sun, 13 Jun 2021 11:12:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/hugo-setup-and-deployment/</guid>
      <description>Pretty basic tutorial to setup up a site using Hugo</description>
      <content:encoded><![CDATA[<p>Looking back at my first post in Bahasa Indonesia, I said that I was using Hugo to build this blog. So, in this post, I&rsquo;ll show you how to make your own!</p>
<h4 id="goals">Goals</h4>
<p>Below are the main goals of this post:</p>
<ul>
<li>Installing Hugo</li>
<li>Creating a Site with Hugo</li>
<li>Deploying the site using GitHub pages</li>
</ul>
<h4 id="prerequisites">Prerequisites</h4>
<p>There are some prerequisites needed to accomplish these goals:</p>
<ul>
<li>A GitHub account</li>
<li>Familiarity with CLI commands and basic Git workflow</li>
<li><a href="https://git-scm.com/downloads">Git Bash</a> for Windows users</li>
</ul>
<p>If all set, then let&rsquo;s get started</p>
<h2 id="installing-hugo">Installing Hugo</h2>
<p>First thing first, we&rsquo;ll need the Hugo executable binary, which you can grab it at <a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a>. Pick your Hugo version according to what OS you’re on. There is also the extended version, which you should use if you’re building your own theme or picking a theme that uses Sass/SCSS.</p>
<p>I will assume that you have downloaded the binary and extracted it somewhere on your system.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">47488</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> Fahmi FJ <span class="m">197121</span>    <span class="m">11357</span> Mar <span class="m">22</span> 00:17 LICENSE
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> Fahmi FJ <span class="m">197121</span>    <span class="m">12345</span> Mar <span class="m">22</span> 00:17 README.md
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> Fahmi FJ <span class="m">197121</span> <span class="m">48599040</span> Mar <span class="m">22</span> 01:04 hugo.exe
</span></span></code></pre></div><p>Let&rsquo;s test it on terminal by typing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo.exe version
</span></span><span class="line"><span class="cl">hugo v0.82.0-9D960784+extended windows/amd64 <span class="nv">BuildDate</span><span class="o">=</span>2021-03-21T17:28:04Z <span class="nv">VendorInfo</span><span class="o">=</span>gohugoio
</span></span></code></pre></div><p>At this time, Hugo’s binary is not available in a system-wide (it’s not accessible outside the current directory). Therefore, we&rsquo;ll make it accessible  system-wide by adding the binary location to what is known as <a href="https://en.wikipedia.org/wiki/Environment_variable">PATH variable</a>.</p>
<h4 id="system-wide-in-windows">System-wide in Windows</h4>
<p>For Windows users, let&rsquo;s create a folder called <code>bin</code> in <code>C:/</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\&gt;</span>mkdir bin
</span></span></code></pre></div><p>Once the folder is created, move your Hugo binary into it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\&gt;</span>dir bin
</span></span><span class="line"><span class="cl"> Volume in drive C is Windows
</span></span><span class="line"><span class="cl"> Volume Serial Number is AC06-7D93
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Directory of C:<span class="se">\b</span>in
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">13/06/2021  08:07    &lt;DIR&gt;          .
</span></span><span class="line"><span class="cl">13/06/2021  08:07    &lt;DIR&gt;          ..
</span></span><span class="line"><span class="cl">22/03/2021  01:04        48.599.040 hugo.exe
</span></span><span class="line"><span class="cl">               <span class="m">1</span> File<span class="o">(</span>s<span class="o">)</span>     48.599.040 bytes
</span></span><span class="line"><span class="cl">               <span class="m">2</span> Dir<span class="o">(</span>s<span class="o">)</span>  57.909.837.824 bytes free
</span></span></code></pre></div><p>After that, hit <code>Win + R</code> on your keyboard and type:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">rundll32.exe sysdm.cpl,EditEnvironmentVariables
</span></span></code></pre></div><p>You should see a window titled &ldquo;Environment Variables&rdquo;, and we&rsquo;re going to edit the <code>Path</code> variable there.</p>
<p><div class="img-container"><img src="imgs/image-20210613081626397.png" alt="image-20210613081626397"  /></div>
</p>
<p>On the edit window, add a new path and type <code>C:\bin</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210613082450289.png" alt="image-20210613082450289"  /></div>
</p>
<p>After that, just hit all the <strong>OK</strong> button.</p>
<p>Re-open your Windows terminal and run <code>hugo version</code>. If it returns the same output as previous one, then go to the next section.</p>
<h4 id="system-wide-in-linux">System-wide in Linux</h4>
<blockquote>
<p>I know those who use Linux probably already know how to 😁.</p>
</blockquote>
<p>For Linux users, let&rsquo;s create a folder called <code>bin</code> under <code>/home/username/.local/[here]</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p ~/.local/bin
</span></span></code></pre></div><p>Then move your Hugo binary into the newly created <code>bin</code> folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mv /previous/path/of/hugo ~/.local/bin/hugo
</span></span></code></pre></div><p>Next, open your <code>.bashrc</code> or <code>.zshrc</code> file which is located at <code>/home/username/.(zsh|bash)rc</code> with your favorite text editor such as vim, and then simply add these lines at the top of your <code>.bashrc/.zshrc</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">PATH_HUGO=&#39;/home/username/.local/bin&#39;
</span></span><span class="line"><span class="cl">export PATH=$PATH_HUGO:$PATH
</span></span></code></pre></div><p>Re-open your terminal and run <code>hugo version</code> from any directory and see if it&rsquo;s returns the version.</p>
<h2 id="creating-first-site">Creating First Site</h2>
<p>We can create a site in anywhere by issuing the command below, but I recommend you to create a site in a specific folder such as <code>workspace</code> or something like <code>/workspace/your.blog.domain.com</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo new site <span class="o">[</span>site-name<span class="o">]</span>
</span></span></code></pre></div><p>For now, let&rsquo;s call our new site <code>my-blog</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo new site my-blog
</span></span><span class="line"><span class="cl">Congratulations! Your new Hugo site is created in C:<span class="se">\U</span>sers<span class="se">\f</span>ahmi<span class="se">\D</span>esktop<span class="se">\t</span>est<span class="se">\m</span>y-blog.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Just a few more steps and you<span class="err">&#39;</span>re ready to go:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">1. Download a theme into the same-named folder.
</span></span><span class="line"><span class="cl">   Choose a theme from https://themes.gohugo.io/ or
</span></span><span class="line"><span class="cl">   create your own with the <span class="s2">&#34;hugo new theme &lt;THEMENAME&gt;&#34;</span> command.
</span></span><span class="line"><span class="cl">2. Perhaps you want to add some content. You can add single files
</span></span><span class="line"><span class="cl">   with <span class="s2">&#34;hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;&#34;</span>.
</span></span><span class="line"><span class="cl">3. Start the built-in live server via <span class="s2">&#34;hugo server&#34;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Visit https://gohugo.io/ <span class="k">for</span> quickstart guide and full documentation.
</span></span></code></pre></div><p>We see that Hugo creates a new folder called  <code>my-blog</code> at <code>C:\Users\fahmi\Desktop\test\my-blog</code>, and this <code>my-blog</code> has the following directory structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">my-blog
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.toml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span></code></pre></div><p>We can host that site locally by typing <code>hugo server</code> within <code>my-blog</code> directory. By default, the site is hosted at <code>http://localhost:1313/</code> , but it&rsquo;ll be empty because we haven&rsquo;t added any content yet.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> my-blog
</span></span><span class="line"><span class="cl">$ hugo server
</span></span></code></pre></div><h2 id="using-a-theme">Using a Theme</h2>
<p>You can choose any themes available on GitHub or at <a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a>. But since my blog uses a theme called <a href="https://themes.gohugo.io/hugo-papermod/">PaperMod</a>, we&rsquo;ll be using that too here.</p>
<p>For PaperMod, it prefers YAML instead of TOML, let&rsquo;s delete the previous <code>my-blog</code> and recreate it with the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rm my-blog -rf <span class="c1"># becareful with this or just delete it from explorer</span>
</span></span><span class="line"><span class="cl">$ hugo new site my-blog -f yml
</span></span></code></pre></div><p>We&rsquo;ll add the PaperMod theme by cloning it into the <code>my-blog/themes/</code> directory/</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></div><p>Then replace/overwrite our <code>config.yml</code> with <a href="https://raw.githubusercontent.com/adityatelange/hugo-PaperMod/exampleSite/config.yml">this</a> one, and modify the value of <code>baseUrl</code> and <code>theme</code> to these:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">theme</span><span class="p">:</span><span class="w"> </span><span class="l">PaperMod</span><span class="w">
</span></span></span></code></pre></div><p>Let&rsquo;s see how it looks like by visiting <code>http://localhost:1313</code> on the browser after we run this command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo server
</span></span></code></pre></div><h2 id="creating-first-post">Creating First Post</h2>
<p>We can create a new post by issuing the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo new post/new-post.md
</span></span></code></pre></div><p>You can edit <code>new-post.md</code> after that, the file should be under <code>my-blog/content/post/[here]</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ls -l my-blog/content/post/
</span></span><span class="line"><span class="cl">total <span class="m">1</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> Fahmi FJ <span class="m">197121</span> <span class="m">70</span> Jun <span class="m">13</span> 09:34 my-post.md
</span></span></code></pre></div><p>To see your post in the site, change the value <code>draft</code> from <code>true</code> to <code>false</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;My Post&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2021-06-13T09:34:43</span><span class="m">+07</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">My first post</span><span class="w">
</span></span></span></code></pre></div><p>It should be on your site now.</p>
<h2 id="deploying-the-site-on-github">Deploying The Site on GitHub</h2>
<p>From here, one thing you need to know is that when you run <code>hugo server</code>, Hugo generates all the site resources (html, images, etc.) and serves them directly from memory. But, if you just run <code>hugo</code>, Hugo generates all the site resources under <code>public</code> folder (<code>my-blog/public/[here]</code>).</p>
<p>The files in this <code>public</code> folder are the files that we are going to host on GitHub. We can simply upload all the files in the <code>public</code> folder into a GitHub repository.</p>
<p>But, before that, you have to change your site&rsquo;s <strong>base URL</strong> in <code>config.yml</code> to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://[your_user_name].github.io/my-blog/&#34;</span><span class="w">
</span></span></span></code></pre></div><p>For example, my username is <code>fahmifj</code> , so my config would be:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://fahmifj.github.io/my-blog/&#34;</span><span class="w">
</span></span></span></code></pre></div><p>Once you done with the config, type <code>hugo</code> within the site root directory and Hugo will re-generate all the resources we just deleted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo
</span></span><span class="line"><span class="cl">Start building sites …
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   <span class="p">|</span> EN <span class="p">|</span> FR <span class="p">|</span> FA
</span></span><span class="line"><span class="cl">-------------------+----+----+-----
</span></span><span class="line"><span class="cl">  Pages            <span class="p">|</span> <span class="m">14</span> <span class="p">|</span> <span class="m">10</span> <span class="p">|</span> <span class="m">10</span>
</span></span><span class="line"><span class="cl">  Paginator pages  <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Non-page files   <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Static files     <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Processed images <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Aliases          <span class="p">|</span>  <span class="m">3</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">1</span>
</span></span><span class="line"><span class="cl">  Sitemaps         <span class="p">|</span>  <span class="m">2</span> <span class="p">|</span>  <span class="m">1</span> <span class="p">|</span>  <span class="m">1</span>
</span></span><span class="line"><span class="cl">  Cleaned          <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in <span class="m">147</span> ms
</span></span></code></pre></div><p>Now, let&rsquo;s navigate to Github and <a href="https://docs.github.com/en/github/getting-started-with-github/quickstart/create-a-repo">create a new repository</a> called <code>my-blog</code>. Once the repo is created, click on <strong>Upload an existing file</strong>.</p>
<p><div class="img-container"><img src="imgs/image-20210613095820873.png" alt="image-20210613095820873"  /></div>
</p>
<p>Then simply drag and drop all the files from the <code>my-blog/public</code> folder there.</p>
<p><div class="img-container"><img src="imgs/image-20210613095945135.png" alt="image-20210613095945135"  /></div>
</p>
<p>Once all the files are uploaded, commit the changes. I&rsquo;ll just leave the default commit message.</p>
<p><div class="img-container"><img src="imgs/image-20210613101009392.png" alt="image-20210613101009392"  /></div>
</p>
<p>After that, let&rsquo;s head to the repository settings and find the Github Pages menu: <code>https://github.com/your-username/my-blog/settings/pages</code>.</p>
<p>Since we&rsquo;ll host this whole repository using GitHub pages, so under the source section, select the root directory of main branch, and then click on the Save button.</p>
<p><div class="img-container"><img src="imgs/image-20210613101748114.png" alt="image-20210613101748114"  /></div>
</p>
<p>Once you done with that, navigate to <code>https://yourusername.github.io/my-blog</code>, and you should see your site there.</p>
<p><div class="img-container"><img src="imgs/image-20210613101715896.png" alt="image-20210613101715896"  /></div>
</p>
<p>If you don&rsquo;t see it or the page returns a 404 error, then just wait for a few minutes more.</p>
<h2 id="deployment-script">Deployment Script</h2>
<p>Finally, we&rsquo;re going to (semi) automate the deployment process using a bash script.</p>
<p>Let’s go back to the directory of <code>my-blog </code> and then initialize <code>public</code> folder as a git repository. We&rsquo;ll also add the <code>public</code> folder as a submodule.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> public
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">$ git remote add origin https://github.com/your-username/my-blog.git
</span></span></code></pre></div><p>Now let&rsquo;s create a deployment script at the site root directory and name it as <code>deploy.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;\033[0;32mDeploying blog to GitHub...\033[0m&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Clean public folder</span>
</span></span><span class="line"><span class="cl">hugo --cleanDestinationDir
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Go to to public folder</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> public/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Add untracked files, hide output</span>
</span></span><span class="line"><span class="cl">git add -A &gt; /dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generate a fixed commit message with date and time</span>
</span></span><span class="line"><span class="cl"><span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;[`date &#34;</span>+%R %d-%h-%Y<span class="s2">&#34;]` Site update&#34;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c1"># Check for additional commit message</span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> -p <span class="s2">&#34;Add commit message: &#34;</span> add_msg
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$add_msg</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;&#34;</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl">	<span class="k">then</span> 
</span></span><span class="line"><span class="cl">	<span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2"> - </span><span class="nv">$add_msg</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Deploy</span>
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Go back to the root directory</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ../
</span></span></code></pre></div><p>You can run the script on Windows within Git Bash or WSL.</p>
<p>Let&rsquo;s create another post to test the deployment script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ hugo new post/second-post.md
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;This is second post&#39;</span> &gt;&gt; content/post/second-post.md
</span></span></code></pre></div><p>Don&rsquo;t forget to change the value of <code>draft</code>  from <code>true</code> to <code>false</code>, here is a small trick with <code>sed</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sed -i <span class="s1">&#39;s/draft: false/draft: true/g&#39;</span> content/post/second-post.md
</span></span></code></pre></div><p>Now we can run the script, the output should look something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./deploy.sh
</span></span><span class="line"><span class="cl">Deploying blog to GitHub...
</span></span><span class="line"><span class="cl">Start building sites …
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                   <span class="p">|</span> EN <span class="p">|</span> FR <span class="p">|</span> FA
</span></span><span class="line"><span class="cl">-------------------+----+----+-----
</span></span><span class="line"><span class="cl">  Pages            <span class="p">|</span> <span class="m">15</span> <span class="p">|</span> <span class="m">10</span> <span class="p">|</span> <span class="m">10</span>
</span></span><span class="line"><span class="cl">  Paginator pages  <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Non-page files   <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Static files     <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Processed images <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Aliases          <span class="p">|</span>  <span class="m">3</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">1</span>
</span></span><span class="line"><span class="cl">  Sitemaps         <span class="p">|</span>  <span class="m">2</span> <span class="p">|</span>  <span class="m">1</span> <span class="p">|</span>  <span class="m">1</span>
</span></span><span class="line"><span class="cl">  Cleaned          <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span> <span class="p">|</span>  <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total in <span class="m">155</span> ms
</span></span><span class="line"><span class="cl">Add commit message:
</span></span><span class="line"><span class="cl"><span class="o">[</span>main af4c483<span class="o">]</span> <span class="o">[</span>11:00 13-Jun-2021<span class="o">]</span> Site update
</span></span><span class="line"><span class="cl"> <span class="m">9</span> files changed, <span class="m">459</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">8</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> post/second-post/index.html
</span></span><span class="line"><span class="cl">Enumerating objects: 27, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Counting objects: 100% <span class="o">(</span>27/27<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Delta compression using up to <span class="m">8</span> threads
</span></span><span class="line"><span class="cl">Compressing objects: 100% <span class="o">(</span>13/13<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Writing objects: 100% <span class="o">(</span>15/15<span class="o">)</span>, 3.54 KiB <span class="p">|</span> 1.77 MiB/s, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Total <span class="m">15</span> <span class="o">(</span>delta 9<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">0</span>
</span></span><span class="line"><span class="cl">remote: Resolving deltas: 100% <span class="o">(</span>9/9<span class="o">)</span>, completed with <span class="m">7</span> <span class="nb">local</span> objects.
</span></span><span class="line"><span class="cl">To https://github.com/fahmifj/my-blog.git
</span></span><span class="line"><span class="cl">   f7141a3..af4c483  main -&gt; main
</span></span><span class="line"><span class="cl">Branch <span class="s1">&#39;main&#39;</span> <span class="nb">set</span> up to track remote branch <span class="s1">&#39;main&#39;</span> from <span class="s1">&#39;origin&#39;</span>.
</span></span></code></pre></div><p>It should be updated if we check our repo.</p>
<p><div class="img-container"><img src="imgs/image-20210613110105343.png" alt="image-20210613110105343"  /></div>
</p>
<p>That&rsquo;s it!</p>
<p>This is how I deployed my blog at the first time. However, this is an inefficient method because it wastes your bandwidth. Therefore, in the next post, let&rsquo;s employ GitHub action 😼.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
